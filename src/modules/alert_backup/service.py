# src/modules/alert_backup/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List # List –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
from datetime import datetime
import pytz # pytz –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è TZ_KYIV
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
ALERTS_IN_UA_API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –£–∫—Ä–∞—ó–Ω–∏
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø—ñ–Ω–≥ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ –Ω–∞ –µ–º–æ–¥–∑—ñ
ALERT_TYPE_EMOJI_BACKUP = {
    "air_raid": "üö®", # –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
    "artillery_shelling": "üí£", # –ê—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏–π –æ–±—Å—Ç—Ä—ñ–ª
    "urban_fights": "üí•", # –í—É–ª–∏—á–Ω—ñ –±–æ—ó
    "chemical": "‚ò£Ô∏è", # –•—ñ–º—ñ—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞
    "nuclear": "‚ò¢Ô∏è", # –Ø–¥–µ—Ä–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞
    "info": "‚ÑπÔ∏è", # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (—è–∫—â–æ API —Ç–∞–∫–µ –ø–æ–≤–µ—Ä—Ç–∞—î)
    "unknown": "‚ùì", # –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø
}

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
def _generate_alerts_in_ua_api_error(status_code: int, message: str, service_name: str = "Alerts.in.ua") -> Dict[str, Any]:
    logger.error(f"{service_name} API Error: Code {status_code}, Message: {message}")
    return {"status": "error", "code": status_code, "message": message, "error_source": service_name}


@cached(ttl=config.CACHE_TTL_ALERTS_BACKUP, key="alerts_in_ua:active_alerts", namespace="alerts_backup")
async def get_backup_alerts(bot: Bot) -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –∑ alerts.in.ua.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫: {"status": "success", "data": List[Dict]} –∞–±–æ {"status": "error", ...}
    """
    if not config.ALERTS_IN_UA_TOKEN:
        return _generate_alerts_in_ua_api_error(500, "–†–µ–∑–µ—Ä–≤–Ω–∏–π API —Ç–æ–∫–µ–Ω (ALERTS_IN_UA_TOKEN) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")

    headers = {"Authorization": f"Bearer {config.ALERTS_IN_UA_TOKEN}"}
    last_exception = None

    for attempt in range(config.MAX_RETRIES): # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ MAX_RETRIES –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É
        try:
            logger.debug(f"Attempt {attempt + 1}/{config.MAX_RETRIES} to fetch backup alerts from Alerts.in.ua")
            async with aiohttp.ClientSession() as session:
                async with session.get(ALERTS_IN_UA_API_URL, headers=headers, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_text_preview = (await response.text())[:500]

                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            logger.debug(f"Alerts.in.ua API response JSON: {str(data)[:300]}")
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î —Å–ª–æ–≤–Ω–∏–∫–æ–º —ñ –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á "alerts"
                            if not isinstance(data, dict):
                                logger.error(f"Alerts.in.ua: API response is not a dictionary, but {type(data)}.")
                                return _generate_alerts_in_ua_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API (–æ—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ª–æ–≤–Ω–∏–∫).")

                            alerts_list = data.get("alerts")
                            if alerts_list is None: # –ö–ª—é—á "alerts" –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
                                logger.error("Alerts.in.ua: 'alerts' key is missing in the response dictionary.")
                                return _generate_alerts_in_ua_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API (–≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á 'alerts').")
                            
                            if not isinstance(alerts_list, list): # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º "alerts" –Ω–µ —î —Å–ø–∏—Å–∫–æ–º
                                logger.error(f"Alerts.in.ua: 'alerts' value is not a list, but {type(alerts_list)}.")
                                return _generate_alerts_in_ua_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API (–¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ —î —Å–ø–∏—Å–∫–æ–º).")

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —É —Å–ø–∏—Å–∫—É alerts_list —î —Å–ª–æ–≤–Ω–∏–∫–æ–º
                            if not all(isinstance(item, dict) for item in alerts_list):
                                logger.error("Alerts.in.ua: Not all items in 'alerts' list are dictionaries.")
                                return _generate_alerts_in_ua_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö —É —Å–ø–∏—Å–∫—É —Ç—Ä–∏–≤–æ–≥ (–æ–∫—Ä–µ–º—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ —î —Å–ª–æ–≤–Ω–∏–∫–∞–º–∏).")

                            logger.debug(f"Extracted {len(alerts_list)} alerts from backup API (Alerts.in.ua)")
                            return {"status": "success", "data": alerts_list} # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∞–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≤–æ–≥
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from Alerts.in.ua. Response: {response_text_preview}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Alerts.in.ua.")
                            return _generate_alerts_in_ua_api_error(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.")
                        except Exception as e:
                            logger.exception(f"Attempt {attempt + 1}: Error processing successful backup alerts response from Alerts.in.ua: {e}", exc_info=True)
                            return _generate_alerts_in_ua_api_error(500, f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {e}")

                    elif response.status == 401: # –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω
                        logger.error(f"Attempt {attempt + 1}: Invalid Alerts.in.ua API token (401). Response: {response_text_preview}")
                        return _generate_alerts_in_ua_api_error(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.")
                    elif response.status == 404: # –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                        logger.warning(f"Attempt {attempt + 1}: Received 404 from Alerts.in.ua. URL: {ALERTS_IN_UA_API_URL}. Response: {response_text_preview}")
                        return _generate_alerts_in_ua_api_error(404, "–†–µ–∑–µ—Ä–≤–Ω–µ API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404).")
                    elif response.status == 429: # Rate limit
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=429, message="Rate limit exceeded (Alerts.in.ua)")
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua RateLimit Error (429). Retrying...")
                    elif response.status >= 500: # –°–µ—Ä–≤–µ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} (Alerts.in.ua)")
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua Server Error {response.status}. Retrying...")
                    else: # –Ü–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –ø–æ–º–∏–ª–∫–∏
                        logger.error(f"Attempt {attempt + 1}: Alerts.in.ua Client Error {response.status}. Response: {response_text_preview}")
                        return _generate_alerts_in_ua_api_error(response.status, f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {response.status}.")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to Alerts.in.ua: {e}. Retrying...")
        except Exception as e: # –ë—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching backup alerts: {e}", exc_info=True)
            return _generate_alerts_in_ua_api_error(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥.")

        if attempt < config.MAX_RETRIES - 1:
            delay = config.INITIAL_DELAY * (2 ** attempt) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ INITIAL_DELAY –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É
            logger.info(f"Waiting {delay} seconds before next backup alert (Alerts.in.ua) retry...")
            await asyncio.sleep(delay)
        else: # –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ (Alerts.in.ua) –ø—ñ—Å–ª—è {config.MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)

            final_error_code = 503 # Service Unavailable
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504 # Gateway Timeout
            return _generate_alerts_in_ua_api_error(final_error_code, error_message)
            
    return _generate_alerts_in_ua_api_error(500, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ (Alerts.in.ua) (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")


def format_backup_alerts_message(api_response: Dict[str, Any]) -> str:
    """ –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ –∑ alerts.in.ua """
    now_kyiv_str = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    header = f"<b>üö® –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv_str}:</b>\n"

    if api_response.get("status") == "error":
        error_msg = api_response.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.")
        # error_code = api_response.get("code", "N/A") # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        return header + f"\nüò• –ü–æ–º–∏–ª–∫–∞: {error_msg}\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>"

    # –û—á—ñ–∫—É—î–º–æ, —â–æ "data" - —Ü–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≤–æ–≥
    alerts_data_list = api_response.get("data")
    
    if alerts_data_list is None: # –ú–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, —è–∫—â–æ status == "success"
        logger.error("format_backup_alerts_message (Alerts.in.ua): 'data' key missing in successful API response.")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö (–≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥).\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>"
    
    if not isinstance(alerts_data_list, list):
        logger.error(f"format_backup_alerts_message (Alerts.in.ua): API data is not a list, but {type(alerts_data_list)}")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API).\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>"

    if not alerts_data_list: # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≤–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ).\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>"

    # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏, –≥—Ä—É–ø—É—é—á–∏ –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º (location_title –∞–±–æ location_oblast)
    active_regions_alerts: Dict[str, set] = {} # –†–µ–≥—ñ–æ–Ω -> set —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ (–µ–º–æ–¥–∑—ñ)

    for alert_item in alerts_data_list:
        if not isinstance(alert_item, dict):
            logger.warning(f"Skipping non-dict item in alerts_data_list (Alerts.in.ua): {alert_item}")
            continue
            
        # API alerts.in.ua –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –ø–æ–ª—è –¥–ª—è –Ω–∞–∑–≤–∏ —Ä–µ–≥—ñ–æ–Ω—É/–º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ.
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: location_title, –ø–æ—Ç—ñ–º location_oblast.
        # location_title –º–æ–∂–µ –±—É—Ç–∏ "–º. –ö–∏—ó–≤", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", –∞–±–æ –Ω–∞–∑–≤–∞ –≥—Ä–æ–º–∞–¥–∏.
        # location_oblast –∑–∞–∑–≤–∏—á–∞–π –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–∑–≤—É –æ–±–ª–∞—Å—Ç—ñ.
        
        location_title = alert_item.get("location_title")
        location_oblast = alert_item.get("location_oblast")
        
        display_region_name = None
        if location_title and isinstance(location_title, str):
            display_region_name = location_title.strip()
        elif location_oblast and isinstance(location_oblast, str):
            display_region_name = location_oblast.strip()
        
        if not display_region_name:
            logger.warning(f"Skipping alert item with no identifiable region name (Alerts.in.ua): {alert_item}")
            continue

        alert_type_api = alert_item.get("alert_type", "unknown").lower() # API –ø–æ–≤–µ—Ä—Ç–∞—î –≤ snake_case
        alert_emoji = ALERT_TYPE_EMOJI_BACKUP.get(alert_type_api, ALERT_TYPE_EMOJI_BACKUP["unknown"])
        
        if display_region_name not in active_regions_alerts:
            active_regions_alerts[display_region_name] = set()
        active_regions_alerts[display_region_name].add(alert_emoji)

    if not active_regions_alerts: # –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î (–ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó). –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ).\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>"

    message_lines = [header]
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é —Ä–µ–≥—ñ–æ–Ω—É
    for region_name_sorted in sorted(active_regions_alerts.keys()):
        alerts_emojis_str = ", ".join(sorted(list(active_regions_alerts[region_name_sorted])))
        message_lines.append(f"üî¥ <b>{region_name_sorted}:</b> {alerts_emojis_str}")

    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ!")
    return "\n".join(message_lines)