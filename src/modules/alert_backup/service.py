# src/modules/alert_backup/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List
from datetime import datetime
import pytz
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
ALERTS_IN_UA_API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ —ç–º–æ–¥–∑–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ API)
# –ò—Å—Ç–æ—á–Ω–∏–∫: https://devs.alerts.in.ua/#alert-types
ALERT_TYPE_EMOJI_BACKUP = {
    "air_raid": "üö®",
    "artillery_shelling": "üí£",
    "urban_fights": "üí•",
    "chemical": "‚ò£Ô∏è",
    "nuclear": "‚ò¢Ô∏è",
    "info": "‚ÑπÔ∏è", # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ API –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø
    "unknown": "‚ùì", # –û–±—â–∏–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
}

@cached(ttl=config.CACHE_TTL_ALERTS_BACKUP, key="active_alerts_backup", namespace="alerts_backup")
async def get_backup_alerts(bot: Bot) -> Optional[List[Dict[str, Any]]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ —Å alerts.in.ua """
    if not config.ALERTS_IN_UA_TOKEN:
        logger.error("Alerts.in.ua API token (ALERTS_IN_UA_TOKEN) is not configured.")
        return {"status": "error", "message": "–†–µ–∑–µ—Ä–≤–Ω–∏–π API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è alerts.in.ua API (Bearer Token)
    headers = {"Authorization": f"Bearer {config.ALERTS_IN_UA_TOKEN}"}
    last_exception = None

    for attempt in range(config.MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{config.MAX_RETRIES} to fetch backup alerts")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –∏–∑ aiohttp –Ω–∞–ø—Ä—è–º—É—é
            async with aiohttp.ClientSession() as session:
                async with session.get(ALERTS_IN_UA_API_URL, headers=headers, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"alerts": [...]}
                            alerts = data.get("alerts", [])
                            logger.debug(f"Alerts.in.ua response: {len(alerts)} alerts")
                            return alerts # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from Alerts.in.ua. Response: {await response.text()}")
                            return {"status": "error", "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API"}
                        except Exception as json_err: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                             logger.error(f"Attempt {attempt + 1}: Error parsing JSON from Alerts.in.ua: {json_err}. Response: {await response.text()[:200]}")
                             return {"status": "error", "message": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API"}

                    elif response.status == 401:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: Invalid Alerts.in.ua API token (401). Response: {error_text[:200]}")
                        return {"status": "error", "message": f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API"}
                    elif response.status == 404: # API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 404 –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π URL
                         error_text = await response.text()
                         logger.warning(f"Attempt {attempt + 1}: Received 404 from Alerts.in.ua. Response: {error_text[:200]}")
                         # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 404 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–≤–æ–≥, –Ω–æ –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API
                         # –ï—Å–ª–∏ 404 - —ç—Ç–æ "–Ω–µ—Ç —Ç—Ä–µ–≤–æ–≥", —Ç–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫: return []
                         # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –æ—à–∏–±–∫—É:
                         return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {response.status} (–º–æ–∂–ª–∏–≤–æ, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)"}
                    elif response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=429, message="Rate limit exceeded"
                        )
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua RateLimit Error (429). Retrying...")
                    elif response.status >= 500:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status}"
                        )
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua Server Error {response.status}. Retrying...")
                    else:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: Alerts.in.ua Error {response.status}. Response: {error_text[:200]}")
                        return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to Alerts.in.ua: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching backup alerts: {e}", exc_info=True)
            return {"status": "error", "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"}

        if attempt < config.MAX_RETRIES - 1:
            delay = config.INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next backup alert retry...")
            await asyncio.sleep(delay)
        else:
            logger.error(f"All {config.MAX_RETRIES} attempts failed for backup alerts. Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {last_exception.status} –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"}
            elif isinstance(last_exception, aiohttp.ClientConnectorError):
                return {"status": "error", "message": "–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"}
            elif isinstance(last_exception, asyncio.TimeoutError):
                return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"}
            else:
                return {"status": "error", "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"}
    return {"status": "error", "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Ä–µ—Ç—Ä–∞—ó–≤"}


def format_backup_alerts_message(alerts_data: Optional[List[Dict[str, Any]]]) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö —Å alerts.in.ua """
    now_kyiv = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    header = f"<b>üö® –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv}:</b>\n"

    if alerts_data is None:
        return header + "\nüò• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–∞–º–∏ –≤–µ—Ä–Ω—É–ª–∏ –∏–∑ get_backup_alerts
    if isinstance(alerts_data, dict) and "status" in alerts_data and alerts_data["status"] == "error":
        error_msg = alerts_data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
        return header + f"\nüò• –ü–æ–º–∏–ª–∫–∞: {error_msg}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ (—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API)
    if not isinstance(alerts_data, list):
         logger.error(f"Invalid data type passed to format_backup_alerts_message: {type(alerts_data)}")
         return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö."

    if not alerts_data:
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)."

    active_oblasts = {}
    for alert in alerts_data:
        oblast = alert.get("oblast")
        alert_type = alert.get("alert_type", "unknown") # 'air_raid', 'artillery_shelling', etc.
        if not oblast:
            continue

        if oblast not in active_oblasts:
            active_oblasts[oblast] = set() # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤

        active_oblasts[oblast].add(alert_type)

    if not active_oblasts:
         return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)."

    message_lines = [header]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    for oblast_name in sorted(active_oblasts.keys()):
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –æ–±–ª–∞—Å—Ç–∏
        alerts_str = ", ".join([
            ALERT_TYPE_EMOJI_BACKUP.get(atype, atype)
            for atype in sorted(list(active_oblasts[oblast_name])) # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        ])
        message_lines.append(f"üî¥ <b>{oblast_name}:</b> {alerts_str}")

    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ!")
    return "\n".join(message_lines)