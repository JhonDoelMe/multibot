# src/modules/alert_backup/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List
from datetime import datetime
import pytz
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
ALERTS_IN_UA_API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ —ç–º–æ–¥–∑–∏
ALERT_TYPE_EMOJI_BACKUP = {
    "air_raid": "üö®",
    "artillery_shelling": "üí£",
    "urban_fights": "üí•",
    "chemical": "‚ò£Ô∏è",
    "nuclear": "‚ò¢Ô∏è",
    "info": "‚ÑπÔ∏è",
    "unknown": "‚ùì",
}

@cached(ttl=config.CACHE_TTL_ALERTS_BACKUP, key="active_alerts_backup", namespace="alerts_backup")
async def get_backup_alerts(bot: Bot) -> Dict[str, Any]: # –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ —Å alerts.in.ua.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {"status": "success", "data": List[Dict]} –∏–ª–∏ {"status": "error", "message": str}
    """
    if not config.ALERTS_IN_UA_TOKEN:
        logger.error("Alerts.in.ua API token (ALERTS_IN_UA_TOKEN) is not configured.")
        return {"status": "error", "message": "–†–µ–∑–µ—Ä–≤–Ω–∏–π API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}

    headers = {"Authorization": f"Bearer {config.ALERTS_IN_UA_TOKEN}"}
    last_exception = None

    for attempt in range(config.MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{config.MAX_RETRIES} to fetch backup alerts")
            async with aiohttp.ClientSession() as session:
                async with session.get(ALERTS_IN_UA_API_URL, headers=headers, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_text_preview = (await response.text())[:500] # –î–ª—è –ª–æ–≥–æ–≤, —á–∏—Ç–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑

                    if response.status == 200:
                        try:
                            data = await response.json() # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            logger.debug(f"Alerts.in.ua response JSON: {data}")
                            alerts = data.get("alerts")
                            if alerts is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á "alerts" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                logger.error("Alerts.in.ua: 'alerts' key is missing in response.")
                                return {"status": "error", "message": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API (–≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á 'alerts')"}
                            if not isinstance(alerts, list):
                                logger.error(f"Alerts.in.ua: 'alerts' is not a list, but {type(alerts)}.")
                                return {"status": "error", "message": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API (–¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ —î —Å–ø–∏—Å–∫–æ–º)"}

                            logger.debug(f"Extracted {len(alerts)} alerts from backup API")
                            return {"status": "success", "data": alerts}
                        except aiohttp.ContentTypeError as json_err: # –ï—Å–ª–∏ response.json() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from Alerts.in.ua. Error: {json_err}. Response: {response_text_preview}")
                            # –ù–µ —Ä–µ—Ç—Ä–∞–∏–º –ø—Ä–∏ ContentTypeError, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                            return {"status": "error", "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API"}
                        except Exception as e: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            logger.exception(f"Attempt {attempt + 1}: Error processing successful backup alerts response: {e}", exc_info=True)
                            return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {e}"}

                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid Alerts.in.ua API token (401). Response: {response_text_preview}")
                        return {"status": "error", "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API"}
                    elif response.status == 404:
                        logger.warning(f"Attempt {attempt + 1}: Received 404 from Alerts.in.ua. Response: {response_text_preview}")
                        return {"status": "error", "message": "–†–µ–∑–µ—Ä–≤–Ω–µ API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404)"}
                    elif response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=429, message="Rate limit exceeded (Alerts.in.ua)"
                        )
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua RateLimit Error (429). Retrying...")
                    elif response.status >= 500:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} (Alerts.in.ua)"
                        )
                        logger.warning(f"Attempt {attempt + 1}: Alerts.in.ua Server Error {response.status}. Retrying...")
                    else: # –î—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                        logger.error(f"Attempt {attempt + 1}: Alerts.in.ua Client Error {response.status}. Response: {response_text_preview}")
                        return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to Alerts.in.ua: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching backup alerts: {e}", exc_info=True)
            return {"status": "error", "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"}

        if attempt < config.MAX_RETRIES - 1:
            delay = config.INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next backup alert retry...")
            await asyncio.sleep(delay)
        else: # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"All {config.MAX_RETRIES} attempts failed for backup alerts. Last error: {last_exception!r}")
            error_message = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"
            if isinstance(last_exception, aiohttp.ClientResponseError):
                error_message = f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API {last_exception.status} –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"
            elif isinstance(last_exception, aiohttp.ClientConnectorError):
                error_message = "–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"
            elif isinstance(last_exception, asyncio.TimeoutError):
                error_message = "–¢–∞–π–º–∞—É—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—ñ—Å–ª—è —Ä–µ—Ç—Ä–∞—ó–≤"
            elif last_exception:
                error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ: {str(last_exception)}"
            return {"status": "error", "message": error_message}
            
    # –≠—Ç–æ—Ç return –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ü–∏–∫–ª –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    return {"status": "error", "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Ä–µ—Ç—Ä–∞—ó–≤ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥)"}


def format_backup_alerts_message(api_response: Dict[str, Any]) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö —Å alerts.in.ua """
    now_kyiv = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    header = f"<b>üö® –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv}:</b>\n"

    if api_response.get("status") == "error":
        error_msg = api_response.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
        return header + f"\nüò• –ü–æ–º–∏–ª–∫–∞: {error_msg}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    alerts_data = api_response.get("data")
    if alerts_data is None: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è get_backup_alerts –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –ø–æ–∫—Ä—ã—Ç—å
        logger.error("format_backup_alerts_message: 'data' key missing in successful API response.")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö (–≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥)."
    
    if not isinstance(alerts_data, list):
        logger.error(f"Invalid data type for alerts_data in format_backup_alerts_message: {type(alerts_data)}")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø)."

    if not alerts_data:
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)."

    active_oblasts = {}
    for alert in alerts_data:
        if not isinstance(alert, dict): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - —Å–ª–æ–≤–∞—Ä—å
            logger.warning(f"Skipping non-dict item in alerts_data: {alert}")
            continue
            
        # API alerts.in.ua –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'location_title' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏,
        # 'location_oblast' –º–æ–∂–µ—Ç –±—ã—Ç—å, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'location_title' –∫–∞–∫ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è.
        # –ï—Å–ª–∏ 'location_type' == 'oblast', —Ç–æ 'location_title' –∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏.
        # –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –ø–æ —Ä–∞–π–æ–Ω—É/–≥—Ä–æ–º–∞–¥–µ, 'location_title' –±—É–¥–µ—Ç —Ä–∞–π–æ–Ω/–≥—Ä–æ–º–∞–¥–∞,
        # –∞ 'location_oblast' - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–±–ª–∞—Å—Ç—å.
        
        oblast = alert.get("location_oblast")
        location_title = alert.get("location_title") # –ù–∞–ø—Ä–∏–º–µ—Ä, "–º. –ö–∏—ó–≤" –∏–ª–∏ "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
        location_type = alert.get("location_type") # 'oblast', 'raion', 'hromada', 'city'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–≥–∏–æ–Ω–∞
        display_region_name = location_title # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º location_title
        if location_type != "oblast" and oblast:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–≤–æ–≥–∞ –ø–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏, –∞ –ø–æ –µ–µ —á–∞—Å—Ç–∏,
            # –∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏, –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å.
            # –ù–∞–ø—Ä–∏–º–µ—Ä: "–ë–∞–ª–∞–∫–ª—ñ–π—Å—å–∫–∞ –≥—Ä–æ–º–∞–¥–∞ (–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)"
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ location_title
            pass # display_region_name = f"{location_title} ({oblast})"


        alert_type = alert.get("alert_type", "unknown")
        
        if not display_region_name: # –ï—Å–ª–∏ –∏–º—è —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ alert –±–µ–∑ location_title: {alert}")
            continue

        if display_region_name not in active_oblasts:
            active_oblasts[display_region_name] = set()

        active_oblasts[display_region_name].add(alert_type)

    if not active_oblasts: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î (–ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó). –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)."

    message_lines = [header]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞
    for region_name in sorted(active_oblasts.keys()):
        alerts_str = ", ".join(
            ALERT_TYPE_EMOJI_BACKUP.get(atype, ALERT_TYPE_EMOJI_BACKUP["unknown"])
            for atype in sorted(list(active_oblasts[region_name]))
        )
        message_lines.append(f"üî¥ <b>{region_name}:</b> {alerts_str}")

    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.alerts.in.ua</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ!")
    return "\n".join(message_lines)