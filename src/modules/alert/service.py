# src/modules/alert/service.py

import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any, List # List –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
from datetime import datetime
import pytz
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
UA_ALERTS_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"
UA_REGION_API_URL = "https://api.ukrainealarm.com/api/v3/regions" # –ú–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –¥–ª—è –º–∞–ø–ø—ñ–Ω–≥—É ID –Ω–∞ —ñ–º–µ–Ω–∞

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ –Ω–∞ –µ–º–æ–¥–∑—ñ
ALERT_TYPE_EMOJI = {
    "AIR": "üö®",
    "ARTILLERY": "üí£",
    "URBAN_FIGHTS": "üí•",
    "CHEMICAL": "‚ò£Ô∏è",
    "NUCLEAR": "‚ò¢Ô∏è",
    "INFO": "‚ÑπÔ∏è",
    "UNKNOWN": "‚ùì"
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
def _generate_ualarm_api_error(status_code: int, message: str, service_name: str = "UkraineAlarm") -> Dict[str, Any]:
    logger.error(f"{service_name} API Error: Code {status_code}, Message: {message}")
    # –î–æ–¥–∞—î–º–æ "error_source" –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    return {"status": "error", "code": status_code, "message": message, "error_source": service_name}


@cached(ttl=config.CACHE_TTL_ALERTS, key_builder=lambda *args, **kwargs: f"ualarm:alerts:v3:{kwargs.get('region_id', 'all')}", namespace="alerts")
async def get_active_alerts(bot: Bot, region_id: str = "") -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ ID —Ä–µ–≥—ñ–æ–Ω—É –∞–±–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ –∑ UkraineAlarm API v3.
    region_id: ID —Ä–µ–≥—ñ–æ–Ω—É. –ü—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ - –≤—Å—è –£–∫—Ä–∞—ó–Ω–∞.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫: {"status": "success", "data": List[Dict]} –∞–±–æ {"status": "error", ...}
    """
    if not config.UKRAINEALARM_API_TOKEN:
        return _generate_ualarm_api_error(500, "API —Ç–æ–∫–µ–Ω UkraineAlarm (UKRAINEALARM_API_TOKEN) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")

    headers = {"Authorization": config.UKRAINEALARM_API_TOKEN}
    params = {"regionId": region_id} if region_id else {}
    last_exception = None
    request_description = f"region_id '{region_id or 'all'}'"

    for attempt in range(config.MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{config.MAX_RETRIES} to fetch alerts for {request_description} from UkraineAlarm")
            async with aiohttp.ClientSession() as session:
                async with session.get(UA_ALERTS_API_URL, headers=headers, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_text_preview = (await response.text())[:500] # –î–ª—è –ª–æ–≥—ñ–≤

                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            logger.debug(f"UkraineAlarm API v3 response for {request_description}: {str(data)[:300]}")

                            # API v3 –¥–ª—è /alerts (–Ω–∞–≤—ñ—Ç—å –±–µ–∑ regionId) –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤.
                            # –ö–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É - —Ü–µ –æ–±'—î–∫—Ç —Ä–µ–≥—ñ–æ–Ω—É, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –ø–æ–ª–µ activeAlerts (—Å–ø–∏—Å–æ–∫).
                            if not isinstance(data, list):
                                logger.error(f"UkraineAlarm API v3 response for {request_description} is not a list: {type(data)}")
                                return _generate_ualarm_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API (–æ—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤).")
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —î —Å–ª–æ–≤–Ω–∏–∫–æ–º (—Ö–æ—á–∞ –± –ø–µ—Ä—à–∏–π, —è–∫—â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π)
                            if data and not all(isinstance(item, dict) for item in data):
                                logger.error(f"UkraineAlarm API v3 list for {request_description} contains non-dict elements.")
                                return _generate_ualarm_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö —É —Å–ø–∏—Å–∫—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤ API.")

                            return {"status": "success", "data": data} # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from UkraineAlarm for {request_description}. Response: {response_text_preview}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ UkraineAlarm.")
                            return _generate_ualarm_api_error(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
                        except Exception as e: # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            logger.exception(f"Attempt {attempt + 1}: Error processing successful UkraineAlarm response for {request_description}: {e}", exc_info=True)
                            return _generate_ualarm_api_error(500, f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö API: {e}")

                    elif response.status == 401: # –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω
                        logger.error(f"Attempt {attempt + 1}: Invalid UkraineAlarm API token (401) for {request_description}. Response: {response_text_preview}")
                        return _generate_ualarm_api_error(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π API —Ç–æ–∫–µ–Ω.")
                    elif response.status == 404: # –ú–æ–∂–µ –±—É—Ç–∏, —è–∫—â–æ regionId –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑–º—ñ–Ω–∏–≤—Å—è
                        logger.warning(f"Attempt {attempt + 1}: UkraineAlarm API returned 404 for {request_description}. Response: {response_text_preview}")
                        return _generate_ualarm_api_error(404, "–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ä–µ–≥—ñ–æ–Ω—É –∞–±–æ URL API).")
                    elif response.status == 429: # Rate limit
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=429, message="Rate limit exceeded (UkraineAlarm)")
                        logger.warning(f"Attempt {attempt + 1}: UkraineAlarm RateLimit Error (429) for {request_description}. Retrying...")
                    elif response.status >= 500: # –°–µ—Ä–≤–µ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} (UkraineAlarm)")
                        logger.warning(f"Attempt {attempt + 1}: UkraineAlarm Server Error {response.status} for {request_description}. Retrying...")
                    else: # –Ü–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –ø–æ–º–∏–ª–∫–∏
                        logger.error(f"Attempt {attempt + 1}: UkraineAlarm Client Error {response.status} for {request_description}. Response: {response_text_preview}")
                        return _generate_ualarm_api_error(response.status, f"–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –ø–æ–º–∏–ª–∫–∞ API: {response.status}.")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to UkraineAlarm for {request_description}: {e}. Retrying...")
        except Exception as e: # –ë—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching alerts for {request_description}: {e}", exc_info=True)
            return _generate_ualarm_api_error(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É —Ç—Ä–∏–≤–æ–≥.")

        if attempt < config.MAX_RETRIES - 1:
            delay = config.INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next UkraineAlarm alert retry for {request_description}...")
            await asyncio.sleep(delay)
        else: # –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ –¥–ª—è {request_description} –ø—ñ—Å–ª—è {config.MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            
            final_error_code = 503 # Service Unavailable
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504 # Gateway Timeout
            return _generate_ualarm_api_error(final_error_code, error_message)
            
    return _generate_ualarm_api_error(500, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥ –¥–ª—è {request_description} (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")


@cached(ttl=config.CACHE_TTL_REGIONS, key="ualarm:regions:v3", namespace="alerts") # –ó–º—ñ–Ω–µ–Ω–æ –∫–ª—é—á –¥–ª—è v3
async def get_regions(bot: Bot) -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –≤—ñ–¥ UkraineAlarm API v3.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫: {"status": "success", "data": List[Dict]} –∞–±–æ {"status": "error", ...}
    """
    if not config.UKRAINEALARM_API_TOKEN:
        return _generate_ualarm_api_error(500, "API —Ç–æ–∫–µ–Ω UkraineAlarm (UKRAINEALARM_API_TOKEN) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤.", service_name="UkraineAlarm Regions")

    headers = {"Authorization": config.UKRAINEALARM_API_TOKEN}
    last_exception = None

    for attempt in range(config.MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{config.MAX_RETRIES} to fetch regions from UkraineAlarm v3")
            async with aiohttp.ClientSession() as session:
                async with session.get(UA_REGION_API_URL, headers=headers, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_text_preview = (await response.text())[:500]

                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            logger.debug(f"UkraineAlarm regions v3 response: {str(data)[:300]}")
                            if not isinstance(data, list) or not all(isinstance(item, dict) for item in data):
                                logger.error(f"UkraineAlarm regions API v3 response is not a list of dicts: {type(data)}")
                                return _generate_ualarm_api_error(500, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API (—Ä–µ–≥—ñ–æ–Ω–∏).", service_name="UkraineAlarm Regions")
                            return {"status": "success", "data": data}
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from UkraineAlarm regions. Response: {response_text_preview}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ UkraineAlarm (—Ä–µ–≥—ñ–æ–Ω–∏).")
                            return _generate_ualarm_api_error(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Ä–µ–≥—ñ–æ–Ω–∏).", service_name="UkraineAlarm Regions")
                        except Exception as e:
                            logger.exception(f"Attempt {attempt + 1}: Error processing successful UkraineAlarm regions response: {e}", exc_info=True)
                            return _generate_ualarm_api_error(500, f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö API (—Ä–µ–≥—ñ–æ–Ω–∏): {e}", service_name="UkraineAlarm Regions")
                    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ get_active_alerts
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid UkraineAlarm API token (401) for regions. Response: {response_text_preview}")
                        return _generate_ualarm_api_error(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π API —Ç–æ–∫–µ–Ω (—Ä–µ–≥—ñ–æ–Ω–∏).", service_name="UkraineAlarm Regions")
                    elif response.status == 429:
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=429, message="Rate limit exceeded (UkraineAlarm Regions)")
                        logger.warning(f"Attempt {attempt + 1}: UkraineAlarm Regions RateLimit Error (429). Retrying...")
                    elif response.status >= 500:
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} (UkraineAlarm Regions)")
                        logger.warning(f"Attempt {attempt + 1}: UkraineAlarm Regions Server Error {response.status}. Retrying...")
                    else: # 404 —Ç–∞ —ñ–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –ø–æ–º–∏–ª–∫–∏
                        logger.error(f"Attempt {attempt + 1}: UkraineAlarm Regions Client Error {response.status}. Response: {response_text_preview}")
                        return _generate_ualarm_api_error(response.status, f"–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –ø–æ–º–∏–ª–∫–∞ API (—Ä–µ–≥—ñ–æ–Ω–∏): {response.status}.", service_name="UkraineAlarm Regions")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to UkraineAlarm regions: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching regions: {e}", exc_info=True)
            return _generate_ualarm_api_error(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤.", service_name="UkraineAlarm Regions")

        if attempt < config.MAX_RETRIES - 1:
            delay = config.INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next UkraineAlarm region retry...")
            await asyncio.sleep(delay)
        else:
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –ø—ñ—Å–ª—è {config.MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            
            final_error_code = 503
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504
            return _generate_ualarm_api_error(final_error_code, error_message, service_name="UkraineAlarm Regions")

    return _generate_ualarm_api_error(500, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).", service_name="UkraineAlarm Regions")


def format_alerts_message(api_response: Dict[str, Any], selected_region_name: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ –≤—ñ–¥ UkraineAlarm API v3.
    api_response: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É get_active_alerts.
    selected_region_name: –Ü–º'—è —Ä–µ–≥—ñ–æ–Ω—É, —è–∫—â–æ –∑–∞–ø–∏—Ç –±—É–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–≥—ñ–æ–Ω—É (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞).
                        –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ None, –≤–≤–∞–∂–∞—î—Ç—å—Å—è, —â–æ –∑–∞–ø–∏—Ç –±—É–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.
    """
    now_kyiv_str = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    
    region_display_for_header = ""
    if selected_region_name and isinstance(selected_region_name, str) and selected_region_name.strip():
        region_display_for_header = f" —É —Ä–µ–≥—ñ–æ–Ω—ñ <b>{selected_region_name.strip()}</b>"
    elif not selected_region_name : # –Ø–∫—â–æ selected_region_name –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∞–±–æ None (–∑–∞–ø–∏—Ç –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ)
        region_display_for_header = " –ø–æ –£–∫—Ä–∞—ó–Ω—ñ"
        
    header = f"<b>üö® –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥{region_display_for_header} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv_str}:</b>\n"

    if api_response.get("status") == "error":
        error_msg = api_response.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API.")
        error_code = api_response.get("code", "N/A")
        # –Ø–∫—â–æ –∑–∞–ø–∏—Ç –±—É–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É —ñ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∑–≥–∞–¥—É—î–º–æ –π–æ–≥–æ
        location_context = f" –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É '{selected_region_name}'" if selected_region_name else ""
        return header + f"\nüò• –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö{location_context}: {error_msg} (–ö–æ–¥: {error_code}).\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>"

    # `data` - —Ü–µ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤, –∫–æ–∂–µ–Ω –∑—ñ —Å–≤–æ—ó–º —Å–ø–∏—Å–∫–æ–º `activeAlerts`
    list_of_regions_data = api_response.get("data")

    if list_of_regions_data is None: # –ú–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, —è–∫—â–æ status == "success"
        logger.error("format_alerts_message (UkraineAlarm): 'data' key missing in successful API response.")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥.\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>"
    
    if not isinstance(list_of_regions_data, list):
        logger.error(f"format_alerts_message (UkraineAlarm): API data is not a list, but {type(list_of_regions_data)}")
        return header + "\nüò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API.\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>"

    active_alerts_summary: Dict[str, List[str]] = {} # –†–µ–≥—ñ–æ–Ω -> —Å–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ (–µ–º–æ–¥–∑—ñ)
    any_alert_active_overall = False

    for region_info in list_of_regions_data:
        if not isinstance(region_info, dict):
            logger.warning(f"Skipping non-dict item in region list: {region_info}")
            continue
        
        region_name_api = region_info.get("regionName")
        if not region_name_api or not isinstance(region_name_api, str):
            logger.warning(f"Skipping region with missing or invalid name: {region_info}")
            continue
            
        current_active_alerts_in_region = region_info.get("activeAlerts", [])
        if not isinstance(current_active_alerts_in_region, list):
            logger.warning(f"activeAlerts for {region_name_api} is not a list: {current_active_alerts_in_region}")
            continue

        if current_active_alerts_in_region: # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ —Ü—å–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ
            any_alert_active_overall = True
            alert_emojis_in_region = set() # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–º–æ–¥–∑—ñ
            for alert_detail in current_active_alerts_in_region:
                if isinstance(alert_detail, dict):
                    alert_type_api = alert_detail.get("type", "UNKNOWN").upper()
                    alert_emojis_in_region.add(ALERT_TYPE_EMOJI.get(alert_type_api, ALERT_TYPE_EMOJI["UNKNOWN"]))
            
            if alert_emojis_in_region: # –Ø–∫—â–æ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ —Ç–∏–ø–∏ —Ç—Ä–∏–≤–æ–≥
                # –°–æ—Ä—Ç—É—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É
                active_alerts_summary[region_name_api] = sorted(list(alert_emojis_in_region))

    if not any_alert_active_overall or not active_alerts_summary:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –≤–∑–∞–≥–∞–ª—ñ, –∞–±–æ —è–∫—â–æ –∑–∞–ø–∏—Ç –±—É–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É —ñ —Ç–∞–º –Ω–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥
        no_alerts_message = "üü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ."
        if selected_region_name and any(reg_info.get("regionName") == selected_region_name for reg_info in list_of_regions_data if isinstance(reg_info, dict)):
            # –Ø–∫—â–æ –∑–∞–ø–∏—Ç –±—É–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É —ñ —Ü–µ–π —Ä–µ–≥—ñ–æ–Ω —î —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–ª–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥
             no_alerts_message = f"üü¢ –£ —Ä–µ–≥—ñ–æ–Ω—ñ <b>{selected_region_name}</b> –Ω–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ."
        return header + f"\n{no_alerts_message}\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>"

    message_lines = [header]
    # –°–æ—Ä—Ç—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω–∏ –∑–∞ –Ω–∞–∑–≤–æ—é –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    for reg_name_sorted in sorted(active_alerts_summary.keys()):
        alert_emojis_str = ", ".join(active_alerts_summary[reg_name_sorted])
        message_lines.append(f"üî¥ <b>{reg_name_sorted}:</b> {alert_emojis_str}")

    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —Ç–∞ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!")
    return "\n".join(message_lines)