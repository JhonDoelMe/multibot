# src/modules/alert/service.py

import logging
import aiohttp
import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime
from aiogram import Bot
import pytz

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
UKRAINEALARM_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Retry
MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ —ç–º–æ–¥–∑–∏
ALERT_TYPE_EMOJI = {
    "AIR": "üö®",
    "ARTILLERY": "üí£",
    "URBAN_FIGHTS": "üí•",
    "CHEMICAL": "‚ò£Ô∏è",
    "NUCLEAR": "‚ò¢Ô∏è",
    "INFO": "‚ÑπÔ∏è",
    "UNKNOWN": "‚ùì"
}

async def get_active_alerts(bot: Bot) -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ —Å API UkraineAlarm.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π).

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if not config.UKRAINEALARM_API_TOKEN:
        logger.error("UkraineAlarm API token (UKRAINEALARM_API_TOKEN) is not configured.")
        return None

    headers = {
        "Authorization": config.UKRAINEALARM_API_TOKEN,
        "Accept": "application/json"
    }
    last_exception = None

    logger.info(f"Requesting UkraineAlarm alerts from {UKRAINEALARM_API_URL}")
    async with aiohttp.ClientSession() as session:
        for attempt in range(MAX_RETRIES):
            try:
                logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch UA alerts")
                async with session.get(UKRAINEALARM_API_URL, headers=headers, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"UA Alerts response: {data}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from UA Alerts. Response: {await response.text()}")
                            return None
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid UA Alerts API key (401).")
                        return None
                    elif response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=429, message="Rate limit exceeded"
                        )
                        logger.warning(f"Attempt {attempt + 1}: UA Alerts RateLimit Error (429). Retrying...")
                    elif response.status >= 500:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status}"
                        )
                        logger.warning(f"Attempt {attempt + 1}: UA Alerts Server Error {response.status}. Retrying...")
                    else:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: UA Alerts Error {response.status}. Response: {error_text}")
                        return None

            except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
                last_exception = e
                logger.warning(f"Attempt {attempt + 1}: Network error connecting to UA Alerts: {e}. Retrying...")
            except Exception as e:
                logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching UA alerts: {e}", exc_info=True)
                return None

            if attempt < MAX_RETRIES - 1:
                delay = INITIAL_DELAY * (2 ** attempt)
                logger.info(f"Waiting {delay} seconds before next UA alerts retry...")
                await asyncio.sleep(delay)
            else:
                logger.error(f"All {MAX_RETRIES} attempts failed for UA alerts. Last error: {last_exception!r}")
                return None
    return None

def format_alerts_message(alerts_data: Optional[List[Dict[str, Any]]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API —Ç—Ä–µ–≤–æ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        alerts_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª–µ—Ä—Ç–∞—Ö –æ—Ç API –∏–ª–∏ None.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ —Ç—Ä–µ–≤–æ–≥.
    """
    now_kyiv = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    header = f"<b>üö® –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv}:</b>\n"

    if alerts_data is None:
        return header + "\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    if isinstance(alerts_data, dict) and "error" in alerts_data:
        error_code = alerts_data.get("error")
        error_msg = alerts_data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
        if error_code == 401:
            return header + "\n–ü–æ–º–∏–ª–∫–∞: –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –¥–æ API —Ç—Ä–∏–≤–æ–≥."
        elif error_code == 429:
            return header + "\n–ü–æ–º–∏–ª–∫–∞: –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API —Ç—Ä–∏–≤–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É."
        else:
            return header + f"\n–ü–æ–º–∏–ª–∫–∞ API ({error_code}): {error_msg}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    if not alerts_data:
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ."

    active_regions = {}
    for region_alert_info in alerts_data:
        region_name = region_alert_info.get("regionName", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–≥—ñ–æ–Ω")
        if region_name not in active_regions:
            active_regions[region_name] = []
        for alert in region_alert_info.get("activeAlerts", []):
            alert_type = alert.get("type", "UNKNOWN")
            if alert_type not in active_regions[region_name]:
                active_regions[region_name].append(alert_type)

    if not active_regions:
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–∞ —Ä—ñ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ–º–∞—î (–º–æ–∂–ª–∏–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –æ–∫—Ä–µ–º–∏—Ö –≥—Ä–æ–º–∞–¥–∞—Ö)."

    message_lines = [header]
    for region_name in sorted(active_regions.keys()):
        alerts_str = ", ".join([ALERT_TYPE_EMOJI.get(atype, atype) for atype in active_regions[region_name]])
        message_lines.append(f"üî¥ <b>{region_name}:</b> {alerts_str}")

    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —Ç–∞ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!")

    return "\n".join(message_lines)