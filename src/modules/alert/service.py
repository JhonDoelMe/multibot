# src/modules/alert/service.py

import logging
import aiohttp
from typing import Optional, List, Dict, Any
from datetime import datetime
import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

from src import config # –î–ª—è API —Ç–æ–∫–µ–Ω–∞

logger = logging.getLogger(__name__)

# URL API –∏ —Ö–µ–¥–µ—Ä—ã
UKRAINEALARM_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ —ç–º–æ–¥–∑–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
ALERT_TYPE_EMOJI = {
    "AIR": "üö®",
    "ARTILLERY": "üí£",
    "URBAN_FIGHTS": "üí•",
    "CHEMICAL": "‚ò£Ô∏è", # –•–∏–º–∏—á–µ—Å–∫–∞—è
    "NUCLEAR": "‚ò¢Ô∏è",  # –Ø–¥–µ—Ä–Ω–∞—è
    "INFO": "‚ÑπÔ∏è",    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    "UNKNOWN": "‚ùì"   # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
}

async def get_active_alerts() -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ —Å API UkraineAlarm.

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if not config.UKRAINEALARM_API_TOKEN:
        logger.error("UkraineAlarm API token (UKRAINEALARM_API_TOKEN) is not configured.")
        return None

    headers = {"Authorization": config.UKRAINEALARM_API_TOKEN}
    logger.info(f"Requesting UkraineAlarm alerts from {UKRAINEALARM_API_URL}")

    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(UKRAINEALARM_API_URL) as response:
                if response.status == 200:
                    try:
                        data = await response.json()
                        logger.debug(f"UkraineAlarm API response: {data}")
                        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤, –≥–¥–µ –µ—Å—Ç—å *—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞* –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞
                        return data
                    except aiohttp.ContentTypeError:
                        logger.error(f"Failed to decode JSON from UkraineAlarm API. Response: {await response.text()}")
                        return None
                elif response.status == 401:
                     logger.error(f"UkraineAlarm API Error: Unauthorized (Invalid Token?). Status: {response.status}")
                     return {"error": 401, "message": "Invalid API Token"} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –æ—à–∏–±–∫–∏
                elif response.status == 429:
                     logger.error(f"UkraineAlarm API Error: Too Many Requests. Status: {response.status}")
                     return {"error": 429, "message": "Rate limit exceeded"}
                else:
                    logger.error(f"UkraineAlarm API error: Status {response.status}, Response: {await response.text()}")
                    return {"error": response.status, "message": "API error"}

    except aiohttp.ClientConnectorError as e:
        logger.error(f"Network error connecting to UkraineAlarm API: {e}")
        return {"error": 503, "message": "Network error"}
    except Exception as e:
        logger.exception(f"An unexpected error occurred while fetching UkraineAlarm alerts: {e}")
        return {"error": 500, "message": "Internal error"}


def format_alerts_message(alerts_data: Optional[List[Dict[str, Any]]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API —Ç—Ä–µ–≤–æ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        alerts_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª–µ—Ä—Ç–∞—Ö –æ—Ç API –∏–ª–∏ None/Dict —Å –æ—à–∏–±–∫–æ–π.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ —Ç—Ä–µ–≤–æ–≥.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–∏–µ–≤–µ
    now_kyiv = datetime.now(TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    header = f"<b>üö® –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_kyiv}:</b>\n"

    if alerts_data is None:
        return header + "\n–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    if isinstance(alerts_data, dict) and "error" in alerts_data:
         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –∏–∑ get_active_alerts
         error_code = alerts_data.get("error")
         error_msg = alerts_data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
         if error_code == 401:
             return header + "\n–ü–æ–º–∏–ª–∫–∞: –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –¥–æ API —Ç—Ä–∏–≤–æ–≥."
         elif error_code == 429:
             return header + "\n–ü–æ–º–∏–ª–∫–∞: –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API —Ç—Ä–∏–≤–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É."
         else:
              return header + f"\n–ü–æ–º–∏–ª–∫–∞ API ({error_code}): {error_msg}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    if not alerts_data: # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥
        return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î. –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ."

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–æ–±–ª–∞—Å—Ç—è–º)
    active_regions = {} # –°–ª–æ–≤–∞—Ä—å {RegionName: [List of alert types]}
    for region_alert_info in alerts_data:
        region_name = region_alert_info.get("regionName", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–≥—ñ–æ–Ω")
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å (State) –∏–ª–∏ –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ–º –≤—Å–µ
        # region_type = region_alert_info.get("regionType")
        # if region_type is None or region_type == "State":
        if region_name not in active_regions:
             active_regions[region_name] = []
        for alert in region_alert_info.get("activeAlerts", []):
            alert_type = alert.get("type", "UNKNOWN")
            if alert_type not in active_regions[region_name]:
                 active_regions[region_name].append(alert_type)


    if not active_regions: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±—ã –æ–Ω–∞ –±—ã–ª–∞) –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
         return header + "\nüü¢ –ù–∞—Ä–∞–∑—ñ —Ç—Ä–∏–≤–æ–≥ –Ω–∞ —Ä—ñ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ–º–∞—î (–º–æ–∂–ª–∏–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –æ–∫—Ä–µ–º–∏—Ö –≥—Ä–æ–º–∞–¥–∞—Ö)."


    message_lines = [header]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    for region_name in sorted(active_regions.keys()):
         alerts_str = ", ".join([ALERT_TYPE_EMOJI.get(atype, atype) for atype in active_regions[region_name]])
         message_lines.append(f"üî¥ <b>{region_name}:</b> {alerts_str}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: api.ukrainealarm.com</tg-spoiler>")
    message_lines.append("üôè –ë—É–¥—å –ª–∞—Å–∫–∞, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —Ç–∞ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!")

    return "\n".join(message_lines)