# src/modules/alert/handlers.py

import logging
from typing import Union, Optional # –î–æ–±–∞–≤–ª–µ–Ω Optional
from datetime import datetime

from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramBadRequest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API Telegram
from aiogram.exceptions import TelegramBadRequest


from src import config as app_config

from .service import get_active_alerts, format_alerts_message
from .keyboard import get_alert_keyboard, CALLBACK_ALERT_REFRESH
# –ú–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG
from .map_generator import generate_alert_map_image_png, generate_alert_map_image_svg # SVG –¥–ª—è fallback

logger = logging.getLogger(__name__)
router = Router(name="alert-module")

async def _show_alerts_map_or_text(bot: Bot, target: Union[Message, CallbackQuery], selected_region_name: str = ""):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message: Optional[Message] = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å None
    answered_callback = False

    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e:
            logger.warning(f"Could not answer callback immediately for user {user_id}: {e}")

    try:
        loading_text = "‚è≥ –û–Ω–æ–≤–ª—é—é –∫–∞—Ä—Ç—É/—Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥..."
        if isinstance(target, CallbackQuery) and message_to_edit_or_answer:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ message_to_edit_or_answer —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å edit_text
            status_message = await message_to_edit_or_answer.edit_text(loading_text, reply_markup=None)
        elif isinstance(target, Message): # –Ø–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è Message
            status_message = await message_to_edit_or_answer.answer(loading_text)
        # –ï—Å–ª–∏ target - CallbackQuery, –Ω–æ message_to_edit_or_answer - None, status_message –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None
        # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ target.message –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ CallbackQuery
    except Exception as e:
        logger.warning(f"Could not send/edit 'loading' status for alerts map, user {user_id}: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, status_message –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None

    api_response = await get_active_alerts(bot)
    reply_markup_for_message = get_alert_keyboard()

    map_png_bytes: Optional[bytes] = None
    map_svg_bytes: Optional[bytes] = None # –î–ª—è fallback –Ω–∞ SVG –¥–æ–∫—É–º–µ–Ω—Ç

    if api_response.get("status") == "success" and isinstance(api_response.get("data"), list):
        map_png_bytes = await generate_alert_map_image_png(api_response["data"])
        if not map_png_bytes: # –ï—Å–ª–∏ PNG –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å SVG
            logger.warning(f"PNG map generation failed for user {user_id}. Attempting SVG fallback.")
            map_svg_bytes = await generate_alert_map_image_svg(api_response["data"])

    current_time_str = datetime.now(app_config.TZ_KYIV).strftime('%H:%M %d.%m.%Y')
    caption_text = f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –£–∫—Ä–∞—ó–Ω–∏.\n–û–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}"

    message_sent_successfully = False
    try:
        if map_png_bytes:
            photo_to_send = BufferedInputFile(map_png_bytes, filename="ukraine_alerts_map.png")
            if status_message: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–Ω–æ–≤–ª—é—é..." –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
                try:
                    await bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
                except TelegramBadRequest as e_del:
                    logger.warning(f"Non-critical: Failed to delete status_message (PNG block) for user {user_id}: {e_del}")

                # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–µ—Å–ª–∏ status_message –±—ã–ª –∏–ª–∏ –Ω–µ –±—ã–ª)
                # –¢–∏–ø target —É–∂–µ –Ω–µ –≤–∞–∂–µ–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_photo
                # –∏–ª–∏ target.answer_photo –¥–ª—è Message, –µ—Å–ª–∏ status_message –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª–æ.
                # –ù–æ —Ç–∞–∫ –∫–∞–∫ –º—ã —É–¥–∞–ª–∏–ª–∏ status_message, –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —á–µ—Ä–µ–∑ bot.send_photo
                # –∏–ª–∏ —á–µ—Ä–µ–∑ target.answer_photo –µ—Å–ª–∏ status_message –Ω–µ –±—ã–ª–æ.
                # –î–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_photo
                chat_id_to_send = target.message.chat.id if isinstance(target, CallbackQuery) else target.chat.id
                await bot.send_photo(
                    chat_id=chat_id_to_send,
                    photo=photo_to_send,
                    caption=caption_text,
                    reply_markup=reply_markup_for_message
                )
            else: # status_message is None (—Å–æ–æ–±—â–µ–Ω–∏–µ "–û–Ω–æ–≤–ª—é—é..." –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                 if isinstance(target, CallbackQuery):
                    if not answered_callback:
                        try: await target.answer()
                        except Exception: pass
                        answered_callback = True
                    await bot.send_photo(
                        chat_id=target.message.chat.id,
                        photo=photo_to_send,
                        caption=caption_text,
                        reply_markup=reply_markup_for_message
                    )
                 elif isinstance(target, Message):
                     await target.answer_photo(
                        photo=photo_to_send,
                        caption=caption_text,
                        reply_markup=reply_markup_for_message
                     )
            logger.info(f"Sent alert map (PNG photo) to user {user_id}.")
            message_sent_successfully = True
        elif map_svg_bytes: # Fallback –Ω–∞ SVG –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ PNG –Ω–µ —É–¥–∞–ª–æ—Å—å
            logger.info(f"Sending SVG document as fallback for user {user_id}.")
            document_to_send = BufferedInputFile(map_svg_bytes, filename="ukraine_alerts_map.svg")
            if status_message:
                try:
                    await bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
                except TelegramBadRequest as e_del:
                    logger.warning(f"Non-critical: Failed to delete status_message (SVG block) for user {user_id}: {e_del}")
                
                chat_id_to_send = target.message.chat.id if isinstance(target, CallbackQuery) else target.chat.id
                await bot.send_document(
                    chat_id=chat_id_to_send,
                    document=document_to_send,
                    caption=caption_text,
                    reply_markup=reply_markup_for_message
                )
            else: # status_message is None
                 if isinstance(target, CallbackQuery):
                    if not answered_callback:
                        try: await target.answer()
                        except Exception: pass
                        answered_callback = True
                    await bot.send_document(
                        chat_id=target.message.chat.id,
                        document=document_to_send,
                        caption=caption_text,
                        reply_markup=reply_markup_for_message
                    )
                 elif isinstance(target, Message):
                     await target.answer_document(
                        document=document_to_send,
                        caption=caption_text,
                        reply_markup=reply_markup_for_message
                     )
            logger.info(f"Sent alert map (SVG document fallback) to user {user_id}.")
            message_sent_successfully = True

        if not message_sent_successfully: # –ï—Å–ª–∏ –Ω–∏ PNG, –Ω–∏ SVG –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å/–æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å
            logger.warning(f"Failed to generate/send any map for user {user_id}. Falling back to text.")
            text_message_fallback = "üò• –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç—Ä–∏–≤–æ–≥.\n"
            if api_response.get("status") == "error":
                text_message_fallback += f"–ü–æ–º–∏–ª–∫–∞ API: {api_response.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}"
            else:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ selected_region_name –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                region_name_for_format = selected_region_name if selected_region_name else None
                text_message_fallback += "\n" + format_alerts_message(api_response, selected_region_name=region_name_for_format)

            if status_message: # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–Ω–æ–≤–ª—é—é...", —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await status_message.edit_text(text_message_fallback, reply_markup=reply_markup_for_message)
            elif message_to_edit_or_answer: # –ï—Å–ª–∏ status_message –Ω–µ –±—ã–ª–æ, –Ω–æ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è Message)
                 # –î–ª—è CallbackQuery message_to_edit_or_answer —ç—Ç–æ target.message
                 # –î–ª—è Message target —ç—Ç–æ message_to_edit_or_answer
                if isinstance(target, CallbackQuery) and target.message:
                    await target.message.answer(text_message_fallback, reply_markup=reply_markup_for_message)
                elif isinstance(target, Message):
                    await target.answer(text_message_fallback, reply_markup=reply_markup_for_message)
            else: # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
                chat_id_to_send = target.message.chat.id if isinstance(target, CallbackQuery) and target.message else target.chat.id if isinstance(target, Message) else None
                if chat_id_to_send:
                    await bot.send_message(chat_id_to_send, text_message_fallback, reply_markup=reply_markup_for_message)


    except Exception as e_send:
        logger.exception(f"Failed to send/edit final alert message (map or text) to user {user_id}:", exc_info=True)
        try:
            fallback_error_text = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∏–≤–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ status_message –Ω–µ—Ç
            chat_id_to_send = None
            if isinstance(target, Message):
                chat_id_to_send = target.chat.id
            elif isinstance(target, CallbackQuery) and target.message:
                chat_id_to_send = target.message.chat.id
            
            if chat_id_to_send:
                 # –ï—Å–ª–∏ status_message –µ—Å—Ç—å –∏ –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                if status_message:
                    try:
                        await status_message.edit_text(fallback_error_text, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        return # –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏
                    except Exception:
                        pass # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ
                
                # –ï—Å–ª–∏ status_message –Ω–µ –±—ã–ª–æ –∏–ª–∏ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await bot.send_message(chat_id_to_send, fallback_error_text, reply_markup=None)

        except Exception as e_final_fallback:
            logger.error(f"Truly unable to communicate any alert status error to user {user_id}: {e_final_fallback}")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ –∫–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç–∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–Ω–µ–µ –∏ —ç—Ç–æ CallbackQuery
    if isinstance(target, CallbackQuery) and not answered_callback:
        try: await target.answer()
        except Exception: pass


async def alert_entry_point(target: Union[Message, CallbackQuery], bot: Bot):
    user_id = target.from_user.id
    logger.info(f"User {user_id} requested alert status (map entry point).")
    await _show_alerts_map_or_text(bot, target, selected_region_name="")

@router.callback_query(F.data == CALLBACK_ALERT_REFRESH)
async def handle_alert_refresh(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} requested alert status map refresh.")
    await _show_alerts_map_or_text(bot, callback, selected_region_name="")