# src/modules/currency/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
PB_API_URL_CASH = "https://api.privatbank.ua/p24api/pubinfo?exchange&coursid=5"
PB_API_URL_NONCASH = "https://api.privatbank.ua/p24api/pubinfo?exchange&coursid=11"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Retry
MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

# –¶–µ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã
TARGET_CURRENCIES = {"USD", "EUR"}

@cached(ttl=config.CACHE_TTL_CURRENCY, key_builder=lambda *args, **kwargs: f"rates:{'cash' if kwargs.get('cash', True) else 'noncash'}", namespace="currency")
async def get_pb_exchange_rates(bot: Bot, cash: bool = True) -> Optional[List[Dict[str, Any]]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ (–Ω–∞–ª–∏—á–Ω—ã–µ –∏–ª–∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ). """
    cache_key = f"rates:{'cash' if cash else 'noncash'}"
    logger.info(f"Requesting PB {'cash' if cash else 'noncash'} rates (cache key: {cache_key})...")
    url = PB_API_URL_CASH if cash else PB_API_URL_NONCASH
    last_exception = None

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch PB rates (cash={cash})")
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.info(f"PB API response: {data}")
                            if not isinstance(data, list): # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                                logger.error(f"PB API response is not a list: {data}")
                                last_exception = TypeError("PB API response is not a list")
                                # –°—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π
                                return None # –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏ {"status": "error", ...}
                            
                            filtered_data = [
                                item for item in data
                                if isinstance(item, dict) and item.get("ccy") in TARGET_CURRENCIES
                            ]
                            if not filtered_data:
                                logger.warning(f"No valid currency data found in PB response for cash={cash}")
                                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 200, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ None
                            logger.info(f"Returning {len(filtered_data)} currency rates from API or cache")
                            return filtered_data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from PB. Response: {await response.text()}")
                            last_exception = Exception("Invalid JSON response from PB")
                            # –ï—Å–ª–∏ ContentTypeError, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ä—è–¥ –ª–∏ –ø–æ–º–æ–≥—É—Ç
                            return None # –ò–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
                    elif response.status == 429: # Rate limit
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=429, message="Rate limit exceeded"
                        )
                        logger.warning(f"Attempt {attempt + 1}: PB RateLimit Error (429). Retrying...")
                    elif response.status >= 500: # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status}"
                        )
                        logger.warning(f"Attempt {attempt + 1}: PB Server Error {response.status}. Retrying...")
                    else: # –î—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (4xx, –∫—Ä–æ–º–µ 429)
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: PB Client Error {response.status}. Response: {error_text[:200]}")
                        # –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ–±—ã—á–Ω–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ä–µ—Ç—Ä–∞–∏—Ç—å
                        return None # –ò–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to PB: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching PB rates: {e}", exc_info=True)
            return None # –ò–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next PB retry...")
            await asyncio.sleep(delay)
        else: # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"All {MAX_RETRIES} attempts failed for PB rates (cash={cash}). Last error: {last_exception!r}")
            # –ú–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞
            # if isinstance(last_exception, aiohttp.ClientResponseError):
            #     return {"status": "error", "code": last_exception.status, "message": ...}
            return None
    return None # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ

def format_rates_message(rates_data: Optional[List[Dict[str, Any]]], cash: bool = True) -> str: # rates_data –º–æ–∂–µ—Ç –±—ã—Ç—å None
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç. """
    try:
        # –ò–∑–º–µ–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ: rates_data –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        if rates_data is None: # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∏ –≤–µ—Ä–Ω—É–ª—Å—è None
            return "üò• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        if not rates_data: # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–Ω–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –≤–∞–ª—é—Ç)
             return "‚ö†Ô∏è –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –∫—É—Ä—Å–∞–º USD —Ç–∞ EUR –≤—ñ–¥—Å—É—Ç–Ω—è."

        course_type = "–ì–æ—Ç—ñ–≤–∫–æ–≤–∏–π" if cash else "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–∏–π"
        # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ PB_API_URL_NONCASH (coursid=11) —ç—Ç–æ "–ö—É—Ä—Å—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ü—Ä–∏–≤–∞—Ç24"
        # "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–∏–π" - —ç—Ç–æ –±–æ–ª–µ–µ –æ–±—â–µ–µ –ø–æ–Ω—è—Ç–∏–µ. –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        message_lines = [f"<b>{course_type} –∫—É—Ä—Å –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É:</b>\n"]
        
        found_currencies = False
        for rate in rates_data:
            currency = rate.get("ccy")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ buy –∏ sale —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
            try:
                buy_str = rate.get("buy")
                sale_str = rate.get("sale")
                if buy_str is None or sale_str is None:
                    logger.warning(f"Missing buy/sale for {currency} in rates: {rate}")
                    continue
                
                buy = float(buy_str)
                sale = float(sale_str)
                
                base_ccy = rate.get("base_ccy", "UAH") # –û–±—ã—á–Ω–æ UAH –¥–ª—è —ç—Ç–æ–≥–æ API

                message_lines.append(
                    f"üíµ <b>{currency}/{base_ccy}</b>: –ö—É–ø—ñ–≤–ª—è {buy:.2f} | –ü—Ä–æ–¥–∞–∂ {sale:.2f}"
                )
                found_currencies = True
            except (ValueError, TypeError) as e:
                logger.error(f"Error parsing rate data for {currency}: {rate}, error: {e}")
                continue
        
        if not found_currencies: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
            return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ –∫—É—Ä—Å–∞–º USD —Ç–∞ EUR."

        return "\n".join(message_lines)
    except Exception as e:
        logger.exception(f"Error formatting rates message: {e}")
        return "üò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç."