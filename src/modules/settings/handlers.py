# src/modules/settings/handlers.py

import logging
from typing import Union, Optional
from datetime import time as dt_time, datetime as dt_datetime # –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —á–∞—Å–æ–º

from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from aiocache import Cache # –ó–º—ñ–Ω–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç –∑ caches –Ω–∞ Cache

from src.db.models import User, ServiceChoice
from .keyboard import (
    get_main_settings_keyboard,
    get_weather_service_selection_keyboard,
    get_alert_service_selection_keyboard,
    CB_SETTINGS_WEATHER, CB_SETTINGS_ALERTS, CB_SETTINGS_BACK_TO_MAIN_MENU,
    CB_SET_WEATHER_SERVICE_PREFIX, CB_SET_ALERTS_SERVICE_PREFIX,
    CB_BACK_TO_SETTINGS_MENU,
    # –ù–æ–≤—ñ –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    CB_SETTINGS_WEATHER_REMINDER, CB_WEATHER_REMINDER_TOGGLE,
    CB_WEATHER_REMINDER_SET_TIME, CB_WEATHER_REMINDER_TIME_SELECT_PREFIX
)
from .keyboard import ( # –ù–æ–≤—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    get_weather_reminder_settings_keyboard, get_weather_reminder_time_selection_keyboard
)
from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="settings-module")

async def _get_user_settings(session: AsyncSession, user_id: int) -> User:
    user = await session.get(User, user_id)
    if not user:
        logger.warning(f"User {user_id} not found in DB for settings. Creating one now with defaults.")
        user = User(
            user_id=user_id,
            first_name="Unknown User", # –ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ Telegram User, —è–∫—â–æ —î –¥–æ—Å—Ç—É–ø
            preferred_weather_service=ServiceChoice.OPENWEATHERMAP,
            preferred_alert_service=ServiceChoice.UKRAINEALARM,
            weather_reminder_enabled=False, # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            weather_reminder_time=None      # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        )
        session.add(user)
    else:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —É —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤
        if user.preferred_weather_service is None:
            user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
        if user.preferred_alert_service is None:
            user.preferred_alert_service = ServiceChoice.UKRAINEALARM
        if user.weather_reminder_enabled is None: # –î–ª—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –¥–µ –ø–æ–ª–µ –º–æ–≥–ª–æ –±—É—Ç–∏ NULL
            user.weather_reminder_enabled = False
        # weather_reminder_time –º–æ–∂–µ –±—É—Ç–∏ None, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    return user

async def settings_entry_point(target: Union[Message, CallbackQuery], session: AsyncSession, bot: Bot):
    user_id = target.from_user.id
    db_user = await _get_user_settings(session, user_id)

    text = "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:"
    reply_markup = get_main_settings_keyboard(
        current_weather_service=db_user.preferred_weather_service,
        current_alert_service=db_user.preferred_alert_service,
        weather_reminder_enabled=db_user.weather_reminder_enabled,
        weather_reminder_time=db_user.weather_reminder_time
    )

    answered_callback = False
    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e: logger.warning(f"Could not answer callback in settings_entry_point: {e}")
        
        try:
            await target.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Error editing message for settings_entry_point: {e_edit}")
            try: 
                await target.message.answer(text, reply_markup=reply_markup) # Fallback
            except Exception as e_ans: logger.error(f"Error sending new message for settings_entry_point either: {e_ans}")
    else: # Message
        try:
            await target.answer(text, reply_markup=reply_markup)
        except Exception as e: logger.error(f"Error sending message for settings_entry_point: {e}")

    if isinstance(target, CallbackQuery) and not answered_callback:
        try: await target.answer()
        except: pass


@router.callback_query(F.data == CB_SETTINGS_BACK_TO_MAIN_MENU)
async def cq_back_to_main_bot_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    await show_main_menu_message(callback)


@router.callback_query(F.data == CB_BACK_TO_SETTINGS_MENU)
async def cq_back_to_settings_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    await settings_entry_point(callback, session, bot)


# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏ ---
@router.callback_query(F.data == CB_SETTINGS_WEATHER)
async def cq_select_weather_service_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    text = "üå¶Ô∏è <b>–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:"
    reply_markup = get_weather_service_selection_keyboard(db_user.preferred_weather_service)

    answered_callback = False
    try:
        await callback.answer()
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in cq_select_weather_service_menu: {e}")
    
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message for weather service selection menu: {e_edit}")
        try: await callback.message.answer(text, reply_markup=reply_markup) 
        except Exception as e_ans: logger.error(f"Error sending new message for weather service selection menu either: {e_ans}")
    
    if not answered_callback:
        try: await callback.answer()
        except: pass

@router.callback_query(F.data.startswith(CB_SET_WEATHER_SERVICE_PREFIX))
async def cq_set_weather_service(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    chosen_service_code = callback.data.split(':')[-1]

    valid_weather_services = [ServiceChoice.OPENWEATHERMAP, ServiceChoice.WEATHERAPI]
    if chosen_service_code not in valid_weather_services:
        logger.warning(f"User {user_id} tried to set invalid weather service: {chosen_service_code}")
        try: await callback.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É!", show_alert=True)
        except Exception as e: logger.warning(f"Could not answer callback (invalid weather service): {e}")
        return

    db_user = await _get_user_settings(session, user_id)
    old_service = db_user.preferred_weather_service
    message_text_after_selection = f"–°–µ—Ä–≤—ñ—Å –ø–æ–≥–æ–¥–∏ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {chosen_service_code}."
    alert_on_answer = True

    if old_service != chosen_service_code:
        db_user.preferred_weather_service = chosen_service_code
        session.add(db_user)
        logger.info(f"User {user_id} set preferred_weather_service to '{chosen_service_code}' (was '{old_service}').")
        message_text_after_selection = f"–°–µ—Ä–≤—ñ—Å –ø–æ–≥–æ–¥–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {chosen_service_code}."
        alert_on_answer = False

        try:
            weather_cache_main = Cache(namespace="weather_service")
            await weather_cache_main.clear()
            logger.info(f"User {user_id}: Cleared 'weather_service' cache.")
            
            weather_cache_backup = Cache(namespace="weather_backup_service")
            await weather_cache_backup.clear()
            logger.info(f"User {user_id}: Cleared 'weather_backup_service' cache.")
        except Exception as e_cache:
             logger.error(f"User {user_id}: Failed to clear weather caches after service change to {chosen_service_code}: {e_cache}", exc_info=True)
    else:
        logger.info(f"User {user_id}: Weather service '{chosen_service_code}' was already selected.")

    answered_callback = False
    try:
        await callback.answer(message_text_after_selection, show_alert=alert_on_answer)
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback (set weather service): {e}")

    text = "üå¶Ô∏è <b>–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:"
    reply_markup = get_weather_service_selection_keyboard(chosen_service_code)
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message after setting weather service: {e_edit}")
    
    if not answered_callback:
        try: await callback.answer(message_text_after_selection, show_alert=alert_on_answer)
        except: pass


# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∏–≤–æ–≥ ---
@router.callback_query(F.data == CB_SETTINGS_ALERTS)
async def cq_select_alert_service_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    text = "üö® <b>–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∏–≤–æ–≥</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:"
    reply_markup = get_alert_service_selection_keyboard(db_user.preferred_alert_service)

    answered_callback = False
    try:
        await callback.answer()
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in cq_select_alert_service_menu: {e}")
    
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message for alert service selection menu: {e_edit}")
        try: await callback.message.answer(text, reply_markup=reply_markup)
        except Exception as e_ans: logger.error(f"Error sending new message for alert service selection menu either: {e_ans}")

    if not answered_callback:
        try: await callback.answer()
        except: pass

@router.callback_query(F.data.startswith(CB_SET_ALERTS_SERVICE_PREFIX))
async def cq_set_alert_service(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    chosen_service_code = callback.data.split(":")[-1]

    valid_alert_services = [ServiceChoice.UKRAINEALARM, ServiceChoice.ALERTSINUA]
    if chosen_service_code not in valid_alert_services:
        logger.warning(f"User {user_id} tried to set invalid alert service: {chosen_service_code}")
        try: await callback.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É!", show_alert=True)
        except Exception as e: logger.warning(f"Could not answer callback (invalid alert service): {e}")
        return

    db_user = await _get_user_settings(session, user_id)
    old_service = db_user.preferred_alert_service
    message_text_after_selection = f"–°–µ—Ä–≤—ñ—Å —Ç—Ä–∏–≤–æ–≥ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {chosen_service_code}."
    alert_on_answer = True

    if old_service != chosen_service_code:
        db_user.preferred_alert_service = chosen_service_code
        session.add(db_user)
        logger.info(f"User {user_id} set preferred_alert_service to '{chosen_service_code}' (was '{old_service}').")
        message_text_after_selection = f"–°–µ—Ä–≤—ñ—Å —Ç—Ä–∏–≤–æ–≥ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {chosen_service_code}."
        alert_on_answer = False

        try:
            alert_cache_main = Cache(namespace="alerts")
            await alert_cache_main.clear()
            logger.info(f"User {user_id}: Cleared 'alerts' cache.")

            alert_cache_backup = Cache(namespace="alerts_backup")
            await alert_cache_backup.clear()
            logger.info(f"User {user_id}: Cleared 'alerts_backup' cache.")
        except Exception as e_cache:
             logger.error(f"User {user_id}: Failed to clear alert caches after service change to {chosen_service_code}: {e_cache}", exc_info=True)
    else:
        logger.info(f"User {user_id}: Alert service '{chosen_service_code}' was already selected.")

    answered_callback = False
    try:
        await callback.answer(message_text_after_selection, show_alert=alert_on_answer)
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback (set alert service): {e}")

    text = "üö® <b>–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∏–≤–æ–≥</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:"
    reply_markup = get_alert_service_selection_keyboard(chosen_service_code)
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message after setting alert service: {e_edit}")

    if not answered_callback:
        try: await callback.answer(message_text_after_selection, show_alert=alert_on_answer)
        except: pass

# --- –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É ---

@router.callback_query(F.data == CB_SETTINGS_WEATHER_REMINDER)
async def cq_weather_reminder_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    text = "‚è∞ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É</b>"
    reply_markup = get_weather_reminder_settings_keyboard(
        reminder_enabled=db_user.weather_reminder_enabled,
        reminder_time=db_user.weather_reminder_time
    )
    
    answered_callback = False
    try:
        await callback.answer()
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in cq_weather_reminder_menu: {e}")
    
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message for weather reminder menu: {e_edit}")
        # –ù–µ–º–∞—î —Å–µ–Ω—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –Ω–µ –≤–¥–∞–ª–æ—Å—è,
        # –±–æ —Ü–µ, –π–º–æ–≤—ñ—Ä–Ω–æ, —Ç–µ —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    
    if not answered_callback: # –Ø–∫—â–æ –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ callback.answer() –Ω–µ –≤–¥–∞–ª–∞—Å—è
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CB_WEATHER_REMINDER_TOGGLE)
async def cq_weather_reminder_toggle(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    db_user.weather_reminder_enabled = not db_user.weather_reminder_enabled
    
    status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if db_user.weather_reminder_enabled else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    
    if db_user.weather_reminder_enabled and db_user.weather_reminder_time is None:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 07:00, —è–∫—â–æ —É–≤—ñ–º–∫–Ω—É–ª–∏ —ñ —á–∞—Å —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        default_time = dt_time(7, 0, 0) # –ì–æ–¥–∏–Ω–∞, —Ö–≤–∏–ª–∏–Ω–∞, —Å–µ–∫—É–Ω–¥–∞
        db_user.weather_reminder_time = default_time
        logger.info(f"User {user_id}: Weather reminder enabled, default time set to {default_time.strftime('%H:%M')}.")
    
    session.add(db_user) # –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–æ —Å–µ—Å—ñ—ó
    # DbSessionMiddleware –º–∞—î –∑—Ä–æ–±–∏—Ç–∏ commit
    
    logger.info(f"User {user_id}: Weather reminder toggled to {status_text}.")

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ö–µ–Ω–¥–ª–µ—Ä
    # –¶–µ –æ–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –º–µ–Ω—é
    await cq_weather_reminder_menu(callback, session, bot) # –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π callback
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó
    # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –ü–Ü–°–õ–Ø —Ç–æ–≥–æ, —è–∫ cq_weather_reminder_menu —Å–ø—Ä–æ–±—É—î –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏,
    # —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É "–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ".
    # cq_weather_reminder_menu –≤–∂–µ —Ä–æ–±–∏—Ç—å callback.answer(), —Ç–æ–º—É —Ç—É—Ç —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–π–≤–∏–º,
    # –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤—ñ–Ω –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, —è–∫—â–æ –π–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å —Ç–∞–∫–∏–º —á–∏–Ω–æ–º.
    # –ö—Ä–∞—â–µ, —â–æ–± cq_weather_reminder_menu –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤, –∞ —Ç—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ.
    # –¢–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–ª–±–µ–∫ —Ç—É—Ç –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞, –±–æ cq_weather_reminder_menu –≤–∂–µ —Ü–µ –∑—Ä–æ–±–∏—Ç—å.
    # try:
    #     await callback.answer(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É {status_text}.")
    # except Exception:
    #     pass


@router.callback_query(F.data == CB_WEATHER_REMINDER_SET_TIME)
async def cq_weather_reminder_set_time_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    if not db_user.weather_reminder_enabled:
        try: await callback.answer("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å.", show_alert=True)
        except Exception as e: logger.warning(f"Could not answer callback (reminder disabled for set time): {e}")
        return

    text = "üïí <b>–í–∏–±—ñ—Ä —á–∞—Å—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É:</b>"
    # –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å (–æ–±'—î–∫—Ç dt_time) —É —Ñ—É–Ω–∫—Ü—ñ—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    reply_markup = get_weather_reminder_time_selection_keyboard(db_user.weather_reminder_time)
    
    answered_callback = False
    try:
        await callback.answer()
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in cq_weather_reminder_set_time_menu: {e}")
        
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Error editing message for set time menu: {e_edit}")

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data.startswith(CB_WEATHER_REMINDER_TIME_SELECT_PREFIX))
async def cq_weather_reminder_time_selected(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)

    if not db_user.weather_reminder_enabled:
        try: await callback.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ. –í–∏–±—ñ—Ä —á–∞—Å—É –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.", show_alert=True)
        except Exception as e: logger.warning(f"Could not answer callback (reminder disabled on time select): {e}")
        return

    try:
        # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å –∑ callback_data, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "settings:wr_time_sel:07:00" -> "07:00"
        time_str_parts = callback.data.split(':')
        if len(time_str_parts) >= 4: # settings:wr_time_sel:HH:MM
            time_str = f"{time_str_parts[-2]}:{time_str_parts[-1]}"
            selected_time_obj = dt_datetime.strptime(time_str, "%H:%M").time()
            
            db_user.weather_reminder_time = selected_time_obj
            session.add(db_user)
            logger.info(f"User {user_id}: Weather reminder time set to {time_str}.")

            await callback.answer(f"–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —á–∞—Å—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –≥–∞–ª–æ—á–∫—É –Ω–∞ –Ω–æ–≤–æ–º—É —á–∞—Å—ñ
            text = "üïí <b>–í–∏–±—ñ—Ä —á–∞—Å—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É:</b>"
            reply_markup = get_weather_reminder_time_selection_keyboard(db_user.weather_reminder_time)
            try:
                await callback.message.edit_text(text, reply_markup=reply_markup)
            except Exception as e_edit:
                logger.error(f"Error editing message after time selection: {e_edit}")
        else:
            raise ValueError("Invalid callback data format for time selection")

    except (ValueError, IndexError) as e_parse:
        logger.error(f"Error parsing time from callback data '{callback.data}': {e_parse}")
        try: await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)
        except Exception: pass
    except Exception as e:
        logger.exception(f"Unexpected error setting reminder time for user {user_id}", exc_info=True)
        try: await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
        except Exception: pass
