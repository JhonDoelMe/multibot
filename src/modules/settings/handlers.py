# src/modules/settings/handlers.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext # FSM –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –∏–º–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è
from sqlalchemy.ext.asyncio import AsyncSession

from src.db.models import User, ServiceChoice
from .keyboard import (
    get_main_settings_keyboard,
    get_weather_service_selection_keyboard,
    get_alert_service_selection_keyboard,
    CB_SETTINGS_WEATHER, CB_SETTINGS_ALERTS, CB_SETTINGS_BACK_TO_MAIN_MENU,
    CB_SET_WEATHER_SERVICE_PREFIX, CB_SET_ALERTS_SERVICE_PREFIX,
    CB_BACK_TO_SETTINGS_MENU
)
from src.handlers.utils import show_main_menu_message # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"

logger = logging.getLogger(__name__)
router = Router(name="settings-module")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def _get_user_settings(session: AsyncSession, user_id: int) -> User:
    user = await session.get(User, user_id)
    if not user: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫-—Ç–æ –æ–±–æ—à–µ–ª /start, –Ω–æ —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ
        logger.warning(f"User {user_id} not found in DB for settings. Creating one now.")
        user = User(user_id=user_id, first_name="Unknown User") # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        if not user.preferred_weather_service:
            user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
        if not user.preferred_alert_service:
            user.preferred_alert_service = ServiceChoice.UKRAINEALARM
        session.add(user)
        await session.commit() # –ö–æ–º–º–∏—Ç–∏–º —Å—Ä–∞–∑—É, —Ç.–∫. —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        logger.info(f"Created new user {user_id} with default settings from settings module.")
    return user

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def settings_entry_point(target: Union[Message, CallbackQuery], session: AsyncSession, bot: Bot):
    user_id = target.from_user.id
    db_user = await _get_user_settings(session, user_id)
    
    text = "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:"
    reply_markup = get_main_settings_keyboard(
        current_weather_service=db_user.preferred_weather_service,
        current_alert_service=db_user.preferred_alert_service
    )

    if isinstance(target, CallbackQuery):
        await target.answer()
        try:
            await target.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing message for settings_entry_point: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await target.message.answer(text, reply_markup=reply_markup) 
    else: # –ï—Å–ª–∏ —ç—Ç–æ Message (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ /settings)
        await target.answer(text, reply_markup=reply_markup)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
@router.callback_query(F.data == CB_SETTINGS_BACK_TO_MAIN_MENU)
async def cq_back_to_main_bot_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    # state –∏ session –∑–¥–µ—Å—å –º–æ–≥—É—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –µ—Å–ª–∏ show_main_menu_message –∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    await show_main_menu_message(callback) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.answer()


# –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == CB_BACK_TO_SETTINGS_MENU)
async def cq_back_to_settings_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    await settings_entry_point(callback, session, bot)
    # await callback.answer() # settings_entry_point —É–∂–µ –¥–µ–ª–∞–µ—Ç answer


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã ---
@router.callback_query(F.data == CB_SETTINGS_WEATHER)
async def cq_select_weather_service_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)
    
    text = "üå¶Ô∏è **–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏**\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:"
    reply_markup = get_weather_service_selection_keyboard(db_user.preferred_weather_service)
    
    await callback.answer()
    await callback.message.edit_text(text, reply_markup=reply_markup)

@router.callback_query(F.data.startswith(CB_SET_WEATHER_SERVICE_PREFIX))
async def cq_set_weather_service(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    chosen_service = callback.data.split(":")[-1] # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ callback_data

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    if chosen_service not in [ServiceChoice.OPENWEATHERMAP, ServiceChoice.WEATHERAPI]:
        logger.warning(f"User {user_id} tried to set invalid weather service: {chosen_service}")
        await callback.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É!", show_alert=True)
        return

    db_user = await _get_user_settings(session, user_id)
    if db_user.preferred_weather_service == chosen_service:
        await callback.answer("–¶–µ–π —Å–µ—Ä–≤—ñ—Å –≤–∂–µ –æ–±—Ä–∞–Ω–æ.", show_alert=True)
    else:
        db_user.preferred_weather_service = chosen_service
        session.add(db_user)
        # –ö–æ–º–º–∏—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ DbSessionMiddleware
        logger.info(f"User {user_id} set preferred_weather_service to '{chosen_service}'. Waiting for commit.")
        await callback.answer(f"–°–µ—Ä–≤—ñ—Å –ø–æ–≥–æ–¥–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {chosen_service}.", show_alert=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
        text = "üå¶Ô∏è **–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏**\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:"
        reply_markup = get_weather_service_selection_keyboard(chosen_service)
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing message after setting weather service: {e}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–µ–≤–æ–≥ ---
@router.callback_query(F.data == CB_SETTINGS_ALERTS)
async def cq_select_alert_service_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    db_user = await _get_user_settings(session, user_id)
    
    text = "üö® **–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∏–≤–æ–≥**\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:"
    reply_markup = get_alert_service_selection_keyboard(db_user.preferred_alert_service)
    
    await callback.answer()
    await callback.message.edit_text(text, reply_markup=reply_markup)

@router.callback_query(F.data.startswith(CB_SET_ALERTS_SERVICE_PREFIX))
async def cq_set_alert_service(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    chosen_service = callback.data.split(":")[-1]

    if chosen_service not in [ServiceChoice.UKRAINEALARM, ServiceChoice.ALERTSINUA]:
        logger.warning(f"User {user_id} tried to set invalid alert service: {chosen_service}")
        await callback.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É!", show_alert=True)
        return

    db_user = await _get_user_settings(session, user_id)
    if db_user.preferred_alert_service == chosen_service:
        await callback.answer("–¶–µ–π —Å–µ—Ä–≤—ñ—Å –≤–∂–µ –æ–±—Ä–∞–Ω–æ.", show_alert=True)
    else:
        db_user.preferred_alert_service = chosen_service
        session.add(db_user)
        logger.info(f"User {user_id} set preferred_alert_service to '{chosen_service}'. Waiting for commit.")
        await callback.answer(f"–°–µ—Ä–≤—ñ—Å —Ç—Ä–∏–≤–æ–≥ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {chosen_service}.", show_alert=False)

        text = "üö® **–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∏–≤–æ–≥**\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:"
        reply_markup = get_alert_service_selection_keyboard(chosen_service)
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing message after setting alert service: {e}")