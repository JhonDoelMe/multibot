# src/modules/weather/handlers.py

import logging
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç CALLBACK_WEATHER –∏–∑ inline_main, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞
# from src.keyboards.inline_main import CALLBACK_WEATHER
from src.handlers.common import show_main_menu_message # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
from src.db.models import User
from .service import get_weather_data, format_weather_message
from .keyboard import (
    get_weather_back_keyboard, CALLBACK_WEATHER_BACK,
    get_city_confirmation_keyboard, CALLBACK_WEATHER_USE_SAVED, CALLBACK_WEATHER_OTHER_CITY,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO
)

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_city = State()
    waiting_for_save_decision = State()

async def _get_and_show_weather(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, user_city_input: str):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫
        if isinstance(target, CallbackQuery):
             status_message = await message_to_edit_or_answer.edit_text("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
             await target.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
        else: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             status_message = await message_to_edit_or_answer.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
    except Exception as e:
         logger.error(f"Error sending/editing status message: {e}")
         # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–∑–∂–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
         status_message = message_to_edit_or_answer # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–∫–æ–ª–±—ç–∫

    logger.info(f"User {user_id} requesting weather for user input: {user_city_input}")
    weather_data = await get_weather_data(user_city_input)

    if weather_data and weather_data.get("cod") == 200:
        actual_city_name_from_api = weather_data.get("name", user_city_input)
        city_display_name = user_city_input.capitalize()
        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for display name '{city_display_name}' (API name: '{actual_city_name_from_api}') for user {user_id}")
        await state.update_data(
            city_to_save=actual_city_name_from_api,
            city_display_name=city_display_name
        )
        text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
        reply_markup = get_save_city_keyboard()
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
             await status_message.edit_text(text_to_send, reply_markup=reply_markup)
        except Exception:
             await message_to_edit_or_answer.answer(text_to_send, reply_markup=reply_markup)

        await state.set_state(WeatherStates.waiting_for_save_decision)
    elif weather_data and weather_data.get("cod") == 404:
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ '<b>{user_city_input}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ..." # ... (—Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        reply_markup = get_weather_back_keyboard()
        try:
             await status_message.edit_text(error_text, reply_markup=reply_markup)
        except Exception:
             await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
        logger.warning(f"City '{user_city_input}' not found for user {user_id}")
        await state.clear()
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏..." # ... (—Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        reply_markup = get_weather_back_keyboard()
        try:
             await status_message.edit_text(error_text, reply_markup=reply_markup)
        except Exception:
             await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
        logger.error(f"Failed to get weather for {user_city_input} for user {user_id}. Code: {error_code}, Msg: {error_api_message}")
        await state.clear()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –ü–æ–≥–æ–¥—ã ---
# @router.callback_query(F.data == CALLBACK_WEATHER) # <- –£–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
async def weather_entry_point(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession): # <<< –ù–æ–≤–æ–µ –∏–º—è –∏ —Ç–∏–ø
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π.
    –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ Message –∏–ª–∏ CallbackQuery.
    """
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    db_user = await session.get(User, user_id)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if isinstance(target, CallbackQuery):
        await target.answer()

    if db_user and db_user.preferred_city:
        saved_city = db_user.preferred_city
        logger.info(f"User {user_id} has preferred city: {saved_city}")
        await state.update_data(preferred_city=saved_city)
        text = f"–í–∞—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –º—ñ—Å—Ç–æ: <b>{saved_city}</b>.\n–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω—å–æ–≥–æ?"
        reply_markup = get_city_confirmation_keyboard()
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫, –∏–Ω–∞—á–µ –æ—Ç–≤–µ—á–∞–µ–º
        try:
             if isinstance(target, CallbackQuery):
                  await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
             else:
                  await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e:
             logger.error(f"Error editing/sending message in weather_entry_point: {e}")
             await message_to_edit_or_answer.answer(text, reply_markup=reply_markup) # Fallback

        await state.set_state(WeatherStates.waiting_for_confirmation)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg)
        text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:"
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º
        try:
             if isinstance(target, CallbackQuery):
                  await message_to_edit_or_answer.edit_text(text)
             else:
                  await message_to_edit_or_answer.answer(text)
        except Exception as e:
             logger.error(f"Error editing/sending message in weather_entry_point: {e}")
             await message_to_edit_or_answer.answer(text) # Fallback

        await state.set_state(WeatherStates.waiting_for_city)


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–æ–ª–±—ç–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è) –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# –û–Ω–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–≤–æ–µ–º—É —Ä–æ—É—Ç–µ—Ä—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º FSM

@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_USE_SAVED)
async def handle_use_saved_city(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤—ã–∑—ã–≤–∞–µ—Ç _get_and_show_weather) ...
    user_data = await state.get_data()
    saved_city = user_data.get("preferred_city")
    user_id = callback.from_user.id
    if saved_city:
        logger.info(f"User {user_id} confirmed using saved city: {saved_city}")
        await _get_and_show_weather(callback, state, session, user_city_input=saved_city)
    else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
        logger.warning(f"User {user_id} confirmed using saved city, but city not found in state.")
        await callback.message.edit_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer()


@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_other_city_request(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"User {callback.from_user.id} chose to enter another city.")
    await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await state.set_state(WeatherStates.waiting_for_city)
    await callback.answer()


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤—ã–∑—ã–≤–∞–µ—Ç _get_and_show_weather) ...
    user_city_input = message.text.strip()
    await _get_and_show_weather(message, state, session, user_city_input=user_city_input)


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å —è–≤–Ω—ã–º commit) ...
    user_data = await state.get_data()
    city_to_save_in_db = user_data.get("city_to_save")
    city_display_name = user_data.get("city_display_name")
    user_id = callback.from_user.id
    if not city_to_save_in_db or not city_display_name: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
        logger.error(f"Cannot save city for user {user_id}: city name (API or display) not found in state.")
        await state.clear()
        await show_main_menu_message(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
        return
    db_user = await session.get(User, user_id)
    if db_user: # ... (try/except —Å commit) ...
        try:
            db_user.preferred_city = city_to_save_in_db
            session.add(db_user)
            await session.commit()
            logger.info(f"User {user_id} saved city to DB: {city_to_save_in_db}. Explicit commit executed.")
            text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ.\n\n" + callback.message.text.split('\n\n')[0]
            reply_markup = get_weather_back_keyboard()
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ commit) ...
            logger.exception(f"Database error while saving city for user {user_id}: {e}")
            await session.rollback()
            await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞.")
    else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ...
         logger.error(f"Cannot save city for user {user_id}: user not found in DB.")
         await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞.")

    await state.clear()
    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥. —Å–æ–æ–±—â–µ–Ω–∏—è) ...
    logger.info(f"User {callback.from_user.id} chose not to save the city.")
    user_data = await state.get_data()
    city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ")
    weather_part = callback.message.text.split('\n\n')[0]
    text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"
    reply_markup = get_weather_back_keyboard()
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == CALLBACK_WEATHER_BACK)
async def handle_weather_back(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞) ...
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather.")
    await state.clear()
    await show_main_menu_message(callback) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞