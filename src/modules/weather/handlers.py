# src/modules/weather/handlers.py

import logging
import re
from typing import Union, Optional, Dict, Any
from aiogram import Bot, Router, F
# StateFilter –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö, F.state —î –∫—Ä–∞—â–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup # StatesGroup –≤–∂–µ –±—É–≤ —Ç—É—Ç

from sqlalchemy.ext.asyncio import AsyncSession

from src.db.models import User
from .keyboard import (
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO,
    CALLBACK_WEATHER_FORECAST_5D, CALLBACK_WEATHER_SHOW_CURRENT, get_forecast_keyboard
)
from .service import (
    get_weather_data, format_weather_message,
    get_5day_forecast, format_forecast_message,
    get_weather_data_by_coords
)
from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_save_decision = State()
    showing_weather = State() # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –ø–æ–≥–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (–Ω–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
    showing_forecast = State() # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É


async def _get_and_show_weather(
    bot: Bot,
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession,
    city_input: Optional[str] = None,
    coords: Optional[Dict[str, float]] = None
):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None
    answered_callback = False # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–ª–±–µ–∫

    request_details_log = f"city '{city_input}'" if city_input else f"coords {coords}"
    logger.info(f"_get_and_show_weather: User {user_id}, request: {request_details_log}")

    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e:
            logger.warning(f"Could not answer callback immediately in _get_and_show_weather for user {user_id}: {e}")
    
    try:
        action_text = "üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É..."
        if isinstance(target, CallbackQuery):
            status_message = await message_to_edit_or_answer.edit_text(action_text)
        elif hasattr(target, 'location') and target.location: # –î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é
             status_message = await target.answer(action_text)
        else: # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            status_message = await target.answer(action_text)
    except Exception as e:
        logger.warning(f"Could not send/edit 'loading' status message for weather, user {user_id}: {e}")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤—ñ—Å—É
    weather_api_response: Dict[str, Any]
    is_coords_request_flag = False

    if coords:
        is_coords_request_flag = True
        weather_api_response = await get_weather_data_by_coords(bot, coords['lat'], coords['lon'])
    elif city_input:
        weather_api_response = await get_weather_data(bot, city_input)
    else:
        logger.error(f"No city_input or coords provided for user {user_id} in _get_and_show_weather.")
        error_text = "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É –ø–æ–≥–æ–¥–∏."
        # –°–ø—Ä–æ–±–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        target_msg_for_error = status_message if status_message else message_to_edit_or_answer
        try:
            if status_message: await target_msg_for_error.edit_text(error_text)
            else: await target_msg_for_error.answer(error_text)
        except Exception as e_send: logger.error(f"Failed to send 'no city/coords' error: {e_send}")
        await state.set_state(None) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω FSM
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    final_target_message = status_message if status_message else message_to_edit_or_answer

    # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
    if weather_api_response.get("status") == "error" or str(weather_api_response.get("cod")) != "200":
        # –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ API –∞–±–æ –Ω–∞—à–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É
        # format_weather_message –≤–∂–µ –≤–º—ñ—î –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ç–∞–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        error_display_name = city_input if city_input else ("–≤–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏" if coords else "–≤–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è")
        weather_message_text = format_weather_message(weather_api_response, error_display_name, is_coords_request_flag)
        reply_markup = get_weather_enter_city_back_keyboard() # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        try:
            if status_message: await final_target_message.edit_text(weather_message_text, reply_markup=reply_markup)
            else: await message_to_edit_or_answer.answer(weather_message_text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit/send weather API error message: {e_edit}")
        await state.set_state(WeatherStates.waiting_for_city) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
        logger.warning(f"API error for weather request {request_details_log} for user {user_id}. Response: {weather_api_response}")
        return

    # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
    weather_data = weather_api_response # –¢–µ–ø–µ—Ä —Ü–µ –¥–∞–Ω—ñ –±–µ–∑ –æ–±–≥–æ—Ä—Ç–∫–∏ status/data
    
    api_city_name = weather_data.get("name") # –Ü–º'—è –º—ñ—Å—Ç–∞, —è–∫–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ API
    city_to_save_in_db = api_city_name if api_city_name and not is_coords_request_flag else None # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–≤–æ–¥–∏–ª–∏ –Ω–∞–∑–≤—É —ñ API —ó—ó –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    city_display_name_for_user_message: str
    if is_coords_request_flag:
        city_display_name_for_user_message = api_city_name if api_city_name else city_input if city_input else "–≤–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏"
    else: # –ó–∞–ø–∏—Ç –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞
        city_display_name_for_user_message = api_city_name if api_city_name else city_input # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —ñ–º–µ–Ω—ñ –≤—ñ–¥ API

    logger.info(f"User {user_id}: API city name='{api_city_name}', display name='{city_display_name_for_user_message}', to_save='{city_to_save_in_db}'")

    weather_message_text = format_weather_message(weather_data, city_display_name_for_user_message, is_coords_request_flag)

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ FSM –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–Ω–æ–≤–∏—Ç–∏" —Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑"
    # `current_shown_city` - —Ü–µ —Ç–µ, —â–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ API –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ (–Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)
    # `city_display_name` - —Ç–µ, —â–æ –±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö/–∑–∞–ø–∏—Ç–∞—Ö –Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    fsm_update_data = {
        "current_shown_city_api": api_city_name if api_city_name else (f"{coords['lat']},{coords['lon']}" if coords else city_input), # –î–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API
        "city_display_name_user": city_display_name_for_user_message, # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        "city_to_save_confirmed": city_to_save_in_db, # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ API —ñ–º'—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        "is_coords_request_fsm": is_coords_request_flag
    }
    await state.update_data(**fsm_update_data)
    logger.debug(f"User {user_id}: Updated FSM data: {fsm_update_data}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–≥—Ç–∏ –º—ñ—Å—Ç–æ
    ask_to_save = False
    db_user = await session.get(User, user_id)
    preferred_city_from_db = db_user.preferred_city if db_user else None

    if city_to_save_in_db and (not preferred_city_from_db or preferred_city_from_db.lower() != city_to_save_in_db.lower()):
        ask_to_save = True

    reply_markup = None
    if ask_to_save:
        save_prompt_city_name = city_to_save_in_db.capitalize()
        weather_message_text += f"\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{save_prompt_city_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
        reply_markup = get_save_city_keyboard()
        await state.set_state(WeatherStates.waiting_for_save_decision)
        logger.info(f"User {user_id}: Asking to save '{save_prompt_city_name}'. Set FSM to waiting_for_save_decision.")
    else:
        reply_markup = get_weather_actions_keyboard()
        await state.set_state(WeatherStates.showing_weather) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –ø–æ–∫–∞–∑—É –ø–æ–≥–æ–¥–∏
        logger.info(f"User {user_id}: Weather shown (city '{city_display_name_for_user_message}' is preferred or from geo/no save needed). Set FSM to showing_weather.")

    try:
        if status_message: await final_target_message.edit_text(weather_message_text, reply_markup=reply_markup)
        else: await message_to_edit_or_answer.answer(weather_message_text, reply_markup=reply_markup)
        logger.info(f"User {user_id}: Successfully sent/edited weather message for {request_details_log}.")
    except Exception as e_send_final:
        logger.error(f"Failed to send/edit final weather message for {request_details_log}: {e_send_final}")
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ö–æ—á–∞ –± –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —Ü–µ –±—É–ª–∞ –≤–æ–Ω–∞
        if weather_api_response.get("status") == "error":
             try: await message_to_edit_or_answer.answer("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
             except: pass # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
    finally:
        if isinstance(target, CallbackQuery) and not answered_callback:
            try: await target.answer()
            except Exception: logger.warning(f"Final attempt to answer weather callback for user {user_id} failed.")


async def weather_entry_point(
    target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, bot: Bot
):
    user_id = target.from_user.id
    logger.info(f"User {user_id} initiated weather_entry_point.")
    
    current_fsm_state_name = await state.get_state()
    if current_fsm_state_name not in [None, WeatherStates.waiting_for_city.state, WeatherStates.showing_weather.state, WeatherStates.showing_forecast.state, WeatherStates.waiting_for_save_decision.state]:
        logger.info(f"User {user_id}: In an unrelated FSM state ({current_fsm_state_name}), clearing state before weather module.")
        await state.clear() # –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è, —è–∫—â–æ —Å—Ç–∞–Ω –∑ —ñ–Ω—à–æ–≥–æ –º–æ–¥—É–ª—è
    elif current_fsm_state_name is None: # –Ø–∫—â–æ —Å—Ç–∞–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        await state.set_data({}) # –û—á–∏—â–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ, —è–∫—â–æ —Å—Ç–∞–Ω –≤–∂–µ None

    answered_callback = False
    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e: logger.warning(f"Could not answer callback in weather_entry_point: {e}")

    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    db_user = await session.get(User, user_id)
    preferred_city = db_user.preferred_city if db_user else None
    logger.info(f"weather_entry_point: User {user_id}, preferred_city from DB: '{preferred_city}'")

    if preferred_city:
        await _get_and_show_weather(bot, target, state, session, city_input=preferred_city)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (new user or DB error)") + " has no preferred city."
        logger.info(log_msg)
        text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            if isinstance(target, CallbackQuery):
                # –Ø–∫—â–æ —Ü–µ –∫–æ–ª–±–µ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é), —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
            else: # –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–º–∞–Ω–¥–∞ /weather)
                await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error sending/editing message in weather_entry_point (ask for city): {e}")
            if isinstance(target, CallbackQuery): # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ
                try: await target.message.answer(text,reply_markup=reply_markup)
                except Exception as e2: logger.error(f"Fallback send message also failed in weather_entry_point: {e2}")
        await state.set_state(WeatherStates.waiting_for_city)
        logger.info(f"User {user_id}: Set FSM state to WeatherStates.waiting_for_city.")
    
    if isinstance(target, CallbackQuery) and not answered_callback: # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∫–æ–ª–±–µ–∫
        try: await target.answer()
        except: pass


@router.message(WeatherStates.waiting_for_city, F.location)
async def handle_location_when_waiting(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        user_id = message.from_user.id
        logger.info(f"MAIN weather module: handle_location_when_waiting for user {user_id}: lat={lat}, lon={lon}")
        await _get_and_show_weather(bot, message, state, session, coords={"lat": lat, "lon": lon})
    else:
        logger.warning(f"User {message.from_user.id}: handle_location_when_waiting called without message.location.")
        try: await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as e: logger.error(f"Error sending 'cannot get location' message: {e}")

async def process_main_geolocation_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ common_handlers.handle_any_geolocation
    # common_handlers –≤–∂–µ –º–∞–≤ –±–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ state –≤ None, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –≤–∏–π—Ç–∏ –∑ —ñ–Ω—à–æ–≥–æ —Å—Ç–∞–Ω—É.
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        user_id = message.from_user.id
        logger.info(f"MAIN weather module: process_main_geolocation_button for user {user_id}: lat={lat}, lon={lon}")
        await _get_and_show_weather(bot, message, state, session, coords={"lat": lat, "lon": lon})
    else:
        logger.warning(f"User {message.from_user.id}: process_main_geolocation_button called without message.location.")
        try: await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –ø–æ–≥–æ–¥–∏.")
        except Exception as e: logger.error(f"Error sending 'cannot get location' (from button): {e}")


@router.message(WeatherStates.waiting_for_city, F.text)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_city_input = message.text.strip() if message.text else ""
    user_id = message.from_user.id
    logger.info(f"handle_city_input: User {user_id} entered city '{user_city_input}'. Current FSM state: {await state.get_state()}")
    
    if not user_city_input:
        try: await message.answer("üòî –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º).", reply_markup=get_weather_enter_city_back_keyboard())
        except Exception as e: logger.error(f"Error sending empty city input message: {e}")
        return
    if len(user_city_input) > 100:
        try: await message.answer("üòî –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_weather_enter_city_back_keyboard())
        except Exception as e: logger.error(f"Error sending city name too long message: {e}")
        return
    # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ü–∏—Ñ—Ä–∏ –≤ –Ω–∞–∑–≤—ñ –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –¥–µ—è–∫–∏—Ö –º—ñ—Å—Ç –∞–±–æ —Ä–∞–π–æ–Ω—ñ–≤)
    if not re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î\s\-\.\'\d]+$", user_city_input):
        try: await message.answer("üòî –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_weather_enter_city_back_keyboard())
        except Exception as e: logger.error(f"Error sending invalid city name chars message: {e}")
        return
        
    await _get_and_show_weather(bot, message, state, session, city_input=user_city_input)


@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY, WeatherStates.showing_weather) # –¢—ñ–ª—å–∫–∏ –∑—ñ —Å—Ç–∞–Ω—É –ø–æ–∫–∞–∑—É –ø–æ–≥–æ–¥–∏
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} requested OTHER city from showing_weather state. Current FSM data: {await state.get_data()}")
    answered_callback = False
    try:
        await callback.answer()
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_action_other_city: {e}")
    
    try:
        await callback.message.edit_text("üåç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard())
    except Exception as e:
        logger.error(f"Failed to edit message for 'other city' input: {e}")
        try: # Fallback
            await callback.message.answer("üåç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard())
        except Exception as e2: logger.error(f"Failed to send new message for 'other city' input either: {e2}")
    
    await state.set_state(WeatherStates.waiting_for_city)
    logger.info(f"User {user_id}: Set FSM state to WeatherStates.waiting_for_city (from Other City callback).")
    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH, WeatherStates.showing_weather) # –¢—ñ–ª—å–∫–∏ –∑—ñ —Å—Ç–∞–Ω—É –ø–æ–∫–∞–∑—É –ø–æ–≥–æ–¥–∏
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} requested REFRESH (main weather). FSM state: {await state.get_state()}, FSM data: {user_fsm_data}")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "current_shown_city_api" –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ API
    # –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ API, –∞–±–æ —Ä—è–¥–æ–∫ "lat,lon"
    api_request_location = user_fsm_data.get("current_shown_city_api")
    is_coords = user_fsm_data.get("is_coords_request_fsm", False)

    answered_callback = False
    try:
        await callback.answer("–û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_action_refresh: {e}")

    if api_request_location:
        logger.info(f"User {user_id} refreshing main weather for API location: '{api_request_location}', is_coords={is_coords}")
        if is_coords and isinstance(api_request_location, str) and ',' in api_request_location:
            try:
                lat_str, lon_str = api_request_location.split(',')
                coords_for_refresh = {"lat": float(lat_str), "lon": float(lon_str)}
                await _get_and_show_weather(bot, callback, state, session, coords=coords_for_refresh)
            except ValueError:
                logger.error(f"User {user_id}: Could not parse coords '{api_request_location}' from FSM for refresh.")
                # –ü–æ–¥–∞–ª—å—à–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ (–∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∞) –Ω–∏–∂—á–µ
                api_request_location = None # –°–∫–∏–¥–∞—î–º–æ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ª–æ–≥—ñ–∫–∏ "–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏"
        elif not is_coords: # –Ø–∫—â–æ —Ü–µ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
            await _get_and_show_weather(bot, callback, state, session, city_input=api_request_location)
        else: # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ FSM
            logger.warning(f"User {user_id}: Inconsistent FSM data for refresh. is_coords={is_coords}, but api_request_location='{api_request_location}'.")
            api_request_location = None # –°–∫–∏–¥–∞—î–º–æ
    
    if not api_request_location: # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ FSM
        logger.warning(f"User {user_id}: No valid location found in FSM for refresh. Asking to input city.")
        error_text = "üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(error_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to edit message after refresh failure: {e}")
            try: await callback.message.answer(error_text, reply_markup=reply_markup)
            except Exception as e2: logger.error(f"Failed to send new message after refresh failure either: {e2}")
        await state.set_state(WeatherStates.waiting_for_city)

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_SAVE_CITY_YES, WeatherStates.waiting_for_save_decision)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} chose YES to save city. FSM data: {user_fsm_data}")

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "city_to_save_confirmed" - —ñ–º'—è, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ API
    city_to_actually_save_in_db = user_fsm_data.get("city_to_save_confirmed")
    # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –±–µ—Ä–µ–º–æ "city_display_name_user"
    city_name_user_saw_in_prompt = user_fsm_data.get("city_display_name_user", city_to_actually_save_in_db)


    answered_callback = False
    try:
        await callback.answer("–ó–±–µ—Ä—ñ–≥–∞—é –º—ñ—Å—Ç–æ...")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_save_city_yes: {e}")

    final_text = ""
    final_markup = get_weather_actions_keyboard() # –ì–æ—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

    if not city_to_actually_save_in_db:
        logger.error(f"User {user_id}: 'city_to_save_confirmed' is missing in FSM data. Cannot save. Data: {user_fsm_data}")
        final_text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è."
        await state.set_state(WeatherStates.showing_weather) # –ê–±–æ None, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
    else:
        db_user = await session.get(User, user_id)
        if db_user:
            try:
                old_preferred_city = db_user.preferred_city
                db_user.preferred_city = city_to_actually_save_in_db
                session.add(db_user)
                # –ö–æ–º–º—ñ—Ç –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∏–π DbSessionMiddleware (–∞–±–æ await session.commit() —è–∫—â–æ middleware –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è commit)
                logger.info(f"User {user_id}: Preferred city set to '{city_to_actually_save_in_db}' (was '{old_preferred_city}'). User saw prompt for '{city_name_user_saw_in_prompt}'.")
                final_text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_name_user_saw_in_prompt}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ."
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ FSM, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏, —â–æ –º—ñ—Å—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ
                await state.update_data(preferred_city_from_db_fsm=city_to_actually_save_in_db)
                await state.set_state(WeatherStates.showing_weather) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –ø–æ–∫–∞–∑—É –ø–æ–≥–æ–¥–∏
            except Exception as e_db:
                logger.exception(f"User {user_id}: DB error while saving preferred city '{city_to_actually_save_in_db}': {e_db}", exc_info=True)
                await session.rollback()
                final_text = "üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞."
                await state.set_state(WeatherStates.showing_weather) # –ê–±–æ None
        else:
            logger.error(f"User {user_id} not found in DB during save city operation.")
            final_text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞."
            await state.set_state(None) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω, –±–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫

    try:
        await callback.message.edit_text(final_text, reply_markup=final_markup)
    except Exception as e_edit:
        logger.error(f"Failed to edit message after save city (YES) decision: {e_edit}")
        try: await callback.message.answer(final_text, reply_markup=final_markup)
        except Exception as e_ans: logger.error(f"Failed to send new message after save city (YES) decision: {e_ans}")

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_SAVE_CITY_NO, WeatherStates.waiting_for_save_decision)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} chose NOT to save city. FSM data: {user_fsm_data}")
    
    city_display_name_from_prompt = user_fsm_data.get("city_display_name_user", "–ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ")
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥–∏ –±–µ–∑ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    # –ü–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥–∏ –≤ FSM –∞–±–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ.
    # –ü—Ä–æ—Å—Ç—ñ—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π.
    # –ê–±–æ, —è–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏–π:
    original_weather_message_parts = callback.message.text.split('\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 1)
    weather_part = original_weather_message_parts[0] if original_weather_message_parts else "–î–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É"
    
    text_after_no_save = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name_from_prompt}</b> –Ω–µ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ)"

    answered_callback = False
    try:
        await callback.answer("–ú—ñ—Å—Ç–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_save_city_no: {e}")

    reply_markup = get_weather_actions_keyboard()
    try:
        await callback.message.edit_text(text_after_no_save, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Failed to edit message after user chose NOT to save city: {e_edit}")
        try: await callback.message.answer(text_after_no_save, reply_markup=reply_markup)
        except Exception as e_ans: logger.error(f"Failed to send new message after user chose NOT to save city: {e_ans}")

    await state.set_state(WeatherStates.showing_weather) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –ø–æ–∫–∞–∑—É –ø–æ–≥–æ–¥–∏
    logger.info(f"User {user_id}: City not saved. Set FSM state to showing_weather.")
    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_FORECAST_5D, WeatherStates.showing_weather)
async def handle_forecast_request(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot): # session –º–æ–∂–µ –Ω–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} requested 5-day FORECAST. FSM state: {await state.get_state()}, FSM data: {user_fsm_data}")

    # –î–ª—è –∑–∞–ø–∏—Ç—É –¥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "current_shown_city_api"
    city_name_for_api_request = user_fsm_data.get("current_shown_city_api")
    # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "city_display_name_user"
    display_name_for_forecast_header = user_fsm_data.get("city_display_name_user", city_name_for_api_request)

    answered_callback = False
    status_message = None

    if not city_name_for_api_request:
        logger.warning(f"User {user_id} requested forecast, but 'current_shown_city_api' not found. Data: {user_fsm_data}")
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –∑–Ω–æ–≤—É.", show_alert=True)
            answered_callback = True
        except Exception as e: logger.warning(f"Could not answer callback (no city for forecast): {e}")
        return

    try:
        await callback.answer("–û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤...")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_forecast_request: {e}")

    try:
        status_message = await callback.message.edit_text(f"‚è≥ –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: <b>{display_name_for_forecast_header}</b>...")
    except Exception as e_edit_status:
        logger.warning(f"Failed to edit message for forecast status: {e_edit_status}")

    final_target_message = status_message if status_message else callback.message
    forecast_api_response = await get_5day_forecast(bot, city_name_for_api_request)
    
    # format_forecast_message –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –∑ forecast_api_response
    message_text = format_forecast_message(forecast_api_response, display_name_for_forecast_header)
    reply_markup = get_forecast_keyboard() # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏"

    try:
        if status_message: await final_target_message.edit_text(message_text, reply_markup=reply_markup)
        else: await callback.message.answer(message_text, reply_markup=reply_markup) # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
        logger.info(f"User {user_id}: Sent 5-day forecast for API city '{city_name_for_api_request}' (display: '{display_name_for_forecast_header}').")
        await state.set_state(WeatherStates.showing_forecast) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–æ–∫–∞–∑—É –ø—Ä–æ–≥–Ω–æ–∑—É
    except Exception as e_edit_final:
        logger.error(f"Failed to edit/send final forecast message: {e_edit_final}")
        # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ API, format_forecast_message –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
        # –¢—É—Ç –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –π–æ–≥–æ —â–µ —Ä–∞–∑, —è–∫—â–æ edit_text –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
        if forecast_api_response.get("status") == "error" and not status_message:
            try: await callback.message.answer(message_text, reply_markup=get_weather_actions_keyboard()) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π
            except: pass

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_SHOW_CURRENT, WeatherStates.showing_forecast) # –ó—ñ —Å—Ç–∞–Ω—É –ø–æ–∫–∞–∑—É –ø—Ä–æ–≥–Ω–æ–∑—É
async def handle_show_current_weather(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} requested to show CURRENT weather again (from forecast view). FSM data: {user_fsm_data}")

    api_request_location = user_fsm_data.get("current_shown_city_api")
    is_coords = user_fsm_data.get("is_coords_request_fsm", False)
    
    answered_callback = False
    try:
        await callback.answer("–ü–æ–∫–∞–∑—É—é –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É...")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_show_current_weather: {e}")

    if api_request_location:
        if is_coords and isinstance(api_request_location, str) and ',' in api_request_location:
            try:
                lat_str, lon_str = api_request_location.split(',')
                coords_to_show = {"lat": float(lat_str), "lon": float(lon_str)}
                await _get_and_show_weather(bot, callback, state, session, coords=coords_to_show)
            except ValueError:
                logger.error(f"User {user_id}: Could not parse coords '{api_request_location}' from FSM for show_current.")
                api_request_location = None # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –±–ª–æ–∫—É –ø–æ–º–∏–ª–∫–∏
        elif not is_coords:
            await _get_and_show_weather(bot, callback, state, session, city_input=api_request_location)
        else:
             api_request_location = None # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
    
    if not api_request_location: # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏
        logger.warning(f"User {user_id}: No valid location in FSM to show current weather from forecast. Asking to input city.")
        error_text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(error_text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit message after show current failure: {e_edit}")
            try: await callback.message.answer(error_text, reply_markup=reply_markup)
            except Exception as e_ans: logger.error(f"Failed to send new message after show current failure: {e_ans}")
        await state.set_state(WeatherStates.waiting_for_city)

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN, WeatherStates.waiting_for_city) # –¢—ñ–ª—å–∫–∏ –∑—ñ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    current_fsm_state = await state.get_state()
    logger.info(f"User {user_id} requested back to main menu from weather module (state: {current_fsm_state}). Setting FSM state to None.")
    await state.set_state(None) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥–∏
    # await state.clear() # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    await show_main_menu_message(callback) # show_main_menu_message –≤–∂–µ —Ä–æ–±–∏—Ç—å callback.answer()