# src/modules/weather/handlers.py

import logging
from typing import Union # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π Union[Message, CallbackQuery]

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from src.keyboards.inline_main import CALLBACK_WEATHER
from src.handlers.common import show_main_menu
from src.db.models import User # –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from .service import get_weather_data, format_weather_message # –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã
from .keyboard import ( # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–≥–æ–¥—ã
    get_weather_back_keyboard, CALLBACK_WEATHER_BACK,
    get_city_confirmation_keyboard, CALLBACK_WEATHER_USE_SAVED, CALLBACK_WEATHER_OTHER_CITY,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name="weather-module")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–æ–¥—ã
class WeatherStates(StatesGroup):
    waiting_for_confirmation = State() # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–î–∞/–Ü–Ω—à–µ –º—ñ—Å—Ç–æ)
    waiting_for_city = State()         # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    waiting_for_save_decision = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–¢–∞–∫/–ù—ñ)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

async def _get_and_show_weather(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, city_name: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.
    target: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –∫—É–¥–∞/–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å.
    state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.
    session: –°–µ—Å—Å–∏—è –ë–î.
    city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
    """
    user_id = target.from_user.id
    message_to_edit = None

    if isinstance(target, CallbackQuery):
        message_to_edit = target.message
        await target.answer()
    else:
        message_to_edit = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")

    logger.info(f"User {user_id} requesting weather for city: {city_name}")
    weather_data = await get_weather_data(city_name)

    if weather_data and weather_data.get("cod") == 200:
        actual_city_name = weather_data.get("name", city_name)
        weather_message = format_weather_message(weather_data, actual_city_name)
        logger.info(f"Sent weather for {actual_city_name} to user {user_id}")

        await state.update_data(last_successful_city=actual_city_name)

        text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{actual_city_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
        reply_markup = get_save_city_keyboard()
        await message_to_edit.edit_text(text_to_send, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_save_decision)

    elif weather_data and weather_data.get("cod") == 404:
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ '<b>{city_name}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è."
        reply_markup = get_weather_back_keyboard()
        await message_to_edit.edit_text(error_text, reply_markup=reply_markup)
        logger.warning(f"City '{city_name}' not found for user {user_id}")
        await state.clear()
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ (–ö–æ–¥: {error_code}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        reply_markup = get_weather_back_keyboard()
        await message_to_edit.edit_text(error_text, reply_markup=reply_markup)
        logger.error(f"Failed to get weather for {city_name} for user {user_id}. Code: {error_code}")
        await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---

@router.callback_query(F.data == CALLBACK_WEATHER)
async def handle_weather_entry(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.get –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ–ª–µ–µ –ø—Ä—è–º–æ–π —Å–ø–æ—Å–æ–± –ø–æ PK)
    db_user = await session.get(User, user_id)
    # –í–∞–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–∑–≤–Ω–µ
    # –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å: await session.refresh(db_user)

    if db_user and db_user.preferred_city:
        logger.info(f"User {user_id} has preferred city: {db_user.preferred_city}")
        await state.update_data(preferred_city=db_user.preferred_city)
        text = f"–í–∞—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –º—ñ—Å—Ç–æ: <b>{db_user.preferred_city}</b>.\n–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω—å–æ–≥–æ?"
        reply_markup = get_city_confirmation_keyboard()
        await callback.message.edit_text(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_confirmation)
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg)
        await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        await state.set_state(WeatherStates.waiting_for_city)

    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_USE_SAVED)
async def handle_use_saved_city(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    saved_city = user_data.get("preferred_city")
    user_id = callback.from_user.id

    if saved_city:
        logger.info(f"User {user_id} confirmed using saved city: {saved_city}")
        await _get_and_show_weather(callback, state, session, saved_city)
    else:
        logger.warning(f"User {user_id} confirmed using saved city, but city not found in state.")
        await callback.message.edit_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer()


@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_other_city_request(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} chose to enter another city.")
    await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await state.set_state(WeatherStates.waiting_for_city)
    await callback.answer()


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    city_name = message.text.strip()
    await _get_and_show_weather(message, state, session, city_name)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ ---

@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    city_to_save = user_data.get("last_successful_city")
    user_id = callback.from_user.id

    if not city_to_save:
        logger.error(f"Cannot save city for user {user_id}: city name not found in state.")
        await state.clear()
        await show_main_menu(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        return

    db_user = await session.get(User, user_id)
    if db_user:
        try: # –î–æ–±–∞–≤–∏–º try/except –¥–ª—è –∫–æ–º–º–∏—Ç–∞
            db_user.preferred_city = city_to_save
            session.add(db_user)
            # !!! –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –∫–æ–º–º–∏—Ç –ó–î–ï–°–¨ !!!
            await session.commit()
            logger.info(f"User {user_id} saved city: {city_to_save}. Explicit commit executed.")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_to_save}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ.\n\n" + callback.message.text.split('\n\n')[0]
            reply_markup = get_weather_back_keyboard()
            await callback.message.edit_text(text, reply_markup=reply_markup)

        except Exception as e:
            logger.exception(f"Database error while saving city for user {user_id}: {e}")
            await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞.")
            # await session.rollback() # Middleware –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —Ä–æ–ª–ª–±—ç–∫
    else:
        logger.error(f"Cannot save city for user {user_id}: user not found in DB.")
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞.")

    await state.clear()
    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} chose not to save the city.")
    text = callback.message.text.split('\n\n')[0]
    reply_markup = get_weather_back_keyboard()
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await state.clear()
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---

@router.callback_query(F.data == CALLBACK_WEATHER_BACK)
async def handle_weather_back(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather.")
    await state.clear()
    await show_main_menu(callback)

# --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---