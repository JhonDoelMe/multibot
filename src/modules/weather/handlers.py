# src/modules/weather/handlers.py

import logging
from typing import Union, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Union

# –ò–º–ø–æ—Ä—Ç—ã
from src.db.models import User
# <<< –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –ö–õ–ê–í–ò–ê–¢–£–†/–ö–û–õ–ë–≠–ö–û–í >>>
from .keyboard import (
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO,
    CALLBACK_WEATHER_FORECAST_5D, # –î–æ–±–∞–≤–ª–µ–Ω–æ
    CALLBACK_WEATHER_SHOW_CURRENT, # –î–æ–±–∞–≤–ª–µ–Ω–æ
    get_forecast_keyboard # –î–æ–±–∞–≤–ª–µ–Ω–æ
)
from .service import get_weather_data, format_weather_message, get_5day_forecast, format_forecast_message # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_save_decision = State()

async def _get_and_show_weather(
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession,
    user_city_input: str,
    is_preferred: bool
):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = target.from_user.id; message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target; status_message = None
    try:
        if isinstance(target, CallbackQuery): status_message = await message_to_edit_or_answer.edit_text("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É..."); await target.answer()
        else: status_message = await message_to_edit_or_answer.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
    except Exception as e: logger.error(f"Error sending/editing status message: {e}"); status_message = message_to_edit_or_answer
    logger.info(f"User {user_id} requesting weather for user input: {user_city_input}")
    weather_data = await get_weather_data(user_city_input)
    final_target_message = status_message if status_message else message_to_edit_or_answer
    if weather_data and weather_data.get("cod") == 200:
        actual_city_name_from_api = weather_data.get("name", user_city_input); city_display_name = user_city_input.capitalize()
        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for display name '{city_display_name}' (API name: '{actual_city_name_from_api}') for user {user_id}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ preferred_city, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
        db_user = await session.get(User, user_id)
        await state.update_data(
            city_to_save=actual_city_name_from_api, city_display_name=city_display_name,
            current_shown_city=user_city_input, preferred_city=(db_user.preferred_city if db_user else None) # <<< –°–æ—Ö—Ä–∞–Ω—è–µ–º preferred_city
        )
        if not is_preferred:
            text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"; reply_markup = get_save_city_keyboard()
            try: await final_target_message.edit_text(text_to_send, reply_markup=reply_markup)
            except Exception: await message_to_edit_or_answer.answer(text_to_send, reply_markup=reply_markup) # Fallback
            await state.set_state(WeatherStates.waiting_for_save_decision)
        else:
            reply_markup = get_weather_actions_keyboard() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
            try: await final_target_message.edit_text(weather_message, reply_markup=reply_markup)
            except Exception: await message_to_edit_or_answer.answer(weather_message, reply_markup=reply_markup) # Fallback
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å/–ü—Ä–æ–≥–Ω–æ–∑
    elif weather_data and weather_data.get("cod") == 404: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ 404) ...
         error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ '<b>{user_city_input}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ..."; reply_markup = get_weather_enter_city_back_keyboard()
         try: await final_target_message.edit_text(error_text, reply_markup=reply_markup)
         except Exception: await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
         logger.warning(f"City '{user_city_input}' not found for user {user_id}"); await state.clear()
    else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫) ...
         error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'; error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
         error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '<b>{user_city_input}</b>' (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."; reply_markup = get_weather_enter_city_back_keyboard()
         try: await final_target_message.edit_text(error_text, reply_markup=reply_markup)
         except Exception: await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
         logger.error(f"Failed to get weather for {user_city_input} for user {user_id}. Code: {error_code}, Msg: {error_api_message}"); await state.clear()


async def weather_entry_point(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = target.from_user.id; message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target; db_user = await session.get(User, user_id)
    if isinstance(target, CallbackQuery): await target.answer()
    preferred_city = db_user.preferred_city if db_user else None
    if preferred_city:
        logger.info(f"User {user_id} has preferred city: {preferred_city}. Showing weather directly.")
        await state.update_data(preferred_city=preferred_city) # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await _get_and_show_weather(target, state, session, user_city_input=preferred_city, is_preferred=True)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg); text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:"; reply_markup = get_weather_enter_city_back_keyboard()
        try:
             if isinstance(target, CallbackQuery): await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
             else: await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e: logger.error(f"Error editing/sending message: {e}"); await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_city)


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     user_city_input = message.text.strip(); db_user = await session.get(User, message.from_user.id); preferred_city = db_user.preferred_city if db_user else None; is_preferred = (preferred_city is not None and preferred_city.lower() == user_city_input.lower()); await _get_and_show_weather(message, state, session, user_city_input=user_city_input, is_preferred=is_preferred)

@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     logger.info(f"User {callback.from_user.id} requested OTHER city."); await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard()); await state.set_state(WeatherStates.waiting_for_city); await callback.answer()

@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH)
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     user_data = await state.get_data(); current_city = user_data.get("current_shown_city"); preferred_city = user_data.get("preferred_city"); user_id = callback.from_user.id
     if current_city: logger.info(f"User {user_id} requested REFRESH for: {current_city}"); is_preferred_city = (preferred_city is not None and preferred_city.lower() == current_city.lower()); await _get_and_show_weather(callback, state, session, user_city_input=current_city, is_preferred=is_preferred_city)
     else: logger.warning(f"User {user_id} requested REFRESH, no city in state."); await callback.message.edit_text("...", reply_markup=get_weather_enter_city_back_keyboard()); await state.set_state(WeatherStates.waiting_for_city); await callback.answer("...", show_alert=True)

@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å —è–≤–Ω—ã–º commit, –Ω–æ –±–µ–∑ state.clear()) ...
    user_data = await state.get_data(); city_to_save_in_db = user_data.get("city_to_save"); city_display_name = user_data.get("city_display_name"); user_id = callback.from_user.id
    if not city_to_save_in_db or not city_display_name: logger.error(f"... city name not found ..."); from src.handlers.utils import show_main_menu_message; await show_main_menu_message(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è..."); return
    db_user = await session.get(User, user_id)
    if db_user:
         try: db_user.preferred_city = city_to_save_in_db; session.add(db_user); await session.commit(); logger.info(f"... saved city: {city_to_save_in_db}. Commit executed."); text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ."; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
         except Exception as e: logger.exception(f"... DB error saving city: {e}"); await session.rollback(); await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞...")
    else: logger.error(f"... user not found in DB."); await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ...")
    # await state.clear() # –ù–ï –û–ß–ò–©–ê–ï–ú, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å/–ü—Ä–æ–≥–Ω–æ–∑
    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –±–µ–∑ state.clear()) ...
     logger.info(f"User {callback.from_user.id} chose not to save."); user_data = await state.get_data(); city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ"); weather_part = callback.message.text.split('\n\n')[0]; text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
     # await state.clear() # –ù–ï –û–ß–ò–©–ê–ï–ú
     await callback.answer()

# --- –ù–û–í–´–ï –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
@router.callback_query(F.data == CALLBACK_WEATHER_FORECAST_5D) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
async def handle_forecast_request(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π. """
    user_data = await state.get_data()
    # !!! –ò—Å–ø–æ–ª—å–∑—É–µ–º current_shown_city –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ !!!
    city_name_for_request = user_data.get("current_shown_city")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    city_display_name = user_data.get("city_display_name", city_name_for_request) # Fallback –Ω–∞ city_name_for_request
    user_id = callback.from_user.id

    if not city_name_for_request:
         logger.warning(f"User {user_id} requested forecast, but no city found in state.")
         await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.", show_alert=True)
         return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    await callback.answer("–û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑...")
    status_message = await callback.message.edit_text(f"‚è≥ –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name}...")

    forecast_api_data = await get_5day_forecast(city_name_for_request) # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è API

    if forecast_api_data and forecast_api_data.get("cod") == "200":
         message_text = format_forecast_message(forecast_api_data, city_display_name) # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∏–º–µ–Ω–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞
         reply_markup = get_forecast_keyboard()
         await status_message.edit_text(message_text, reply_markup=reply_markup)
         logger.info(f"Sent 5-day forecast for {city_display_name} to user {user_id}")
    else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API –ø—Ä–æ–≥–Ω–æ–∑–∞) ...
         error_code = forecast_api_data.get('cod', 'N/A') if forecast_api_data else 'N/A'
         error_api_message = forecast_api_data.get('message', 'Internal error') if forecast_api_data else 'Internal error'
         error_text = f"üò• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name} (–ü–æ–º–∏–ª–∫–∞: {error_code} - {error_api_message})."
         await status_message.edit_text(error_text) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
         logger.error(f"Failed to get 5-day forecast for {city_display_name} (request: {city_name_for_request}) for user {user_id}. Code: {error_code}, Msg: {error_api_message}")
         # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ? –ú–æ–∂–Ω–æ.
         await state.clear()


@router.callback_query(F.data == CALLBACK_WEATHER_SHOW_CURRENT) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
async def handle_show_current_weather(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
     """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏'. """
     user_data = await state.get_data()
     current_city = user_data.get("current_shown_city")
     preferred_city = user_data.get("preferred_city") # preferred_city —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ state
     user_id = callback.from_user.id

     if current_city:
         logger.info(f"User {user_id} requested back to current weather for city: {current_city}")
         is_preferred_city = (preferred_city is not None and preferred_city.lower() == current_city.lower())
         await _get_and_show_weather(callback, state, session, user_city_input=current_city, is_preferred=is_preferred_city)
     else:
         logger.warning(f"User {user_id} requested back to current weather, but no city in state.")
         await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ.", show_alert=True)
         from src.handlers.utils import show_main_menu_message # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏
         await state.clear()
         await show_main_menu_message(callback)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ ---
@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN)
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    from src.handlers.utils import show_main_menu_message
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather input.")
    await state.clear()
    await show_main_menu_message(callback)