# src/modules/weather/handlers.py

import logging
from typing import Union, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from src.handlers.common import show_main_menu_message
from src.db.models import User
from .service import get_weather_data, format_weather_message
from .keyboard import (
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ / –∑–∞–ø—Ä–æ—Å–µ –≤–≤–æ–¥–∞
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π)
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO
)

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    # –£–±–∏—Ä–∞–µ–º waiting_for_confirmation, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    waiting_for_city = State()         # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    waiting_for_save_decision = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏

async def _get_and_show_weather(
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession,
    user_city_input: str,
    is_preferred: bool # <<< –ù–æ–≤—ã–π —Ñ–ª–∞–≥: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º?
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ is_preferred=False.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–≥–æ–¥—ã.
    """
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
    try:
        if isinstance(target, CallbackQuery):
             status_message = await message_to_edit_or_answer.edit_text("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
             await target.answer()
        else:
             status_message = await message_to_edit_or_answer.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
    except Exception as e:
         logger.error(f"Error sending/editing status message: {e}")
         status_message = message_to_edit_or_answer

    logger.info(f"User {user_id} requesting weather for city: {user_city_input}")
    weather_data = await get_weather_data(user_city_input)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    final_target_message = status_message if status_message else message_to_edit_or_answer

    if weather_data and weather_data.get("cod") == 200:
        actual_city_name_from_api = weather_data.get("name", user_city_input)
        city_display_name = user_city_input.capitalize() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞
        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for display name '{city_display_name}' (API name: '{actual_city_name_from_api}') for user {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—è –æ—Ç API (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è) –∏ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–∫–∞–∑–∞)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑–∞–ª–∏ –ø–æ–≥–æ–¥—É (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å)
        await state.update_data(
            city_to_save=actual_city_name_from_api,
            city_display_name=city_display_name,
            current_shown_city=user_city_input # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å
        )

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        if not is_preferred:
            text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
            reply_markup = get_save_city_keyboard()
            await final_target_message.edit_text(text_to_send, reply_markup=reply_markup)
            await state.set_state(WeatherStates.waiting_for_save_decision)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            reply_markup = get_weather_actions_keyboard()
            await final_target_message.edit_text(weather_message, reply_markup=reply_markup)
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –º—ã –Ω–µ –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –û–±–Ω–æ–≤–∏—Ç—å/–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –≤ FSM
            # –ù–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–µ–±—É—é—Ç FSM
            # await state.clear() # –ü–æ–∫–∞ –Ω–µ –æ—á–∏—â–∞–µ–º, –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è current_shown_city

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    elif weather_data and weather_data.get("cod") == 404:
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ '<b>{user_city_input}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ..."
        reply_markup = get_weather_enter_city_back_keyboard() # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        logger.warning(f"City '{user_city_input}' not found for user {user_id}")
        await state.clear()
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '<b>{user_city_input}</b>' (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        reply_markup = get_weather_enter_city_back_keyboard()
        await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        logger.error(f"Failed to get weather for {user_city_input} for user {user_id}. Code: {error_code}, Msg: {error_api_message}")
        await state.clear()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –ü–æ–≥–æ–¥—ã ---
async def weather_entry_point(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    db_user = await session.get(User, user_id)

    if isinstance(target, CallbackQuery): await target.answer()

    if db_user and db_user.preferred_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        saved_city = db_user.preferred_city
        logger.info(f"User {user_id} has preferred city: {saved_city}. Showing weather directly.")
        await state.update_data(preferred_city=saved_city) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è _get_and_show_weather
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≥–æ—Ä–æ–¥ –∏ —Ñ–ª–∞–≥ is_preferred=True
        await _get_and_show_weather(target, state, session, user_city_input=saved_city, is_preferred=True)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg)
        text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:"
        reply_markup = get_weather_enter_city_back_keyboard() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
        try:
             if isinstance(target, CallbackQuery): await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
             else: await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e:
             logger.error(f"Error editing/sending message in weather_entry_point: {e}")
             await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_city)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ city_confirmation, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
# @router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_USE_SAVED) ...
# @router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_OTHER_CITY) ...

@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. """
    user_city_input = message.text.strip()
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã, is_preferred=False, —Ç–∞–∫ –∫–∞–∫ –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤–µ–¥–µ–Ω
    await _get_and_show_weather(message, state, session, user_city_input=user_city_input, is_preferred=False)

# --- –ù–û–í–´–ï –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π ---
@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–Ü–Ω—à–µ –º—ñ—Å—Ç–æ'. """
    logger.info(f"User {callback.from_user.id} requested OTHER city from weather view.")
    await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard())
    await state.set_state(WeatherStates.waiting_for_city)
    await callback.answer()

@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH)
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–û–Ω–æ–≤–∏—Ç–∏'. """
    user_data = await state.get_data()
    current_city = user_data.get("current_shown_city") # –ë–µ—Ä–µ–º –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
    preferred_city = user_data.get("preferred_city") # –ë–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
    user_id = callback.from_user.id

    if current_city:
        logger.info(f"User {user_id} requested REFRESH for city: {current_city}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
        is_preferred_city = (current_city == preferred_city)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        await _get_and_show_weather(callback, state, session, user_city_input=current_city, is_preferred=is_preferred_city)
    else:
        # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞ (—Å—Ç—Ä–∞–Ω–Ω–æ), –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
        logger.warning(f"User {user_id} requested REFRESH, but no city found in state.")
        await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É:", reply_markup=get_weather_enter_city_back_keyboard())
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏.", show_alert=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (–æ—Å—Ç–∞—é—Ç—Å—è) ---
@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å —è–≤–Ω—ã–º commit) ...
    user_data = await state.get_data(); city_to_save_in_db = user_data.get("city_to_save"); city_display_name = user_data.get("city_display_name"); user_id = callback.from_user.id
    if not city_to_save_in_db or not city_display_name: logger.error(f"... city name not found ..."); await state.clear(); from src.handlers.common import show_main_menu_message; await show_main_menu_message(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è..."); return
    db_user = await session.get(User, user_id)
    if db_user:
         try: db_user.preferred_city = city_to_save_in_db; session.add(db_user); await session.commit(); logger.info(f"... saved city to DB: {city_to_save_in_db}. Explicit commit executed."); text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ."; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
         except Exception as e: logger.exception(f"... DB error saving city: {e}"); await session.rollback(); await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞...")
    else: logger.error(f"... user not found in DB."); await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ...")
    await state.clear(); await callback.answer()


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π) ...
    logger.info(f"User {callback.from_user.id} chose not to save the city.")
    user_data = await state.get_data(); city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ");
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–µ —Å–Ω–æ–≤–∞
    weather_part = callback.message.text.split('\n\n')[0]
    text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"
    reply_markup = get_weather_actions_keyboard() # <<< –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await state.clear(); await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN)
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    from src.handlers.common import show_main_menu_message
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather input.")
    await state.clear()
    await show_main_menu_message(callback)