# src/modules/weather/handlers.py (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import logging
from typing import Union, Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Union

# –ò–º–ø–æ—Ä—Ç—ã
from src.db.models import User
from .keyboard import (
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO,
    CALLBACK_WEATHER_FORECAST_5D, CALLBACK_WEATHER_SHOW_CURRENT, get_forecast_keyboard
)
from .service import (
    get_weather_data, format_weather_message,
    get_5day_forecast, format_forecast_message,
    get_weather_data_by_coords
)
from src.handlers.utils import show_main_menu_message # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_save_decision = State()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def _get_and_show_weather(
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession,
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–ª–∏ –≥–æ—Ä–æ–¥, –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ–±–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
    city_input: Optional[str] = None,
    coords: Optional[Dict[str, float]] = None
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É (–ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º), –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ –ù–ê–ó–í–ê–ù–ò–Æ –≥–æ—Ä–æ–¥–∞,
    –∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º.
    """
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None
    is_preferred = False # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–Ω—É—Ç—Ä–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    request_details = "" # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
    try: # –ë–ª–æ–∫ try-except –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if isinstance(target, CallbackQuery):
             status_message = await message_to_edit_or_answer.edit_text("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
             await target.answer()
        elif target.location: # –û—Ç–≤–µ—Ç –Ω–∞ –ª–æ–∫–∞—Ü–∏—é
             status_message = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
        else: # –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
             status_message = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
    except Exception as e:
         logger.error(f"Error sending/editing status message: {e}")
         status_message = message_to_edit_or_answer # Fallback

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É ---
    weather_data = None
    if coords:
         request_details = f"coords ({coords['lat']:.4f}, {coords['lon']:.4f})"
         logger.info(f"User {user_id} requesting weather by {request_details}")
         weather_data = await get_weather_data_by_coords(coords['lat'], coords['lon'])
         is_preferred = False # –ü–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≥–æ—Ä–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è '–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º' –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    elif city_input:
         request_details = f"city '{city_input}'"
         logger.info(f"User {user_id} requesting weather by {request_details}")
         weather_data = await get_weather_data(city_input)
         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
         db_user = await session.get(User, user_id)
         preferred_city = db_user.preferred_city if db_user else None
         if preferred_city and weather_data and weather_data.get("cod") == 200:
              api_city_name = weather_data.get("name")
              # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
              if api_city_name and preferred_city.lower() == api_city_name.lower():
                   is_preferred = True
              elif preferred_city.lower() == city_input.lower():
                   is_preferred = True
    else:
         # –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
         logger.error(f"No city or coords provided to _get_and_show_weather for user {user_id}")
         await status_message.edit_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.")
         await state.clear()
         return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    final_target_message = status_message if status_message else message_to_edit_or_answer

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API ---
    if weather_data and (weather_data.get("cod") == 200 or str(weather_data.get("cod")) == "200"):
        actual_city_name_from_api = weather_data.get("name")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if coords and not actual_city_name_from_api: city_display_name = "–∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
        elif city_input: city_display_name = city_input.capitalize()
        else: city_display_name = actual_city_name_from_api if actual_city_name_from_api else "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ"

        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for {request_details} (display name: '{city_display_name}') for user {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            city_to_save=actual_city_name_from_api, # –ò–º—è –æ—Ç API –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            city_display_name=city_display_name,    # –ò–º—è –¥–ª—è –ø–æ–∫–∞–∑–∞
            current_shown_city=actual_city_name_from_api if actual_city_name_from_api else city_input, # –ò–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
            current_coords=coords,                  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –±—ã–ª–∏
            preferred_city=preferred_city if city_input else None # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ –∏–º–µ–Ω–∏
        )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ –ù–ê–ó–í–ê–ù–ò–Æ –≥–æ—Ä–æ–¥–∞ –∏ –æ–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
        ask_to_save = city_input is not None and not is_preferred

        reply_markup = None # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ
        text_to_send = weather_message

        if ask_to_save:
            text_to_send += f"\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
            reply_markup = get_save_city_keyboard()
            await state.set_state(WeatherStates.waiting_for_save_decision)
        else:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            reply_markup = get_weather_actions_keyboard()
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º? –û—Å—Ç–∞–≤–∏–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –û–±–Ω–æ–≤–∏—Ç—å/–ü—Ä–æ–≥–Ω–æ–∑/–î—Ä—É–≥–æ–π
            # await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
             await final_target_message.edit_text(text_to_send, reply_markup=reply_markup)
        except Exception as e:
             logger.error(f"Failed to edit final message: {e}")
             # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–º, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
             try:
                 await message_to_edit_or_answer.answer(text_to_send, reply_markup=reply_markup)
             except Exception as e2:
                  logger.error(f"Failed to send final message either: {e2}")


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
    elif weather_data and (weather_data.get("cod") == 404 or str(weather_data.get("cod")) == "404"):
         city_error_name = city_input if city_input else "–≤–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è"
         error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ/–ª–æ–∫–∞—Ü—ñ—è '<b>{city_error_name}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ..."; reply_markup = get_weather_enter_city_back_keyboard()
         try: await final_target_message.edit_text(error_text, reply_markup=reply_markup)
         except Exception: await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
         logger.warning(f"Location '{request_details}' not found for user {user_id}"); await state.clear()
    else:
         error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'; error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
         error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è {request_details} (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."; reply_markup = get_weather_enter_city_back_keyboard()
         try: await final_target_message.edit_text(error_text, reply_markup=reply_markup)
         except Exception: await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
         logger.error(f"Failed to get weather for {request_details} for user {user_id}. Code: {error_code}, Msg: {error_api_message}"); await state.clear()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –ü–æ–≥–æ–¥—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ #107) ---
async def weather_entry_point(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession):
    user_id = target.from_user.id; message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target; db_user = await session.get(User, user_id)
    if isinstance(target, CallbackQuery): await target.answer()
    preferred_city = db_user.preferred_city if db_user else None
    if preferred_city:
        logger.info(f"User {user_id} has preferred city: {preferred_city}. Showing weather directly.")
        await state.update_data(preferred_city=preferred_city)
        # –í—ã–∑—ã–≤–∞–µ–º —Å city_input, is_preferred —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        await _get_and_show_weather(target, state, session, city_input=preferred_city)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city..."
        logger.info(log_msg); text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:"; reply_markup = get_weather_enter_city_back_keyboard()
        try:
             if isinstance(target, CallbackQuery): await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
             else: await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e: logger.error(f"Error editing/sending message: {e}"); await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_city)


# --- –ù–û–í–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤) ---
@router.message(F.location)
async def handle_location(message: Message, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. """
    if message.location:
         lat = message.location.latitude
         lon = message.location.longitude
         user_id = message.from_user.id
         logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")
         await state.clear()
         # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ö–û–û–†–î–ò–ù–ê–¢–´
         await _get_and_show_weather(message, state, session, coords={"lat": lat, "lon": lon})


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤) ---
@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. """
    user_city_input = message.text.strip()
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ù–ê–ó–í–ê–ù–ò–ï –ì–û–†–û–î–ê
    await _get_and_show_weather(message, state, session, city_input=user_city_input)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω refresh) ---
@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"User {callback.from_user.id} requested OTHER city."); await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard()); await state.set_state(WeatherStates.waiting_for_city); await callback.answer()


@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH)
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–≥–æ—Ä–æ–¥ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã). """
    user_data = await state.get_data()
    coords = user_data.get("current_coords") # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    city_name = user_data.get("current_shown_city") # –ó–∞—Ç–µ–º –≥–æ—Ä–æ–¥
    user_id = callback.from_user.id

    if coords: # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –Ω–∏–º
        logger.info(f"User {user_id} requested REFRESH for coords: {coords}")
        await _get_and_show_weather(callback, state, session, coords=coords)
    elif city_name: # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
         logger.info(f"User {user_id} requested REFRESH for city: {city_name}")
         # is_preferred –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–∫–∞–∑
         await _get_and_show_weather(callback, state, session, city_input=city_name)
    else: # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        logger.warning(f"User {user_id} requested REFRESH, but no location/city found in state.")
        await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...", reply_markup=get_weather_enter_city_back_keyboard())
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏.", show_alert=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ state.clear() —É–±—Ä–∞–Ω!) ---
@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –ë–ï–ó state.clear()) ...
    user_data = await state.get_data(); city_to_save_in_db = user_data.get("city_to_save"); city_display_name = user_data.get("city_display_name"); user_id = callback.from_user.id
    if not city_to_save_in_db or not city_display_name: logger.error(f"... city name not found ..."); from src.handlers.utils import show_main_menu_message; await show_main_menu_message(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è..."); return # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils
    db_user = await session.get(User, user_id)
    if db_user:
         try: db_user.preferred_city = city_to_save_in_db; session.add(db_user); await session.commit(); logger.info(f"... saved city: {city_to_save_in_db}. Commit executed."); text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ."; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
         except Exception as e: logger.exception(f"... DB error saving city: {e}"); await session.rollback(); await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞...")
    else: logger.error(f"... user not found in DB."); await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ...")
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –û–±–Ω–æ–≤–∏—Ç—å/–ü—Ä–æ–≥–Ω–æ–∑
    # await state.clear() # –£–±—Ä–∞–Ω–æ
    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –ë–ï–ó state.clear()) ...
     logger.info(f"User {callback.from_user.id} chose not to save."); user_data = await state.get_data(); city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ"); weather_part = callback.message.text.split('\n\n')[0]; text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
     # await state.clear() # –£–±—Ä–∞–Ω–æ
     await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ #107) ---
@router.callback_query(F.data == CALLBACK_WEATHER_FORECAST_5D)
async def handle_forecast_request(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_data = await state.get_data(); city_name_for_request = user_data.get("current_shown_city"); city_display_name = user_data.get("city_display_name", city_name_for_request); user_id = callback.from_user.id
    if not city_name_for_request: logger.warning(f"User {user_id} requested forecast, but no city in state."); await callback.answer("...", show_alert=True); return
    await callback.answer("–û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑..."); status_message = await callback.message.edit_text(f"‚è≥ –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name}...")
    forecast_api_data = await get_5day_forecast(city_name_for_request)
    if forecast_api_data and forecast_api_data.get("cod") == "200": message_text = format_forecast_message(forecast_api_data, city_display_name); reply_markup = get_forecast_keyboard(); await status_message.edit_text(message_text, reply_markup=reply_markup); logger.info(f"Sent 5-day forecast for {city_display_name}...")
    else: error_code = forecast_api_data.get('cod', 'N/A') if forecast_api_data else 'N/A'; error_api_message = forecast_api_data.get('message', '...') if forecast_api_data else '...'; error_text = f"üò• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name} (–ü–æ–º–∏–ª–∫–∞: {error_code} - {error_api_message})."; await status_message.edit_text(error_text); logger.error(f"Failed to get forecast for {city_display_name}... Code: {error_code}, Msg: {error_api_message}"); await state.clear()


@router.callback_query(F.data == CALLBACK_WEATHER_SHOW_CURRENT)
async def handle_show_current_weather(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     user_data = await state.get_data(); current_city = user_data.get("current_shown_city"); preferred_city = user_data.get("preferred_city"); user_id = callback.from_user.id
     if current_city: logger.info(f"User {user_id} requested back to current weather: {current_city}"); is_preferred_city = (preferred_city is not None and preferred_city.lower() == current_city.lower()); await _get_and_show_weather(callback, state, session, city_input=current_city) # –ü–µ—Ä–µ–¥–∞–µ–º city_input
     else: logger.warning(f"User {user_id} requested back to current weather, no city in state."); await callback.answer("...", show_alert=True); from src.handlers.utils import show_main_menu_message; await state.clear(); await show_main_menu_message(callback)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ ---
@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN)
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    from src.handlers.utils import show_main_menu_message
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather input.")
    await state.clear()
    await show_main_menu_message(callback)