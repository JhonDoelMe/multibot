# src/modules/weather/handlers.py

import logging
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from src.keyboards.inline_main import CALLBACK_WEATHER
from src.handlers.common import show_main_menu
from src.db.models import User
from .service import get_weather_data, format_weather_message
from .keyboard import (
    get_weather_back_keyboard, CALLBACK_WEATHER_BACK,
    get_city_confirmation_keyboard, CALLBACK_WEATHER_USE_SAVED, CALLBACK_WEATHER_OTHER_CITY,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO
)

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_city = State()
    waiting_for_save_decision = State()

async def _get_and_show_weather(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, user_city_input: str): # <<< –ü—Ä–∏–Ω–∏–º–∞–µ–º user_city_input
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É—è user_city_input –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É—è user_city_input –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è API-–≤–µ—Ä—Å–∏—é).
    """
    user_id = target.from_user.id
    message_to_edit = None

    if isinstance(target, CallbackQuery):
        message_to_edit = target.message
        await target.answer()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_to_edit = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ —Ç–æ–º—É, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    logger.info(f"User {user_id} requesting weather for user input: {user_city_input}")
    weather_data = await get_weather_data(user_city_input)

    if weather_data and weather_data.get("cod") == 200:
        # –£—Å–ø–µ—Ö. –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        actual_city_name_from_api = weather_data.get("name", user_city_input) # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–Ω—è–ª OWM
        city_display_name = user_city_input.capitalize() # –ò–º—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ò–ú–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for display name '{city_display_name}' (API name: '{actual_city_name_from_api}') for user {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê –∏–º–µ–Ω–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await state.update_data(
            city_to_save=actual_city_name_from_api, # –ò–º—è –æ—Ç API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            city_display_name=city_display_name     # –ò–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: –ø–æ–≥–æ–¥–∞ + –≤–æ–ø—Ä–æ—Å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (—Å –∏–º–µ–Ω–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?" # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_markup = get_save_city_keyboard()
        await message_to_edit.edit_text(text_to_send, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_save_decision)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    elif weather_data and weather_data.get("cod") == 404:
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ '<b>{user_city_input}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è."
        reply_markup = get_weather_back_keyboard()
        await message_to_edit.edit_text(error_text, reply_markup=reply_markup)
        logger.warning(f"City '{user_city_input}' not found for user {user_id}")
        await state.clear()
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '<b>{user_city_input}</b>' (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        reply_markup = get_weather_back_keyboard()
        await message_to_edit.edit_text(error_text, reply_markup=reply_markup)
        logger.error(f"Failed to get weather for {user_city_input} for user {user_id}. Code: {error_code}, Msg: {error_api_message}")
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---
@router.callback_query(F.data == CALLBACK_WEATHER)
async def handle_weather_entry(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    db_user = await session.get(User, user_id)

    if db_user and db_user.preferred_city:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ (–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç API)
        saved_city = db_user.preferred_city
        logger.info(f"User {user_id} has preferred city: {saved_city}")
        await state.update_data(preferred_city=saved_city) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º–æ–∂–Ω–æ –µ–≥–æ –∂–µ, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —É–∫—Ä. –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ)
        text = f"–í–∞—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –º—ñ—Å—Ç–æ: <b>{saved_city}</b>.\n–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω—å–æ–≥–æ?"
        reply_markup = get_city_confirmation_keyboard()
        await callback.message.edit_text(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_confirmation)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg)
        await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        await state.set_state(WeatherStates.waiting_for_city)

    await callback.answer()


@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_USE_SAVED)
async def handle_use_saved_city(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    saved_city = user_data.get("preferred_city") # –ë–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ò–ó –ë–î (–æ–Ω–æ –∂–µ –æ—Ç API)
    user_id = callback.from_user.id

    if saved_city:
        logger.info(f"User {user_id} confirmed using saved city: {saved_city}")
        # –ü–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –∫–∞–∫ user_city_input, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –Ω–∏–º
        await _get_and_show_weather(callback, state, session, user_city_input=saved_city)
    else:
        logger.warning(f"User {user_id} confirmed using saved city, but city not found in state.")
        await callback.message.edit_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer()


@router.callback_query(WeatherStates.waiting_for_confirmation, F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_other_city_request(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} chose to enter another city.")
    await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await state.set_state(WeatherStates.waiting_for_city)
    await callback.answer()


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    user_city_input = message.text.strip()
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É–Ω–∫—Ü–∏—é
    await _get_and_show_weather(message, state, session, user_city_input=user_city_input)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (–∏–∑–º–µ–Ω–µ–Ω—ã) ---
@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    # –ë–µ—Ä–µ–º –∏–º—è –æ—Ç API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    city_to_save_in_db = user_data.get("city_to_save")
    # –ë–µ—Ä–µ–º –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    city_display_name = user_data.get("city_display_name")
    user_id = callback.from_user.id

    if not city_to_save_in_db or not city_display_name: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞
        logger.error(f"Cannot save city for user {user_id}: city name (API or display) not found in state.")
        await state.clear()
        await show_main_menu(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        return

    db_user = await session.get(User, user_id)
    if db_user:
        try:
            # –í –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω—É–ª–æ API
            db_user.preferred_city = city_to_save_in_db
            session.add(db_user)
            await session.commit() # –û—Å—Ç–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –∫–æ–º–º–∏—Ç –∑–¥–µ—Å—å
            logger.info(f"User {user_id} saved city to DB: {city_to_save_in_db}. Explicit commit executed.")

            # –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ.\n\n" + callback.message.text.split('\n\n')[0]
            reply_markup = get_weather_back_keyboard()
            await callback.message.edit_text(text, reply_markup=reply_markup)

        except Exception as e:
            logger.exception(f"Database error while saving city for user {user_id}: {e}")
            await session.rollback()
            await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞.")
    else:
        logger.error(f"Cannot save city for user {user_id}: user not found in DB.")
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞.")

    await state.clear()
    await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) ...
    logger.info(f"User {callback.from_user.id} chose not to save the city.")
    # –ë–µ—Ä–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —É–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    user_data = await state.get_data()
    city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ") # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø–æ–≥–æ–¥–Ω—É—é —á–∞—Å—Ç—å
    weather_part = callback.message.text.split('\n\n')[0]
    text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏

    reply_markup = get_weather_back_keyboard()
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == CALLBACK_WEATHER_BACK)
async def handle_weather_back(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather.")
    await state.clear()
    await show_main_menu(callback)