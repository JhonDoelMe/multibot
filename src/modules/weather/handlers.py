# src/modules/weather/handlers.py

import logging
from typing import Union, Optional, Dict, Any # –î–æ–±–∞–≤–∏–ª–∏ Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Union

# –ò–º–ø–æ—Ä—Ç—ã
from src.db.models import User
from .keyboard import (
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO,
    CALLBACK_WEATHER_FORECAST_5D, CALLBACK_WEATHER_SHOW_CURRENT, get_forecast_keyboard
)
# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
from .service import (
    get_weather_data, format_weather_message,
    get_5day_forecast, format_forecast_message,
    get_weather_data_by_coords # <<< –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
)

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_save_decision = State()

# --- –ò–ó–ú–ï–ù–Ø–ï–ú –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
async def _get_and_show_weather(
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession,
    # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏–ª–∏ –≥–æ—Ä–æ–¥, –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    city_input: Optional[str] = None,
    coords: Optional[Dict[str, float]] = None
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É (–ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º), –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ –ù–ê–ó–í–ê–ù–ò–Æ –≥–æ—Ä–æ–¥–∞,
    –∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º.
    """
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None
    is_preferred = False # –§–ª–∞–≥, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–≥–æ–¥–∞ –ø–æ–≥–æ–¥–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    request_details = "" # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
    try:
        if isinstance(target, CallbackQuery):
             status_message = await message_to_edit_or_answer.edit_text("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
             await target.answer()
        else:
             # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ª–æ–∫–∞—Ü–∏—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ, –æ—Ç–≤–µ—á–∞–µ–º
             if target.location:
                  status_message = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
             else: # –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
                  status_message = await target.answer("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É...")
    except Exception as e:
         logger.error(f"Error sending/editing status message: {e}")
         status_message = message_to_edit_or_answer # Fallback

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É ---
    weather_data = None
    if coords:
         request_details = f"coords ({coords['lat']:.4f}, {coords['lon']:.4f})"
         logger.info(f"User {user_id} requesting weather by {request_details}")
         weather_data = await get_weather_data_by_coords(coords['lat'], coords['lon'])
    elif city_input:
         request_details = f"city '{city_input}'"
         logger.info(f"User {user_id} requesting weather by {request_details}")
         weather_data = await get_weather_data(city_input)
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
         db_user = await session.get(User, user_id)
         preferred_city = db_user.preferred_city if db_user else None
         if preferred_city and weather_data and weather_data.get("cod") == 200:
              api_city_name = weather_data.get("name")
              # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∏–º—è –æ—Ç API, –∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
              if api_city_name and preferred_city.lower() == api_city_name.lower():
                   is_preferred = True
              elif preferred_city.lower() == city_input.lower():
                   is_preferred = True
    else:
         logger.error(f"No city or coords provided to _get_and_show_weather for user {user_id}")
         await status_message.edit_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.")
         await state.clear()
         return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    final_target_message = status_message if status_message else message_to_edit_or_answer

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API ---
    if weather_data and (weather_data.get("cod") == 200 or str(weather_data.get("cod")) == "200"):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        actual_city_name_from_api = weather_data.get("name")
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if coords and not actual_city_name_from_api:
            city_display_name = "–∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif city_input:
             city_display_name = city_input.capitalize()
        # –ò–Ω–∞—á–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–æ—Ä–¥ + –∏–º—è –æ—Ç API) –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –æ—Ç API
        else:
             city_display_name = actual_city_name_from_api

        weather_message = format_weather_message(weather_data, city_display_name)
        logger.info(f"Formatted weather for {request_details} (display name: '{city_display_name}') for user {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ä–æ–¥ –æ—Ç API (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è) –∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_shown_city_for_refresh = actual_city_name_from_api if actual_city_name_from_api else city_input if city_input else None # –î–ª—è –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å –ª—É—á—à–µ –∏–º—è –æ—Ç API
        await state.update_data(
            city_to_save=actual_city_name_from_api,
            city_display_name=city_display_name,
            current_shown_city=current_shown_city_for_refresh,
            current_coords=coords, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            preferred_city=preferred_city if city_input else None # –°–æ—Ö—Ä–∞–Ω—è–µ–º preferred –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ –ù–ê–ó–í–ê–ù–ò–Æ –≥–æ—Ä–æ–¥–∞ –∏ –æ–Ω –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
        ask_to_save = city_input and not is_preferred

        if ask_to_save:
            text_to_send = f"{weather_message}\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
            reply_markup = get_save_city_keyboard()
            await final_target_message.edit_text(text_to_send, reply_markup=reply_markup)
            await state.set_state(WeatherStates.waiting_for_save_decision)
        else:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            reply_markup = get_weather_actions_keyboard()
            await final_target_message.edit_text(weather_message, reply_markup=reply_markup)
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API ---
    elif weather_data and (weather_data.get("cod") == 404 or str(weather_data.get("cod")) == "404"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        city_error_name = city_input if city_input else "–≤–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è"
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ/–ª–æ–∫–∞—Ü—ñ—è '<b>{city_error_name}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ..."
        reply_markup = get_weather_enter_city_back_keyboard()
        await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        logger.warning(f"Location '{request_details}' not found for user {user_id}")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è {request_details} (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        reply_markup = get_weather_enter_city_back_keyboard()
        await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        logger.error(f"Failed to get weather for {request_details} for user {user_id}. Code: {error_code}, Msg: {error_api_message}")
        await state.clear()


async def weather_entry_point(target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession):
    """ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π. """
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    db_user = await session.get(User, user_id)

    if isinstance(target, CallbackQuery): await target.answer()

    preferred_city = db_user.preferred_city if db_user else None

    if preferred_city:
        logger.info(f"User {user_id} has preferred city: {preferred_city}. Showing weather directly.")
        await state.update_data(preferred_city=preferred_city)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –ù–ê–ó–í–ê–ù–ò–Æ –≥–æ—Ä–æ–¥–∞, is_preferred=True
        await _get_and_show_weather(target, state, session, city_input=preferred_city, is_preferred=True)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        log_msg = f"User {user_id}" + ("" if db_user else " (just created?)") + " has no preferred city. Asking for input."
        logger.info(log_msg)
        text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:" # –û–±–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
             if isinstance(target, CallbackQuery): await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
             else: await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e: logger.error(f"Error editing/sending message: {e}"); await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        await state.set_state(WeatherStates.waiting_for_city)


# --- –ù–û–í–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ---
@router.message(F.location)
async def handle_location(message: Message, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. """
    if message.location:
         lat = message.location.latitude
         lon = message.location.longitude
         user_id = message.from_user.id
         logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")
         await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. is_preferred –≤—Å–µ–≥–¥–∞ False –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
         await _get_and_show_weather(message, state, session, coords={"lat": lat, "lon": lon}, is_preferred=False)


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. """
    user_city_input = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    db_user = await session.get(User, message.from_user.id)
    preferred_city = db_user.preferred_city if db_user else None
    # –°—á–∏—Ç–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
    is_preferred = (preferred_city is not None and preferred_city.lower() == user_city_input.lower())
    await _get_and_show_weather(message, state, session, city_input=user_city_input, is_preferred=is_preferred)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π ---
@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"User {callback.from_user.id} requested OTHER city."); await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard()); await state.set_state(WeatherStates.waiting_for_city); await callback.answer()


@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH)
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–≥–æ—Ä–æ–¥ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã). """
    user_data = await state.get_data()
    coords = user_data.get("current_coords")
    city_name = user_data.get("current_shown_city") # –ì–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
    preferred_city = user_data.get("preferred_city") # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    user_id = callback.from_user.id

    if coords: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        logger.info(f"User {user_id} requested REFRESH for coords: {coords}")
        # is_preferred –≤—Å–µ–≥–¥–∞ False –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        await _get_and_show_weather(callback, state, session, coords=coords, is_preferred=False)
    elif city_name: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
         logger.info(f"User {user_id} requested REFRESH for city: {city_name}")
         is_preferred_city = (preferred_city is not None and preferred_city.lower() == city_name.lower())
         await _get_and_show_weather(callback, state, session, city_input=city_name, is_preferred=is_preferred_city)
    else: # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        logger.warning(f"User {user_id} requested REFRESH, but no location/city found in state.")
        await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É:", reply_markup=get_weather_enter_city_back_keyboard())
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏.", show_alert=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ ---
@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, commit –æ—Å—Ç–∞–µ—Ç—Å—è, state –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è) ...
    user_data = await state.get_data(); city_to_save_in_db = user_data.get("city_to_save"); city_display_name = user_data.get("city_display_name"); user_id = callback.from_user.id
    if not city_to_save_in_db or not city_display_name: logger.error(f"... city name not found ..."); from src.handlers.utils import show_main_menu_message; await show_main_menu_message(callback, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è..."); return
    db_user = await session.get(User, user_id)
    if db_user:
         try: db_user.preferred_city = city_to_save_in_db; session.add(db_user); await session.commit(); logger.info(f"... saved city: {city_to_save_in_db}. Commit executed."); text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ."; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
         except Exception as e: logger.exception(f"... DB error saving city: {e}"); await session.rollback(); await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞...")
    else: logger.error(f"... user not found in DB."); await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ...")
    # –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ó–î–ï–°–¨
    await callback.answer()

@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, state –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è) ...
     logger.info(f"User {callback.from_user.id} chose not to save."); user_data = await state.get_data(); city_display_name = user_data.get("city_display_name", "–º—ñ—Å—Ç–æ"); weather_part = callback.message.text.split('\n\n')[0]; text = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"; reply_markup = get_weather_actions_keyboard(); await callback.message.edit_text(text, reply_markup=reply_markup)
     # –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ó–î–ï–°–¨
     await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ ---
@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN)
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    from src.handlers.utils import show_main_menu_message
    logger.info(f"User {callback.from_user.id} requested back to main menu from weather input.")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã—Ö–æ–¥–µ
    await show_main_menu_message(callback)