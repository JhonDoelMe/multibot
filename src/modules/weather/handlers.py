# src/modules/weather/handlers.py

import logging
import re
from typing import Union, Optional, Dict, Any
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã
from src.db.models import User
from .keyboard import (
    get_weather_actions_keyboard, CALLBACK_WEATHER_OTHER_CITY, CALLBACK_WEATHER_REFRESH,
    get_weather_enter_city_back_keyboard, CALLBACK_WEATHER_BACK_TO_MAIN,
    get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO,
    CALLBACK_WEATHER_FORECAST_5D, CALLBACK_WEATHER_SHOW_CURRENT, get_forecast_keyboard
)
from .service import (
    get_weather_data, format_weather_message,
    get_5day_forecast, format_forecast_message,
    get_weather_data_by_coords
)
from src.handlers.utils import show_main_menu_message # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

logger = logging.getLogger(__name__)
router = Router(name="weather-module")

class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_save_decision = State()

async def _get_and_show_weather(
    bot: Bot, target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession,
    city_input: Optional[str] = None, coords: Optional[Dict[str, float]] = None
):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None
    is_preferred = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    request_details = ""

    try:
        action_text = "üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É..."
        if isinstance(target, CallbackQuery):
            status_message = await message_to_edit_or_answer.edit_text(action_text)
            await target.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
        elif hasattr(target, 'location') and target.location : # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ location
            status_message = await target.answer(action_text)
        else:
            status_message = await target.answer(action_text)
    except Exception as e:
        logger.error(f"Error sending/editing status message for weather: {e}")
        status_message = message_to_edit_or_answer # Fallback

    weather_data = None
    preferred_city_from_db = None # –ì–æ—Ä–æ–¥ –∏–∑ –ë–î
    city_to_save_in_db = None # –ì–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î (–∏–º—è –∏–∑ API)

    if coords:
        request_details = f"coords ({coords['lat']:.4f}, {coords['lon']:.4f})"
        logger.info(f"User {user_id} requesting weather by {request_details}")
        weather_data = await get_weather_data_by_coords(bot, coords['lat'], coords['lon'])
        # –î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ is_preferred –≤—Å–µ–≥–¥–∞ False
        is_preferred = False
        # –ü–æ–ª—É—á–∏–º preferred_city –∏–∑ –ë–î –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ state, –Ω–æ –Ω–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ is_preferred –∑–¥–µ—Å—å
        db_user_for_coords = await session.get(User, user_id)
        if db_user_for_coords:
            preferred_city_from_db = db_user_for_coords.preferred_city

    elif city_input:
        request_details = f"city '{city_input}'"
        logger.info(f"User {user_id} requesting weather by {request_details}")
        weather_data = await get_weather_data(bot, city_input)
        
        db_user = await session.get(User, user_id)
        if db_user:
            preferred_city_from_db = db_user.preferred_city

        if weather_data and str(weather_data.get("cod")) == "200": # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API
            api_city_name = weather_data.get("name") # –ò–º—è –≥–æ—Ä–æ–¥–∞ –æ—Ç API
            city_to_save_in_db = api_city_name # –≠—Ç–æ –∏–º—è –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å

            if preferred_city_from_db and api_city_name:
                if preferred_city_from_db.lower() == api_city_name.lower():
                    is_preferred = True
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–æ—Ä–æ–¥ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
            if preferred_city_from_db and not is_preferred:
                 if preferred_city_from_db.lower() == city_input.strip().lower():
                      is_preferred = True
    else:
        logger.error(f"No city_input or coords provided for user {user_id} in _get_and_show_weather.")
        await status_message.edit_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        return

    final_target_message = status_message if status_message else message_to_edit_or_answer

    if weather_data and str(weather_data.get("cod")) == "200":
        actual_city_name_from_api = weather_data.get("name")
        
        city_display_name_for_message: str # –ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if coords and actual_city_name_from_api:
            city_display_name_for_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –º. {actual_city_name_from_api}"
        elif coords:
            city_display_name_for_message = "–∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
        elif actual_city_name_from_api: # –ï—Å–ª–∏ –±—ã–ª –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ API –≤–µ—Ä–Ω—É–ª–æ –∏–º—è
             city_display_name_for_message = actual_city_name_from_api.capitalize()
        elif city_input: # –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –∏–º—è, –Ω–æ –±—ã–ª –≤–≤–æ–¥
            city_display_name_for_message = city_input.capitalize()
        else: # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å city_input –∏–ª–∏ coords
            city_display_name_for_message = "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ"

        weather_message_text = format_weather_message(weather_data, city_display_name_for_message)
        logger.info(f"Formatted weather for {request_details} (display: '{city_display_name_for_message}') for user {user_id}")

        # current_shown_city –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –≥–æ—Ä–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ API (—Ç.–µ. –∏–º—è –æ—Ç API –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –∏–º—è)
        current_shown_city_for_refresh_state = actual_city_name_from_api if actual_city_name_from_api else city_input if city_input else None

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        state_data_to_update = {
            "city_to_save": city_to_save_in_db, # –ò–º—è –æ—Ç API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
            "city_display_name": city_display_name_for_message, # –ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            "current_shown_city": current_shown_city_for_refresh_state, # –ì–æ—Ä–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
            "current_coords": coords, # –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –±—ã–ª–∏
            "preferred_city_from_db": preferred_city_from_db # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –ë–î (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        }
        logger.debug(f"Updating FSM state with data: {state_data_to_update}")
        await state.update_data(**state_data_to_update)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_fsm_data = await state.get_data()
        logger.debug(f"Full FSM data after update in _get_and_show_weather: {current_fsm_data}")

        ask_to_save = city_input is not None and not is_preferred and city_to_save_in_db is not None
        reply_markup = None
        text_to_send = weather_message_text

        if ask_to_save:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º city_display_name_for_message –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, —Ç.–∫. –æ–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text_to_send += f"\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{city_display_name_for_message}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
            reply_markup = get_save_city_keyboard()
            await state.set_state(WeatherStates.waiting_for_save_decision)
            logger.info(f"Set FSM state to WeatherStates.waiting_for_save_decision for user {user_id}")
        else:
            reply_markup = get_weather_actions_keyboard()
            # –ï—Å–ª–∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –∑–Ω–∞—á–∏—Ç, –ª–∏–±–æ —ç—Ç–æ —É–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥,
            # –ª–∏–±–æ —ç—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ.
            # –ù–æ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥, —Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∫—Ä–æ–º–µ waiting_for_city)
            # –ï—Å–ª–∏ —ç—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º _get_and_show_weather
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–∫–∂–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ.
            # –ü–æ—ç—Ç–æ–º—É –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–µ–π –∏–ª–∏ –¥–∞–∂–µ –≤—Ä–µ–¥–Ω–æ–π.
            # –û—Å—Ç–∞–≤–∏–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–æ–ª–±—ç–∫–æ–≤ "–î–∞/–ù–µ—Ç" –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
            pass


        try:
            await final_target_message.edit_text(text_to_send, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to edit final weather message: {e}")
            try:
                await message_to_edit_or_answer.answer(text_to_send, reply_markup=reply_markup)
            except Exception as e2:
                logger.error(f"Failed to send new final weather message either: {e2}")

    elif weather_data and (str(weather_data.get("cod")) == "404"):
        city_error_name = city_input if city_input else "–≤–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è"
        error_text = f"üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ç–æ/–ª–æ–∫–∞—Ü—ñ—è '<b>{city_error_name}</b>' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to edit 404 error message: {e}")
            try:
                await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
            except Exception as e2:
                logger.error(f"Failed to send new 404 error message either: {e2}")
        logger.warning(f"Location '{request_details}' not found for user {user_id} (404). Clearing FSM state.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ 404
    else:
        error_code = weather_data.get('cod', 'N/A') if weather_data else 'N/A'
        error_api_message = weather_data.get('message', 'Internal error') if weather_data else 'Internal error'
        error_text = f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è {request_details} (–ö–æ–¥: {error_code} - {error_api_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        reply_markup = get_weather_enter_city_back_keyboard() # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è
        try:
            await final_target_message.edit_text(error_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to edit other error message: {e}")
            try:
                # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞ text_to_send –≤–º–µ—Å—Ç–æ error_text
                await message_to_edit_or_answer.answer(error_text, reply_markup=reply_markup)
            except Exception as e2:
                logger.error(f"Failed to send new other error message either: {e2}")
        logger.error(f"Failed to get weather for {request_details} for user {user_id}. API Response: {weather_data}. Clearing FSM state.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö API


async def weather_entry_point(
    target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, bot: Bot
):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
    # –û—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
    if await state.get_state() is not None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"User {user_id}: Clearing previous weather FSM state before weather_entry_point.")
        await state.clear() # –ò—Å–ø–æ–ª—å–∑—É–µ–º clear –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    db_user = await session.get(User, user_id)
    if isinstance(target, CallbackQuery):
        await target.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫

    preferred_city = db_user.preferred_city if db_user else None

    if preferred_city:
        logger.info(f"User {user_id} has preferred city: {preferred_city}. Showing weather for it.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º prefered_city –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ _get_and_show_weather —Å–∞–º –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î
        # await state.update_data(preferred_city_from_db=preferred_city) # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ _get_and_show_weather
        await _get_and_show_weather(bot, target, state, session, city_input=preferred_city)
    else:
        log_msg = f"User {user_id}" + ("" if db_user else " (new user or DB error)") + " has no preferred city."
        logger.info(log_msg)
        text = "üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            if isinstance(target, CallbackQuery):
                await message_to_edit_or_answer.edit_text(text, reply_markup=reply_markup)
            else:
                await message_to_edit_or_answer.answer(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error sending/editing message in weather_entry_point (ask for city): {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            if isinstance(target, CallbackQuery):
                try:
                    await target.message.answer(text,reply_markup=reply_markup)
                except Exception as e2:
                    logger.error(f"Fallback send message also failed in weather_entry_point: {e2}")
        await state.set_state(WeatherStates.waiting_for_city)
        logger.info(f"Set FSM state to WeatherStates.waiting_for_city for user {user_id}")


@router.message(F.location)
async def handle_location(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        user_id = message.from_user.id
        logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–≥–æ–¥—ã –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏,
        # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–æ–≤—ã–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∑–∞–ø—Ä–æ—Å.
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"User {user_id}: Cleared FSM state before showing weather by location.")
        await _get_and_show_weather(bot, message, state, session, coords={"lat": lat, "lon": lon})


@router.message(WeatherStates.waiting_for_city)
async def handle_city_input(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_city_input = message.text.strip() if message.text else ""
    
    if not user_city_input:
        await message.answer("üòî –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º).", reply_markup=get_weather_enter_city_back_keyboard())
        return
    if len(user_city_input) > 100:
        await message.answer("üòî –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_weather_enter_city_back_keyboard())
        return
    # –ù–µ–º–Ω–æ–≥–æ —Å–º—è–≥—á–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ä–∞–∑—Ä–µ—à–∏–≤ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, St. Louis)
    if not re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î\s\-\.\']+$", user_city_input):
        await message.answer("üòî –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_weather_enter_city_back_keyboard())
        return
    
    # –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–Ü–Ω—à–µ –º—ñ—Å—Ç–æ")
    # –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.
    # _get_and_show_weather —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    # await state.clear() # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.
    # –ù–æ _get_and_show_weather –∏ —Ç–∞–∫ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏.

    await _get_and_show_weather(bot, message, state, session, city_input=user_city_input)


@router.callback_query(F.data == CALLBACK_WEATHER_OTHER_CITY)
async def handle_action_other_city(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} requested OTHER city.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ FSM, –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
    # –Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –æ–Ω–∏ –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã.
    # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    await callback.message.edit_text("üåç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard())
    await state.set_state(WeatherStates.waiting_for_city)
    logger.info(f"Set FSM state to WeatherStates.waiting_for_city for user {user_id} (Other City)")
    await callback.answer()


@router.callback_query(F.data == CALLBACK_WEATHER_REFRESH)
async def handle_action_refresh(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    logger.debug(f"User {user_id} requested REFRESH. Current FSM data: {user_data}")
    
    coords = user_data.get("current_coords")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'current_shown_city' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    city_name_to_refresh = user_data.get("current_shown_city") 

    if coords: # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –Ω–∏–º
        logger.info(f"User {user_id} refreshing weather by coords: {coords}")
        # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–∫—Ä–æ–º–µ —Å–∞–º–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ,
        # _get_and_show_weather –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç.
        await _get_and_show_weather(bot, callback, state, session, coords=coords)
    elif city_name_to_refresh: # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –≥–æ—Ä–æ–¥–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –Ω–µ–º—É
        logger.info(f"User {user_id} refreshing weather for city: '{city_name_to_refresh}'")
        await _get_and_show_weather(bot, callback, state, session, city_input=city_name_to_refresh)
    else:
        logger.warning(f"User {user_id} requested REFRESH, but no city_name_to_refresh or coords found in FSM state. Attempting to use preferred city.")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –ë–î –∫–∞–∫ fallback
        db_user = await session.get(User, user_id)
        preferred_city_from_db = db_user.preferred_city if db_user else None
        if preferred_city_from_db:
            logger.info(f"User {user_id}: No specific city in state for refresh, using preferred city '{preferred_city_from_db}' from DB.")
            await _get_and_show_weather(bot, callback, state, session, city_input=preferred_city_from_db)
        else:
            logger.warning(f"User {user_id}: No city in state and no preferred city in DB for refresh. Asking to input city.")
            await callback.message.edit_text("üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:")
            await state.set_state(WeatherStates.waiting_for_city)
            await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏", show_alert=True)


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_YES)
async def handle_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    logger.debug(f"User {user_id} chose YES to save city. FSM data before save: {user_data}")

    # 'city_to_save' –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –≥–æ—Ä–æ–¥–∞ –æ—Ç API, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    city_to_save_in_db = user_data.get("city_to_save")
    # 'city_display_name' - —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤–∏–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏..."
    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ 'city_to_save' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    city_name_for_confirmation_message = user_data.get("city_display_name", city_to_save_in_db)


    if not city_to_save_in_db: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        logger.error(f"User {user_id}: 'city_to_save' is missing in FSM data. Cannot save. Data: {user_data}")
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_weather_actions_keyboard())
        await state.set_state(None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", show_alert=True)
        return

    db_user = await session.get(User, user_id)
    if db_user:
        try:
            db_user.preferred_city = city_to_save_in_db
            session.add(db_user)
            # –ö–æ–º–º–∏—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ middleware
            logger.info(f"User {user_id}: Preferred city '{city_to_save_in_db}' set for DB commit. Display name for confirm: '{city_name_for_confirmation_message}'")
            
            text_after_save = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_name_for_confirmation_message}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ."
            # –í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, preferred_city –≤ FSM —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è,
            # —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ "–û–±–Ω–æ–≤–∏—Ç—å" –∏–ª–∏ "–ü–æ–≥–æ–¥–∞" —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.
            # _get_and_show_weather –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ —Å–∞–º –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î,
            # –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ –≤ —Ç–µ–∫—É—â–µ–º FSM.
            # –û–¥–Ω–∞–∫–æ, `current_shown_city` –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏.
            # `city_to_save` —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç–µ, `current_shown_city` —Ç–æ–∂–µ.
            # `preferred_city_from_db` –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
            await state.update_data(preferred_city_from_db=city_to_save_in_db)
            logger.debug(f"User {user_id}: Updated 'preferred_city_from_db' in FSM state to '{city_to_save_in_db}' after saving.")

            await callback.message.edit_text(text_after_save, reply_markup=get_weather_actions_keyboard())
        except Exception as e:
            logger.exception(f"User {user_id}: DB error while saving preferred city '{city_to_save_in_db}': {e}", exc_info=True)
            await session.rollback() # –Ø–≤–Ω—ã–π –æ—Ç–∫–∞—Ç, –µ—Å–ª–∏ middleware –Ω–µ —É—Å–ø–µ–µ—Ç
            await callback.message.edit_text("üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=get_weather_actions_keyboard())
    else:
        logger.error(f"User {user_id} not found in DB during save city. This shouldn't happen if /start worked.")
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.", reply_markup=get_weather_actions_keyboard())
    
    await state.set_state(None) # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è
    logger.info(f"User {user_id}: Cleared FSM state (was WeatherStates.waiting_for_save_decision) after saving city.")
    await callback.answer("–ú—ñ—Å—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")


@router.callback_query(WeatherStates.waiting_for_save_decision, F.data == CALLBACK_WEATHER_SAVE_CITY_NO)
async def handle_save_city_no(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    logger.info(f"User {user_id} chose NOT to save city. FSM data: {user_data}")

    # city_display_name - —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—ã–ª–æ –≤ –≤–æ–ø—Ä–æ—Å–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
    city_display_name = user_data.get("city_display_name", "–ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ")
    
    # –¢–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ú—ã –µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ü–µ–ª–∏–∫–æ–º –≤ FSM.
    # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∏ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç.
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∞–º—É –ø–æ–≥–æ–¥—É)
    original_weather_message_parts = callback.message.text.split('\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 1)
    weather_part = original_weather_message_parts[0] if original_weather_message_parts else "–î–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É"

    text_after_no_save = f"{weather_part}\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name}</b> –Ω–µ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ)"
    
    await callback.message.edit_text(text_after_no_save, reply_markup=get_weather_actions_keyboard())
    await state.set_state(None) # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è
    logger.info(f"User {user_id}: Cleared FSM state (was WeatherStates.waiting_for_save_decision) after NOT saving city.")
    await callback.answer("–ú—ñ—Å—Ç–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")


@router.callback_query(F.data == CALLBACK_WEATHER_FORECAST_5D)
async def handle_forecast_request(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot): # –î–æ–±–∞–≤–∏–ª–∏ session, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    user_id = callback.from_user.id
    user_data = await state.get_data()
    logger.debug(f"User {user_id} requested 5-day FORECAST. Current FSM data: {user_data}")

    # –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'current_shown_city', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è.
    city_name_for_request = user_data.get("current_shown_city")
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏...")
    city_display_name_for_forecast_message = user_data.get("city_display_name", city_name_for_request)


    if not city_name_for_request:
        logger.warning(f"User {user_id} requested forecast, but 'current_shown_city' not found in FSM state. Data: {user_data}")
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É —Å–ø–æ—á–∞—Ç–∫—É.", show_alert=True)
        return

    await callback.answer("–û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤...") # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    status_message = await callback.message.edit_text(f"‚è≥ –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: <b>{city_display_name_for_forecast_message}</b>...")
    
    forecast_api_data = await get_5day_forecast(bot, city_name_for_request)
    
    if forecast_api_data and str(forecast_api_data.get("cod")) == "200":
        message_text = format_forecast_message(forecast_api_data, city_display_name_for_forecast_message)
        reply_markup = get_forecast_keyboard() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ"
        await status_message.edit_text(message_text, reply_markup=reply_markup)
        logger.info(f"User {user_id}: Sent 5-day forecast for '{city_name_for_request}' (display: '{city_display_name_for_forecast_message}').")
    else:
        error_code = forecast_api_data.get('cod', 'N/A') if forecast_api_data else 'N/A'
        error_api_message = forecast_api_data.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API') if forecast_api_data else '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑\'—î–¥–Ω–∞—Ç–∏—Å—è –∑ API'
        error_text = f"üò• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{city_display_name_for_forecast_message}</b>.\n<i>–ü–æ–º–∏–ª–∫–∞: {error_api_message} (–ö–æ–¥: {error_code})</i>"
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ", –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞.
        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã / —Å –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é".
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞.
        await status_message.edit_text(error_text, reply_markup=get_weather_actions_keyboard()) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
        logger.error(f"User {user_id}: Failed to get 5-day forecast for '{city_name_for_request}'. API Response: {forecast_api_data}")
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–µ –º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ.


@router.callback_query(F.data == CALLBACK_WEATHER_SHOW_CURRENT)
async def handle_show_current_weather(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    logger.debug(f"User {user_id} requested to show CURRENT weather again. FSM data: {user_data}")

    # –ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã - —ç—Ç–æ 'current_shown_city'
    city_to_show_current = user_data.get("current_shown_city")
    coords_to_show_current = user_data.get("current_coords")

    if coords_to_show_current:
        logger.info(f"User {user_id}: Showing current weather by COORDS again: {coords_to_show_current}")
        await _get_and_show_weather(bot, callback, state, session, coords=coords_to_show_current)
    elif city_to_show_current:
        logger.info(f"User {user_id}: Showing current weather for CITY again: '{city_to_show_current}'")
        await _get_and_show_weather(bot, callback, state, session, city_input=city_to_show_current)
    else:
        logger.warning(f"User {user_id}: Requested show current weather, but no city or coords in FSM state. Trying preferred city.")
        # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        db_user = await session.get(User, user_id)
        preferred_city_from_db = db_user.preferred_city if db_user else None
        if preferred_city_from_db:
            logger.info(f"User {user_id}: Showing weather for preferred city '{preferred_city_from_db}' as fallback.")
            await _get_and_show_weather(bot, callback, state, session, city_input=preferred_city_from_db)
        else:
            logger.warning(f"User {user_id}: No city in state and no preferred city. Redirecting to city input.")
            await callback.message.edit_text("üåç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:", reply_markup=get_weather_enter_city_back_keyboard())
            await state.set_state(WeatherStates.waiting_for_city)
            await callback.answer("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ", show_alert=True)

@router.callback_query(F.data == CALLBACK_WEATHER_BACK_TO_MAIN)
async def handle_weather_back_to_main(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} requested back to main menu from weather module. Clearing weather FSM state.")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    await show_main_menu_message(callback) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await callback.answer()