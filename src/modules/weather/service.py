# src/modules/weather/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from aiocache import cached

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"
OWM_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Retry
TZ_KYIV = pytz.timezone('Europe/Kyiv')
MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ OpenWeatherMap
ICON_CODE_TO_EMOJI = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",  # clear sky
    "02d": "üå§Ô∏è", "02n": "‚òÅÔ∏è",  # few clouds
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",  # scattered clouds
    "04d": "üå•Ô∏è", "04n": "‚òÅÔ∏è",  # broken clouds
    "09d": "üå¶Ô∏è", "09n": "üå¶Ô∏è",  # shower rain
    "10d": "üåßÔ∏è", "10n": "üåßÔ∏è",  # rain
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",  # thunderstorm
    "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",  # snow
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è",  # mist
}

@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda *args, **kwargs: f"weather:city:{kwargs.get('city_name', '').lower()}", namespace="weather")
async def get_weather_data(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"OWM Weather response: {data}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM. Response: {await response.text()}")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Ö–µ–Ω–¥–ª–µ—Ä –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                            last_exception = Exception("Invalid JSON response")
                            # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Å—Ä–∞–∑—É, –¥–∞–µ–º —à–∞–Ω—Å –¥—Ä—É–≥–∏–º –ø–æ–ø—ã—Ç–∫–∞–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ContentTypeError
                            # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ ContentTypeError, —Ç–æ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ä—è–¥ –ª–∏ –ø–æ–º–æ–≥—É—Ç
                            return {"cod": 500, "message": "Invalid JSON response"}
                    elif response.status == 404:
                        logger.warning(f"Attempt {attempt + 1}: City '{city_name}' not found by OWM (404).")
                        return {"cod": 404, "message": "City not found"}
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401).")
                        return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: OWM Client Error {response.status}. Response: {error_text[:200]}")
                        return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ Rate Limit
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Server/RateLimit Error {response.status}. Retrying...")
                    else: # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM Weather.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        # –î–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—Ç–æ–∏—Ç —Ä–µ—Ç—Ä–∞–∏—Ç—å, —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
                        return {"cod": response.status, "message": f"Unexpected status {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching weather: {e}", exc_info=True)
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return {"cod": 500, "message": "Internal processing error"}

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next weather retry...")
            await asyncio.sleep(delay)
        else: # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"All {MAX_RETRIES} attempts failed for weather {city_name}. Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": last_exception.status, "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": 504, "message": "Network/Timeout error after retries"} # 504 Gateway Timeout
            elif last_exception: # –ï—Å–ª–∏ –±—ã–ª–æ –∫–∞–∫–æ–µ-—Ç–æ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                 return {"cod": 500, "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": 500, "message": "Failed to get weather data after multiple retries"}
    return None # –≠—Ç–æ—Ç return –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ü–∏–∫–ª —Ä–µ—Ç—Ä–∞–µ–≤ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ

@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda *args, **kwargs: f"weather:coords:{kwargs.get('latitude', 0):.4f}:{kwargs.get('longitude', 0):.4f}", namespace="weather")
async def get_weather_data_by_coords(bot: Bot, latitude: float, longitude: float) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "lat": latitude,
        "lon": longitude,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for coords ({latitude:.4f}, {longitude:.4f})")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"OWM Weather response for coords: {data}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM. Response: {await response.text()}")
                            return {"cod": 500, "message": "Invalid JSON response"}
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401).")
                        return {"cod": 401, "message": "Invalid API key"}
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ã—á–Ω–æ –Ω–µ –¥–∞—é—Ç 404, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    elif 400 <= response.status < 500 and response.status != 429:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: OWM Client Error {response.status} for coords. Response: {error_text[:200]}")
                        return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Server/RateLimit Error {response.status} for coords. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM for coords.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        return {"cod": response.status, "message": f"Unexpected status {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM for coords: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching weather by coords: {e}", exc_info=True)
            return {"cod": 500, "message": "Internal processing error"}

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next weather by coords retry...")
            await asyncio.sleep(delay)
        else:
            logger.error(f"All {MAX_RETRIES} attempts failed for coords ({latitude:.4f}, {longitude:.4f}). Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": last_exception.status, "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": 504, "message": "Network/Timeout error after retries"}
            elif last_exception:
                 return {"cod": 500, "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": 500, "message": "Failed to get weather data by coords after multiple retries"}
    return None # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ

@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda *args, **kwargs: f"forecast:city:{kwargs.get('city_name', '').lower()}", namespace="weather")
async def get_5day_forecast(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": "500", "message": "API key not configured"} # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è `cod` –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_FORECAST_URL

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch 5-day forecast for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"OWM Forecast response: {data}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM Forecast. Response: {await response.text()}")
                            return {"cod": "500", "message": "Invalid JSON response"}
                    elif response.status == 404:
                        logger.warning(f"Attempt {attempt + 1}: City '{city_name}' not found by OWM Forecast (404).")
                        return {"cod": "404", "message": "City not found"}
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401) for Forecast.")
                        return {"cod": "401", "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429:
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: OWM Forecast Client Error {response.status}. Response: {error_text[:200]}")
                        return {"cod": str(response.status), "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Forecast Server/RateLimit Error {response.status}. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM Forecast.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        return {"cod": str(response.status), "message": f"Unexpected status {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM Forecast: {e}. Retrying...")
        except Exception as e: # –û–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching 5-day forecast: {e}", exc_info=True)
            return {"cod": "500", "message": "Internal processing error"} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next forecast retry...")
            await asyncio.sleep(delay)
        else: # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"All {MAX_RETRIES} attempts failed for 5-day forecast {city_name}. Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": str(last_exception.status), "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": "504", "message": "Network/Timeout error after retries"}
            elif last_exception:
                 return {"cod": "500", "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": "500", "message": "Failed to get forecast data after multiple retries"}
    return None # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ

def format_weather_message(data: Dict[str, Any], city_display_name: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ. """
    try:
        cod = data.get("cod")
        if str(cod) != "200": # OWM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cod –∫–∞–∫ int –¥–ª—è —É—Å–ø–µ—Ö–∞, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å str –¥–ª—è –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
            message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API.")
            logger.warning(f"Weather API error for {city_display_name}. Code: {cod}, Message: {message}")
            return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è <b>{city_display_name}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {message} (–ö–æ–¥: {cod})</i>"

        main = data.get("main", {})
        weather_desc = data.get("weather", [{}])[0]
        wind = data.get("wind", {})
        clouds = data.get("clouds", {})
        sys_info = data.get("sys", {})

        temp = main.get("temp")
        feels_like = main.get("feels_like")
        pressure_hpa = main.get("pressure")
        humidity = main.get("humidity")
        description = weather_desc.get("description", "–ù–µ–º–∞—î –æ–ø–∏—Å—É")
        icon_code = weather_desc.get("icon")
        wind_speed = wind.get("speed")
        cloudiness = clouds.get("all")
        sunrise_ts = sys_info.get("sunrise")
        sunset_ts = sys_info.get("sunset")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏–∑ –≥–ü–∞ –≤ –º–º —Ä—Ç.—Å—Ç.
        pressure_mmhg = int(pressure_hpa * 0.750062) if pressure_hpa is not None else "N/A"
        emoji = ICON_CODE_TO_EMOJI.get(icon_code, "")

        sunrise_str, sunset_str = "N/A", "N/A"
        if sunrise_ts:
            sunrise_str = datetime.fromtimestamp(sunrise_ts, tz=TZ_KYIV).strftime('%H:%M')
        if sunset_ts:
            sunset_str = datetime.fromtimestamp(sunset_ts, tz=TZ_KYIV).strftime('%H:%M')

        dt_unix = data.get("dt")
        if dt_unix:
            current_time_str = datetime.fromtimestamp(dt_unix, tz=TZ_KYIV).strftime('%H:%M %d.%m.%Y')
            time_info = f"<i>–î–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–∞ {current_time_str} (–ö–∏—ó–≤)</i>"
        else:
            time_info = ""

        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º. {city_display_name.capitalize()}</b> {emoji}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like}¬∞C)",
            f"üå¨Ô∏è –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
            f"üå´Ô∏è –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç.—Å—Ç.",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {cloudiness}%",
            f"üìù –û–ø–∏—Å: {description.capitalize()}",
            f"üåÖ –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise_str}",
            f"üåá –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset_str}",
            time_info
        ]
        return "\n".join(filter(None, message_lines))

    except Exception as e:
        logger.exception(f"Error formatting weather message for {city_display_name}: {e}", exc_info=True)
        return f"üò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏ –¥–ª—è <b>{city_display_name}</b>."


def format_forecast_message(data: Dict[str, Any], city_display_name: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π. """
    try:
        cod = data.get("cod")
        if str(cod) != "200":
            message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API.")
            logger.warning(f"Forecast API error for {city_display_name}. Code: {cod}, Message: {message}")
            return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{city_display_name}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {message} (–ö–æ–¥: {cod})</i>"

        message_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –º. {city_display_name.capitalize()} –Ω–∞ 5 –¥–Ω—ñ–≤:</b>\n"]
        forecast_list = data.get("list", [])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–Ω—è–º (–ø–æ–ª–¥–µ–Ω—å –∏–ª–∏ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è)
        daily_forecasts = {}
        for item in forecast_list:
            dt_txt = item.get("dt_txt")
            if not dt_txt:
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime –æ–±—ä–µ–∫—Ç, —É—á–∏—Ç—ã–≤–∞—è UTC –æ—Ç API
            dt_obj_utc = datetime.strptime(dt_txt, '%Y-%m-%d %H:%M:%S')
            dt_obj_kyiv = dt_obj_utc.replace(tzinfo=pytz.utc).astimezone(TZ_KYIV)
            
            date_str = dt_obj_kyiv.strftime('%d.%m.%Y (%A)')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            if date_str not in daily_forecasts or \
               (daily_forecasts[date_str].get("hour_diff", 24) > abs(dt_obj_kyiv.hour - 12)):
                
                temp = item.get("main", {}).get("temp")
                weather_desc = item.get("weather", [{}])[0].get("description", "N/A")
                icon_code = item.get("weather", [{}])[0].get("icon")
                emoji = ICON_CODE_TO_EMOJI.get(icon_code, "")
                
                daily_forecasts[date_str] = {
                    "temp": temp,
                    "description": weather_desc,
                    "emoji": emoji,
                    "hour_diff": abs(dt_obj_kyiv.hour - 12) # –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –ø–æ–ª—É–¥–Ω—é
                }

        if not daily_forecasts:
            return "üò• –ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sorted_dates = sorted(daily_forecasts.keys(), key=lambda d: datetime.strptime(d.split(" ")[0], '%d.%m.%Y'))

        for date_str in sorted_dates:
            forecast = daily_forecasts[date_str]
            message_lines.append(
                f"<b>{date_str}:</b> {forecast['temp']:.1f}¬∞C, {forecast['description'].capitalize()} {forecast['emoji']}"
            )
        
        message_lines.append("\n<tg-spoiler>–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏—Å—è.</tg-spoiler>")
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting forecast message for {city_display_name}: {e}", exc_info=True)
        return f"üò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è <b>{city_display_name}</b>."