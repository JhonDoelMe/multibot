# src/modules/weather/service.py (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω AttributeError)

import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
import pytz
from aiogram import Bot

from src import config

logger = logging.getLogger(__name__)
# ... (–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ ICON_CODE_TO_EMOJI) ...
OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"; OWM_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"; TZ_KYIV = pytz.timezone('Europe/Kyiv'); MAX_RETRIES = 3; INITIAL_DELAY = 1; ICON_CODE_TO_EMOJI = {"01d": "‚òÄÔ∏è", "01n": "üåô", "02d": "üå§Ô∏è", "02n": "‚òÅÔ∏è", "03d": "‚òÅÔ∏è","03n": "‚òÅÔ∏è", "04d": "üå•Ô∏è", "04n": "‚òÅÔ∏è", "09d": "üå¶Ô∏è", "09n": "üå¶Ô∏è","10d": "üåßÔ∏è", "10n": "üåßÔ∏è", "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è", "13d": "‚ùÑÔ∏è","13n": "‚ùÑÔ∏è", "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"}

async def get_weather_data(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    if not config.WEATHER_API_KEY: logger.error("..."); return {"cod": 500, "message": "..."}
    params = {"q": city_name, "appid": config.WEATHER_API_KEY, "units": "metric", "lang": "uk"}
    last_exception = None; api_url = OWM_API_URL
    # <<< –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä >>>
    async with bot.session as session:
        for attempt in range(MAX_RETRIES):
            try:
                logger.debug(f"Attempt {attempt + 1} weather for {city_name}")
                # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º session.get >>>
                async with session.get(api_url, params=params, timeout=10) as response:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ response/–æ—à–∏–±–æ–∫/retry) ...
                    if response.status == 200:
                         try: data = await response.json(); return data
                         except aiohttp.ContentTypeError: return {"cod": 500, "message": "..."}
                    # ... (404, 401, 4xx) ...
                    elif response.status == 404: return {"cod": 404, "message": "..."}
                    elif response.status == 401: return {"cod": 401, "message": "..."}
                    elif 400 <= response.status < 500: return {"cod": response.status, "message": "..."}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(...); logger.warning("... Retrying...")
                    else: last_exception = Exception(...); logger.error("... Unexpected status ...")
            except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
            except Exception as e: logger.exception(f"... Unexpected error: {e}"); return {"cod": 500, "message": "..."}
            if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); await asyncio.sleep(delay)
            else: logger.error(f"All attempts failed... Last error: {last_exception!r}"); # ... (return error) ...
    return {"cod": 500, "message": "Failed after all retries"}

async def get_weather_data_by_coords(bot: Bot, latitude: float, longitude: float) -> Optional[Dict[str, Any]]:
    if not config.WEATHER_API_KEY: logger.error("..."); return {"cod": 500, "message": "..."}
    params = {"lat": latitude, "lon": longitude, "appid": config.WEATHER_API_KEY, "units": "metric", "lang": "uk"}
    last_exception = None; api_url = OWM_API_URL
    # <<< –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä >>>
    async with bot.session as session:
        for attempt in range(MAX_RETRIES):
            try:
                logger.debug(f"Attempt {attempt + 1} weather for coords")
                # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º session.get >>>
                async with session.get(api_url, params=params, timeout=10) as response:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ response/–æ—à–∏–±–æ–∫/retry) ...
                    if response.status == 200:
                         try: data = await response.json(); return data
                         except aiohttp.ContentTypeError: return {"cod": 500, "message": "..."}
                    elif response.status == 401: return {"cod": 401, "message": "..."}
                    elif 400 <= response.status < 500 and response.status != 429: return {"cod": response.status, "message": "..."}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(...); logger.warning("... Retrying...")
                    else: last_exception = Exception(...); logger.error("... Unexpected status ...")
            except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
            except Exception as e: logger.exception(f"... Unexpected error: {e}"); return {"cod": 500, "message": "..."}
            if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); await asyncio.sleep(delay)
            else: logger.error(f"All attempts failed... Last error: {last_exception!r}"); # ... (return error) ...
    return {"cod": 500, "message": "Failed after all retries"}

async def get_5day_forecast(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    if not config.WEATHER_API_KEY: logger.error("..."); return {"cod": "500", "message": "..."}
    params = {"q": city_name, "appid": config.WEATHER_API_KEY, "units": "metric", "lang": "uk"}
    last_exception = None; api_url = OWM_FORECAST_URL
    # <<< –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä >>>
    async with bot.session as session:
        for attempt in range(MAX_RETRIES):
            try:
                logger.debug(f"Attempt {attempt + 1} forecast for {city_name}")
                # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º session.get >>>
                async with session.get(api_url, params=params, timeout=15) as response:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ response/–æ—à–∏–±–æ–∫/retry) ...
                     if response.status == 200:
                         try: data = await response.json(); return data
                         except aiohttp.ContentTypeError: return {"cod": "500", "message": "..."}
                     elif response.status == 404: return {"cod": "404", "message": "..."}
                     elif response.status == 401: return {"cod": "401", "message": "..."}
                     elif 400 <= response.status < 500 and response.status != 429: return {"cod": str(response.status), "message": "..."}
                     elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(...); logger.warning("... Retrying...")
                     else: last_exception = Exception(...); logger.error("... Unexpected status ...")
            except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
            except Exception as e: logger.exception(f"... Unexpected error: {e}"); return {"cod": "500", "message": "..."}
            if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); await asyncio.sleep(delay)
            else: logger.error(f"All attempts failed... Last error: {last_exception!r}"); # ... (return error) ...
    return {"cod": "500", "message": "Failed after all forecast retries"}

# --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def format_weather_message(weather_data: Dict[str, Any], city_display_name: str) -> str:
    # ... (–∫–æ–¥ –∫–∞–∫ –≤ –æ—Ç–≤–µ—Ç–µ #121) ...
    try: # ... (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö) ...
        icon_code=weather_info.get("icon"); icon_emoji=ICON_CODE_TO_EMOJI.get(icon_code, "‚ùì") # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ...
        return "\n".join(message_lines)
    except Exception as e: logger.exception(...); return "..."

def format_forecast_message(forecast_data: Dict[str, Any], city_display_name: str) -> str:
    # ... (–∫–æ–¥ –∫–∞–∫ –≤ –æ—Ç–≤–µ—Ç–µ #121) ...
    try: # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ cod='200') ...
         forecast_list = forecast_data.get("list"); # ... (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º) ...
         for date_str in sorted_dates: # ... (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è) ...
              message_lines.append(...)
         return "\n".join(message_lines)
    except Exception as e: logger.exception(...); return "..."