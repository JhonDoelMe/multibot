# src/modules/weather/service.py

import logging
import aiohttp
from typing import Optional, Dict, Any

from src import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è OpenWeatherMap API
OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"
# –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å One Call API (—Ç—Ä–µ–±—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–µ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞)
# OWM_ONECALL_API_URL = "https://api.openweathermap.org/data/3.0/onecall"

async def get_weather_data(city_name: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å OpenWeatherMap.

    Args:
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return None

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",  # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
        "lang": "uk",       # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ (uk - —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, ru - —Ä—É—Å—Å–∫–∏–π, en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    }

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        async with aiohttp.ClientSession() as session:
            async with session.get(OWM_API_URL, params=params) as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status == 200:
                    data = await response.json()
                    logger.debug(f"OpenWeatherMap response for {city_name}: {data}")
                    return data
                elif response.status == 404:
                    logger.warning(f"City '{city_name}' not found by OpenWeatherMap.")
                    return {"cod": 404, "message": "City not found"} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –æ—à–∏–±–∫–∏
                elif response.status == 401:
                    logger.error("Invalid OpenWeatherMap API key or key blocked.")
                    return {"cod": 401, "message": "Invalid API key"}
                else:
                    logger.error(f"OpenWeatherMap API error: Status {response.status}, Response: {await response.text()}")
                    return {"cod": response.status, "message": "API error"}

    except aiohttp.ClientConnectorError as e:
        logger.error(f"Network error connecting to OpenWeatherMap: {e}")
        return {"cod": 503, "message": "Network error"} # Service Unavailable
    except Exception as e:
        logger.exception(f"An unexpected error occurred while fetching weather for {city_name}: {e}")
        return {"cod": 500, "message": "Internal error"} # Internal Server Error


def format_weather_message(data: Dict[str, Any], city_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç OpenWeatherMap API.
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–µ).

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø–æ–≥–æ–¥–µ.
    """
    try:
        main_data = data.get("main", {})
        weather_info = data.get("weather", [{}])[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã
        wind_data = data.get("wind", {})
        cloud_data = data.get("clouds", {})

        temp = main_data.get("temp", "N/A")
        feels_like = main_data.get("feels_like", "N/A")
        humidity = main_data.get("humidity", "N/A")
        pressure_hpa = main_data.get("pressure") # –î–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ü–∞
        # –ü–µ—Ä–µ–≤–µ–¥–µ–º –≥–ü–∞ –≤ –º–º —Ä—Ç. —Å—Ç. (1 –≥–ü–∞ ‚âà 0.750062 –º–º —Ä—Ç. —Å—Ç.)
        pressure_mmhg = round(pressure_hpa * 0.750062) if pressure_hpa else "N/A"

        description = weather_info.get("description", "–Ω–µ–≤—ñ–¥–æ–º–æ").capitalize()
        # Emoji –¥–ª—è –ø–æ–≥–æ–¥—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        weather_icons_map = {
             "clear sky": "‚òÄÔ∏è", "few clouds": "üå§Ô∏è", "scattered clouds": "‚òÅÔ∏è",
             "broken clouds": "‚òÅÔ∏è", "overcast clouds": "üå•Ô∏è", "shower rain": "üå¶Ô∏è",
             "rain": "üåßÔ∏è", "light rain": "üåßÔ∏è", "thunderstorm": "‚õàÔ∏è", "snow": "‚ùÑÔ∏è", "mist": "üå´Ô∏è"
        }
        # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ—Ç
        icon_emoji = "‚ùì"
        for key, emoji in weather_icons_map.items():
            if key in description.lower():
                icon_emoji = emoji
                break

        wind_speed = wind_data.get("speed", "N/A")
        wind_deg = wind_data.get("deg") # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
        def deg_to_compass(num):
            if num is None: return ""
            val=int((num/22.5)+.5)
            arr=["–ü–Ω","–ü–Ω-–ü–Ω-–°—Ö","–ü–Ω-–°—Ö","–°—Ö-–ü–Ω-–°—Ö","–°—Ö","–°—Ö-–ü–¥-–°—Ö","–ü–¥-–°—Ö","–ü–¥-–ü–¥-–°—Ö","–ü–¥","–ü–¥-–ü–¥-–ó—Ö","–ü–¥-–ó—Ö","–ó—Ö-–ü–¥-–ó—Ö","–ó—Ö","–ó—Ö-–ü–Ω-–ó—Ö","–ü–Ω-–ó—Ö","–ü–Ω-–ü–Ω-–ó—Ö"]
            return arr[(val % 16)]
        wind_direction = deg_to_compass(wind_deg)

        clouds_percent = cloud_data.get("all", "N/A") # –û–±–ª–∞—á–Ω–æ—Å—Ç—å –≤ %

        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—á–Ω–µ–µ
        response_city_name = data.get("name", city_name.capitalize())

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ç–µ–≥–∞–º–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º. {response_city_name}:</b>\n",
            f"{icon_emoji} {description}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like}¬∞C)",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
            f"üí® –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å {wind_direction}",
            f"üß≠ –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç.—Å—Ç.",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds_percent}%"
        ]
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting weather data for {city_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º. {city_name.capitalize()}."