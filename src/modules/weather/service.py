# src/modules/weather/service.py

import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime
import pytz

from src import config

logger = logging.getLogger(__name__)

OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"
TZ_KYIV = pytz.timezone('Europe/Kyiv')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES = 3
INITIAL_DELAY = 1 # –°–µ–∫—É–Ω–¥–∞

# --- –ù–û–í–´–ô –°–õ–û–í–ê–†–¨: –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ OWM -> –≠–º–æ–¥–∑–∏ ---
# –°–º. https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2
ICON_CODE_TO_EMOJI = {
    # –î–µ–Ω—å
    "01d": "‚òÄÔ∏è", # clear sky
    "02d": "üå§Ô∏è", # few clouds
    "03d": "‚òÅÔ∏è", # scattered clouds
    "04d": "‚òÅÔ∏è", # broken clouds (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ, —á—Ç–æ –∏ scattered)
    "09d": "üå¶Ô∏è", # shower rain
    "10d": "üåßÔ∏è", # rain
    "11d": "‚õàÔ∏è", # thunderstorm
    "13d": "‚ùÑÔ∏è", # snow
    "50d": "üå´Ô∏è", # mist
    # –ù–æ—á—å (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ)
    "01n": "üåô", # clear sky
    "02n": "‚òÅÔ∏è", # few clouds # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞–∫–æ –±–µ–∑ —Å–æ–ª–Ω—Ü–∞
    "03n": "‚òÅÔ∏è", # scattered clouds
    "04n": "‚òÅÔ∏è", # broken clouds
    "09n": "üå¶Ô∏è", # shower rain
    "10n": "üåßÔ∏è", # rain
    "11n": "‚õàÔ∏è", # thunderstorm
    "13n": "‚ùÑÔ∏è", # snow
    "50n": "üå´Ô∏è", # mist
}

async def get_weather_data(city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å OpenWeatherMap —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏. """
    # ... (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ get_weather_data –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô —Å –æ—Ç–≤–µ—Ç–∞ #88) ...
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}
    params = {"q": city_name, "appid": config.WEATHER_API_KEY, "units": "metric", "lang": "uk"}
    last_exception = None
    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(OWM_API_URL, params=params, timeout=10) as response:
                    if response.status == 200:
                        try: data = await response.json(); logger.debug(f"OWM response: {data}"); return data
                        except aiohttp.ContentTypeError: logger.error(f"... Failed to decode JSON ..."); return {"cod": 500, "message": "Invalid JSON response"}
                    elif response.status == 404: logger.warning(f"... City '{city_name}' not found (404)."); return {"cod": 404, "message": "City not found"}
                    elif response.status == 401: logger.error(f"... Invalid OWM API key (401)."); return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500: error_text = await response.text(); logger.error(f"... OWM Client Error {response.status}. Resp: {error_text[:200]}"); return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status}"); logger.warning(f"... OWM Server/RateLimit Error {response.status}. Retrying...")
                    else: logger.error(f"... Unexpected status {response.status} from OWM."); last_exception = Exception(f"Unexpected status {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
        except Exception as e: logger.exception(f"... Unexpected error: {e}", exc_info=True); return {"cod": 500, "message": "Internal processing error"}
        if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); logger.info(f"Waiting {delay}s before next retry..."); await asyncio.sleep(delay)
        else:
             logger.error(f"All {MAX_RETRIES} attempts failed for city {city_name}. Last error: {last_exception!r}")
             if isinstance(last_exception, aiohttp.ClientResponseError): return {"cod": last_exception.status, "message": f"Server error {last_exception.status} after retries"}
             elif isinstance(last_exception, aiohttp.ClientConnectorError): return {"cod": 503, "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError): return {"cod": 504, "message": "Timeout error after retries"}
             else: return {"cod": 500, "message": "Failed after multiple retries"}
    return {"cod": 500, "message": "Failed after all retries"}


# --- –ò–ó–ú–ï–ù–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
def format_weather_message(weather_data: Dict[str, Any], city_display_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥ –∏–∫–æ–Ω–∫–∏ –æ—Ç API –¥–ª—è —ç–º–æ–¥–∑–∏.
    """
    try:
        main_data = weather_data.get("main", {})
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã (–æ–±—ã—á–Ω–æ –æ–Ω –æ–¥–∏–Ω)
        weather_info = weather_data.get("weather", [{}])[0]
        wind_data = weather_data.get("wind", {})
        cloud_data = weather_data.get("clouds", {})

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ N/A
        temp = main_data.get("temp")
        feels_like = main_data.get("feels_like")
        humidity = main_data.get("humidity")
        pressure_hpa = main_data.get("pressure")
        pressure_mmhg = round(pressure_hpa * 0.750062) if pressure_hpa is not None else "N/A"
        wind_speed = wind_data.get("speed")
        wind_deg = wind_data.get("deg")
        clouds_percent = cloud_data.get("all", "N/A")

        # --- –õ–æ–≥–∏–∫–∞ –≠–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ ---
        description_uk = weather_info.get("description", "–Ω–µ–≤—ñ–¥–æ–º–æ").capitalize() # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
        icon_code = weather_info.get("icon") # –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ (e.g., "01d", "10n")
        icon_emoji = ICON_CODE_TO_EMOJI.get(icon_code, "‚ùì") # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –≠–º–æ–¥–∑–∏ ---

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
        def deg_to_compass(num):
            if num is None: return ""
            try:
                val = int((float(num) / 22.5) + 0.5)
                arr = ["–ü–Ω","–ü–Ω-–ü–Ω-–°—Ö","–ü–Ω-–°—Ö","–°—Ö-–ü–Ω-–°—Ö","–°—Ö","–°—Ö-–ü–¥-–°—Ö","–ü–¥-–°—Ö","–ü–¥-–ü–¥-–°—Ö","–ü–¥","–ü–¥-–ü–¥-–ó—Ö","–ü–¥-–ó—Ö","–ó—Ö-–ü–¥-–ó—Ö","–ó—Ö","–ó—Ö-–ü–Ω-–ó—Ö","–ü–Ω-–ó—Ö","–ü–Ω-–ü–Ω-–ó—Ö"]
                return arr[(val % 16)]
            except (ValueError, TypeError): return ""
        wind_direction = deg_to_compass(wind_deg)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        display_name_formatted = city_display_name.capitalize()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º. {display_name_formatted}:</b>\n",
            f"{icon_emoji} {description_uk}", # –ò—Å–ø–æ–ª—å–∑—É–µ–º description_uk
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like:.1f}¬∞C)" if temp is not None and feels_like is not None else "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: N/A",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%" if humidity is not None else "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: N/A",
            f"üí® –í—ñ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å {wind_direction}" if wind_speed is not None else "üí® –í—ñ—Ç–µ—Ä: N/A",
            f"üß≠ –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç.—Å—Ç." if pressure_mmhg != "N/A" else "üß≠ –¢–∏—Å–∫: N/A",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds_percent}%" if clouds_percent != "N/A" else "‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: N/A"
        ]
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting weather data for {city_display_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º. {city_display_name.capitalize()}."
    # --- –î–û–ë–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–ì–ù–û–ó–ê ---

OWM_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"

async def get_5day_forecast(city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (3-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª) —Å OpenWeatherMap. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
        # "cnt": 40 # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
    last_exception = None
    api_url = OWM_FORECAST_URL # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –ø—Ä–æ–≥–Ω–æ–∑–∞

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch 5-day forecast for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=15) as response: # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                    if response.status == 200:
                        try: data = await response.json(); logger.debug(f"OWM Forecast response: {data}"); return data # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
                        except aiohttp.ContentTypeError: logger.error(f"... Failed to decode JSON ..."); return {"cod": 500, "message": "Invalid JSON response"}
                    elif response.status == 404: logger.warning(f"... City '{city_name}' not found for forecast (404)."); return {"cod": 404, "message": "City not found"}
                    elif response.status == 401: logger.error(f"... Invalid OWM API key (401)."); return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500: error_text = await response.text(); logger.error(f"... OWM Client Error {response.status}. Resp: {error_text[:200]}"); return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status}"); logger.warning(f"... OWM Server/RateLimit Error {response.status}. Retrying...")
                    else: logger.error(f"... Unexpected status {response.status} from OWM Forecast."); last_exception = Exception(f"Unexpected status {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
        except Exception as e: logger.exception(f"... Unexpected error fetching forecast: {e}", exc_info=True); return {"cod": 500, "message": "Internal processing error"}
        if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); logger.info(f"Waiting {delay}s before next forecast retry..."); await asyncio.sleep(delay)
        else:
             logger.error(f"All {MAX_RETRIES} attempts failed for forecast {city_name}. Last error: {last_exception!r}")
             if isinstance(last_exception, aiohttp.ClientResponseError): return {"cod": last_exception.status, "message": f"Server error {last_exception.status} after retries"}
             # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–∞–∫ –≤ get_weather_data) ...
             elif isinstance(last_exception, aiohttp.ClientConnectorError): return {"cod": 503, "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError): return {"cod": 504, "message": "Timeout error after retries"}
             else: return {"cod": 500, "message": "Failed after multiple retries"}
    return {"cod": 500, "message": "Failed after all forecast retries"}


def format_forecast_message(forecast_data: Dict[str, Any], city_display_name: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º (—É–ø—Ä–æ—â–µ–Ω–Ω–æ). """
    try:
        forecast_list = forecast_data.get("list")
        if not forecast_list:
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name}."

        daily_forecasts = {} # –°–ª–æ–≤–∞—Ä—å {–¥–∞—Ç–∞: {"temps": [], "icons": [], "descs": []}}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        for item in forecast_list:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ö–∏–µ–≤–∞
            dt_utc = datetime.utcfromtimestamp(item.get('dt', 0))
            dt_kyiv = dt_utc.replace(tzinfo=pytz.utc).astimezone(TZ_KYIV)
            date_str = dt_kyiv.strftime('%Y-%m-%d') # –î–∞—Ç–∞ –∫–∞–∫ –∫–ª—é—á

            if date_str not in daily_forecasts:
                 # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5
                 if len(daily_forecasts) >= 5:
                      break
                 daily_forecasts[date_str] = {"temps": [], "icons": set(), "descs": set()}

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –∫–æ–¥—ã –∏–∫–æ–Ω–æ–∫/–æ–ø–∏—Å–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
            temp = item.get("main", {}).get("temp")
            if temp is not None:
                 daily_forecasts[date_str]["temps"].append(temp)

            icon_code = item.get("weather", [{}])[0].get("icon")
            if icon_code:
                 daily_forecasts[date_str]["icons"].add(icon_code[:2]) # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ –ø–æ–≥–æ–¥—ã (01, 02, 10...), –±–µ–∑ d/n

            desc = item.get("weather", [{}])[0].get("description")
            if desc:
                 daily_forecasts[date_str]["descs"].add(desc.capitalize())

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name}:</b>\n"]
        if not daily_forecasts:
             return f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name}."

        for date_str, data in daily_forecasts.items():
             try:
                 # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
                 date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                 day_month = date_obj.strftime('%d.%m')
                 day_name = date_obj.strftime('%a').capitalize() # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (—É–∫—Ä.)

                 # –°—á–∏—Ç–∞–µ–º –º–∏–Ω/–º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                 min_temp = min(data["temps"]) if data["temps"] else "N/A"
                 max_temp = max(data["temps"]) if data["temps"] else "N/A"

                 # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–º–æ–¥–∑–∏ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è –∫–æ–¥ –∏–∫–æ–Ω–∫–∏)
                 icon_emoji = "‚ùì"
                 if data["icons"]:
                      # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –¥–Ω–µ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É (d), –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª—é–±—É—é
                      day_icon = next((f"{code}d" for code in data["icons"] if f"{code}d" in ICON_CODE_TO_EMOJI), None)
                      if day_icon:
                           icon_emoji = ICON_CODE_TO_EMOJI.get(day_icon, "‚ùì")
                      else: # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –Ω–æ—á–Ω—É—é/–¥–Ω–µ–≤–Ω—É—é
                           any_icon_code = list(data["icons"])[0]
                           icon_day = ICON_CODE_TO_EMOJI.get(f"{any_icon_code}d", "‚ùì")
                           icon_night = ICON_CODE_TO_EMOJI.get(f"{any_icon_code}n", icon_day) # –ï—Å–ª–∏ –Ω–æ—á–Ω–æ–π –Ω–µ—Ç, –±–µ—Ä–µ–º –¥–Ω–µ–≤–Ω—É—é
                           icon_emoji = icon_day if icon_day != "‚ùì" else icon_night


                 # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                 temp_str = f"{max_temp:.0f}¬∞C / {min_temp:.0f}¬∞C" if min_temp != "N/A" else "N/A"

                 message_lines.append(f"<b>{day_name} ({day_month}):</b> {temp_str} {icon_emoji}")

             except Exception as e:
                 logger.error(f"Error formatting forecast for date {date_str}: {e}")
                 continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting forecast message for {city_display_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name}."