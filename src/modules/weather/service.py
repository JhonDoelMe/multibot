# src/modules/weather/service.py

import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta # –î–æ–±–∞–≤–∏–ª–∏ timedelta
import pytz

from src import config # –î–ª—è API –∫–ª—é—á–∞

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"
OWM_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ---
async def get_weather_data_by_coords(latitude: float, longitude: float) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å OpenWeatherMap —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "lat": latitude, # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º lat
        "lon": longitude, # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º lon
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for coords ({latitude}, {longitude})")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=10) as response:
                    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ get_weather_data
                    if response.status == 200:
                        try: data = await response.json(); logger.debug(f"OWM Weather response: {data}"); return data
                        except aiohttp.ContentTypeError: logger.error(f"... Failed to decode JSON ..."); return {"cod": 500, "message": "Invalid JSON response"}
                    # –î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –±—ã–≤–∞–µ—Ç 404 "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                    elif response.status == 401: logger.error(f"... Invalid OWM API key (401)."); return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429: error_text = await response.text(); logger.error(f"... OWM Client Error {response.status}. Resp: {error_text[:200]}"); return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status}"); logger.warning(f"... OWM Server/RateLimit Error {response.status}. Retrying...")
                    else: logger.error(f"... Unexpected status {response.status} from OWM Weather."); last_exception = Exception(f"Unexpected status {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
        except Exception as e: logger.exception(f"... Unexpected error fetching weather by coords: {e}", exc_info=True); return {"cod": 500, "message": "Internal processing error"}
        if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); logger.info(f"Waiting {delay}s before next weather retry..."); await asyncio.sleep(delay)
        else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –∫–∞–∫ –≤ get_weather_data) ...
             logger.error(f"All {MAX_RETRIES} attempts failed for weather coords ({latitude}, {longitude}). Last error: {last_exception!r}")
             if isinstance(last_exception, aiohttp.ClientResponseError): return {"cod": last_exception.status, "message": f"Server error {last_exception.status} after retries"}
             elif isinstance(last_exception, aiohttp.ClientConnectorError): return {"cod": 503, "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError): return {"cod": 504, "message": "Timeout error after retries"}
             else: return {"cod": 500, "message": "Failed after multiple retries"}
    return {"cod": 500, "message": "Failed after all weather retries"}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Retry
TZ_KYIV = pytz.timezone('Europe/Kyiv')
MAX_RETRIES = 3
INITIAL_DELAY = 1 # –°–µ–∫—É–Ω–¥–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ OpenWeatherMap
ICON_CODE_TO_EMOJI = {
    # –î–µ–Ω—å
    "01d": "‚òÄÔ∏è", # clear sky
    "02d": "üå§Ô∏è", # few clouds
    "03d": "‚òÅÔ∏è", # scattered clouds
    "04d": "‚òÅÔ∏è", # broken clouds (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ, —á—Ç–æ –∏ scattered)
    "09d": "üå¶Ô∏è", # shower rain
    "10d": "üåßÔ∏è", # rain
    "11d": "‚õàÔ∏è", # thunderstorm
    "13d": "‚ùÑÔ∏è", # snow
    "50d": "üå´Ô∏è", # mist
    # –ù–æ—á—å (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ)
    "01n": "üåô", # clear sky
    "02n": "‚òÅÔ∏è", # few clouds # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞–∫–æ –±–µ–∑ —Å–æ–ª–Ω—Ü–∞
    "03n": "‚òÅÔ∏è", # scattered clouds
    "04n": "‚òÅÔ∏è", # broken clouds
    "09n": "üå¶Ô∏è", # shower rain
    "10n": "üåßÔ∏è", # rain
    "11n": "‚õàÔ∏è", # thunderstorm
    "13n": "‚ùÑÔ∏è", # snow
    "50n": "üå´Ô∏è", # mist
}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã ---
async def get_weather_data(city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ —Å OpenWeatherMap —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch current weather for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=10) as response:
                    if response.status == 200:
                        try: data = await response.json(); logger.debug(f"OWM Weather response: {data}"); return data
                        except aiohttp.ContentTypeError: logger.error(f"... Failed to decode JSON ..."); return {"cod": 500, "message": "Invalid JSON response"}
                    elif response.status == 404: logger.warning(f"... City '{city_name}' not found (404)."); return {"cod": 404, "message": "City not found"}
                    elif response.status == 401: logger.error(f"... Invalid OWM API key (401)."); return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500: error_text = await response.text(); logger.error(f"... OWM Client Error {response.status}. Resp: {error_text[:200]}"); return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status}"); logger.warning(f"... OWM Server/RateLimit Error {response.status}. Retrying...")
                    else: logger.error(f"... Unexpected status {response.status} from OWM Weather."); last_exception = Exception(f"Unexpected status {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error: {e}. Retrying...")
        except Exception as e: logger.exception(f"... Unexpected error fetching weather: {e}", exc_info=True); return {"cod": 500, "message": "Internal processing error"}
        if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); logger.info(f"Waiting {delay}s before next weather retry..."); await asyncio.sleep(delay)
        else:
             logger.error(f"All {MAX_RETRIES} attempts failed for weather {city_name}. Last error: {last_exception!r}")
             if isinstance(last_exception, aiohttp.ClientResponseError): return {"cod": last_exception.status, "message": f"Server error {last_exception.status} after retries"}
             elif isinstance(last_exception, aiohttp.ClientConnectorError): return {"cod": 503, "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError): return {"cod": 504, "message": "Timeout error after retries"}
             else: return {"cod": 500, "message": "Failed after multiple retries"}
    return {"cod": 500, "message": "Failed after all weather retries"}

# --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã ---
def format_weather_message(weather_data: Dict[str, Any], city_display_name: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –∏–∫–æ–Ω–∫–∏ –∏ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    try:
        main_data = weather_data.get("main", {})
        weather_info = weather_data.get("weather", [{}])[0]
        wind_data = weather_data.get("wind", {})
        cloud_data = weather_data.get("clouds", {})

        temp = main_data.get("temp")
        feels_like = main_data.get("feels_like")
        humidity = main_data.get("humidity")
        pressure_hpa = main_data.get("pressure")
        pressure_mmhg = round(pressure_hpa * 0.750062) if pressure_hpa is not None else "N/A"
        wind_speed = wind_data.get("speed")
        wind_deg = wind_data.get("deg")
        clouds_percent = cloud_data.get("all", "N/A")

        description_uk = weather_info.get("description", "–Ω–µ–≤—ñ–¥–æ–º–æ").capitalize()
        icon_code = weather_info.get("icon")
        icon_emoji = ICON_CODE_TO_EMOJI.get(icon_code, "‚ùì") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å ICON_CODE_TO_EMOJI

        def deg_to_compass(num):
            if num is None: return ""
            try:
                val = int((float(num) / 22.5) + 0.5)
                arr = ["–ü–Ω","–ü–Ω-–ü–Ω-–°—Ö","–ü–Ω-–°—Ö","–°—Ö-–ü–Ω-–°—Ö","–°—Ö","–°—Ö-–ü–¥-–°—Ö","–ü–¥-–°—Ö","–ü–¥-–ü–¥-–°—Ö","–ü–¥","–ü–¥-–ü–¥-–ó—Ö","–ü–¥-–ó—Ö","–ó—Ö-–ü–¥-–ó—Ö","–ó—Ö","–ó—Ö-–ü–Ω-–ó—Ö","–ü–Ω-–ó—Ö","–ü–Ω-–ü–Ω-–ó—Ö"]
                return arr[(val % 16)]
            except (ValueError, TypeError): return ""
        wind_direction = deg_to_compass(wind_deg)

        display_name_formatted = city_display_name.capitalize()

        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º. {display_name_formatted}:</b>\n",
            f"{icon_emoji} {description_uk}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:+.1f}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like:+.1f}¬∞C)" if temp is not None and feels_like is not None else "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: N/A",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%" if humidity is not None else "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: N/A",
            f"üí® –í—ñ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å {wind_direction}" if wind_speed is not None else "üí® –í—ñ—Ç–µ—Ä: N/A",
            f"üß≠ –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç.—Å—Ç." if pressure_mmhg != "N/A" else "üß≠ –¢–∏—Å–∫: N/A",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds_percent}%" if clouds_percent != "N/A" else "‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: N/A"
        ]
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting weather data for {city_display_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º. {city_display_name.capitalize()}."

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π ---
async def get_5day_forecast(city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (3-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª) —Å OpenWeatherMap —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": "500", "message": "API key not configured"} # API –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è cod

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_FORECAST_URL # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –ø—Ä–æ–≥–Ω–æ–∑–∞

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch 5-day forecast for {city_name}")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=15) as response:
                    if response.status == 200:
                        try: data = await response.json(); logger.debug(f"OWM Forecast response (status {response.status}): {str(data)[:500]}..."); return data # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
                        except aiohttp.ContentTypeError: logger.error(f"... Failed to decode JSON forecast ..."); return {"cod": "500", "message": "Invalid JSON response"}
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API –ø—Ä–æ–≥–Ω–æ–∑–∞ (cod - —Å—Ç—Ä–æ–∫–∞!)
                    elif response.status == 404: logger.warning(f"... City '{city_name}' not found for forecast (404)."); return {"cod": "404", "message": "City not found"}
                    elif response.status == 401: logger.error(f"... Invalid OWM API key (401)."); return {"cod": "401", "message": "Invalid API key"}
                    elif 400 <= response.status < 500: error_text = await response.text(); logger.error(f"... OWM Forecast Client Error {response.status}. Resp: {error_text[:200]}"); return {"cod": str(response.status), "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status}"); logger.warning(f"... OWM Forecast Server/RateLimit Error {response.status}. Retrying...")
                    else: logger.error(f"... Unexpected status {response.status} from OWM Forecast."); last_exception = Exception(f"Unexpected status {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e: last_exception = e; logger.warning(f"... Network error forecast: {e}. Retrying...")
        except Exception as e: logger.exception(f"... Unexpected error fetching forecast: {e}", exc_info=True); return {"cod": "500", "message": "Internal processing error"}
        if attempt < MAX_RETRIES - 1: delay = INITIAL_DELAY * (2 ** attempt); logger.info(f"Waiting {delay}s before next forecast retry..."); await asyncio.sleep(delay)
        else:
             logger.error(f"All {MAX_RETRIES} attempts failed for forecast {city_name}. Last error: {last_exception!r}")
             if isinstance(last_exception, aiohttp.ClientResponseError): return {"cod": str(last_exception.status), "message": f"Server error {last_exception.status} after retries"}
             elif isinstance(last_exception, aiohttp.ClientConnectorError): return {"cod": "503", "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError): return {"cod": "504", "message": "Timeout error after retries"}
             else: return {"cod": "500", "message": "Failed after multiple retries"}
    return {"cod": "500", "message": "Failed after all forecast retries"}

# --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
def format_forecast_message(forecast_data: Dict[str, Any], city_display_name: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º. """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞
        if forecast_data.get("cod") != "200":
             api_message = forecast_data.get("message", "–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É")
             logger.warning(f"API returned error for forecast: {forecast_data.get('cod')} - {api_message}")
             return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name.capitalize()}: {api_message}"

        forecast_list = forecast_data.get("list")
        if not forecast_list:
            return f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name.capitalize()}."

        daily_forecasts = {} # –°–ª–æ–≤–∞—Ä—å {–¥–∞—Ç–∞_YYYY-MM-DD: {"temps": [], "icons": set()}}
        processed_dates = set() # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –ö–∏–µ–≤–µ
        today_kyiv = datetime.now(TZ_KYIV).date()

        for item in forecast_list:
            dt_utc = datetime.utcfromtimestamp(item.get('dt', 0))
            dt_kyiv = dt_utc.replace(tzinfo=pytz.utc).astimezone(TZ_KYIV)
            item_date = dt_kyiv.date()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–µ
            if item_date < today_kyiv:
                 continue
            if len(processed_dates) >= 5 and item_date not in processed_dates: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–Ω—è–º–∏
                 break

            date_str = item_date.strftime('%Y-%m-%d')

            if date_str not in daily_forecasts:
                 daily_forecasts[date_str] = {"temps": [], "icons": set()}
                 processed_dates.add(item_date) # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ

            temp = item.get("main", {}).get("temp")
            if temp is not None:
                 daily_forecasts[date_str]["temps"].append(temp)

            icon_code = item.get("weather", [{}])[0].get("icon")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ –ø–æ–≥–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞), —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å d/n
            if icon_code:
                 daily_forecasts[date_str]["icons"].add(icon_code[:2])


        message_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º. {city_display_name.capitalize()}:</b>\n"]
        if not daily_forecasts:
             return f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name.capitalize()}."

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        sorted_dates = sorted(daily_forecasts.keys())

        for date_str in sorted_dates:
             data = daily_forecasts[date_str]
             try:
                 date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                 day_month = date_obj.strftime('%d.%m')

                 # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
                 day_index = date_obj.weekday() # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6
                 uk_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
                 day_name = uk_days[day_index]

                 min_temp = min(data["temps"]) if data["temps"] else "N/A"
                 max_temp = max(data["temps"]) if data["temps"] else "N/A"

                 # –ü–æ–¥–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–Ω–µ–≤–Ω–æ–º—É, –ø–æ—Ç–æ–º –Ω–æ—á–Ω–æ–º—É)
                 icon_emoji = "‚ùì"
                 if data["icons"]:
                      icons_list = sorted(list(data["icons"])) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                      # –ò—â–µ–º –¥–Ω–µ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
                      day_icon_code = next((f"{code}d" for code in icons_list if f"{code}d" in ICON_CODE_TO_EMOJI), None)
                      if day_icon_code:
                           icon_emoji = ICON_CODE_TO_EMOJI.get(day_icon_code, "‚ùì")
                      else: # –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –∏ –ø—Ä–æ–±—É–µ–º d/n
                           any_icon_code = icons_list[0]
                           icon_d = ICON_CODE_TO_EMOJI.get(f"{any_icon_code}d", "‚ùì")
                           icon_n = ICON_CODE_TO_EMOJI.get(f"{any_icon_code}n", icon_d)
                           icon_emoji = icon_d if icon_d != "‚ùì" else icon_n

                 # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                 if min_temp != "N/A" and max_temp != "N/A":
                      temp_str = f"{max_temp:+.0f}¬∞C / {min_temp:+.0f}¬∞C"
                 else:
                      temp_str = "N/A" # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

                 message_lines.append(f"<b>{day_name} ({day_month}):</b> {temp_str} {icon_emoji}")

             except Exception as e:
                 logger.error(f"Error formatting forecast for date {date_str}: {e}")
                 continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–Ω—å

        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting forecast message for {city_display_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –º. {city_display_name.capitalize()}."