# src/modules/weather/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from aiocache import cached, Cache # –î–æ–±–∞–≤–∏–º Cache –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

from src import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"
OWM_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Retry
TZ_KYIV = pytz.timezone('Europe/Kyiv')
MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ OpenWeatherMap
ICON_CODE_TO_EMOJI = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",  # clear sky
    "02d": "üå§Ô∏è", "02n": "‚òÅÔ∏è",  # few clouds
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",  # scattered clouds
    "04d": "üå•Ô∏è", "04n": "‚òÅÔ∏è",  # broken clouds
    "09d": "üå¶Ô∏è", "09n": "üå¶Ô∏è",  # shower rain
    "10d": "üåßÔ∏è", "10n": "üåßÔ∏è",  # rain
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",  # thunderstorm
    "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",  # snow
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è",  # mist
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
def _weather_cache_key_builder(function_prefix: str, city_name: Optional[str] = None, latitude: Optional[float] = None, longitude: Optional[float] = None) -> str:
    if city_name:
        return f"weather:{function_prefix}:city:{city_name.lower()}"
    elif latitude is not None and longitude is not None:
        return f"weather:{function_prefix}:coords:{latitude:.4f}:{longitude:.4f}"
    return f"weather:{function_prefix}:unknown"


@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda f, *args, **kwargs: _weather_cache_key_builder("data", city_name=kwargs.get('city_name')), namespace="weather_service")
async def get_weather_data(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. """
    logger.info(f"Service get_weather_data: Called for city_name='{city_name}'") # –õ–æ–≥ –≤—Ö–æ–¥–∞
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL
    # cache = caches.get('default') # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for '{city_name}' from API")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text() # –ü—Ä–æ—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ JSON
                    if response.status == 200:
                        try:
                            data = await response.json() # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ response, –∞ –Ω–µ –∏–∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            logger.debug(f"OWM Weather API response for '{city_name}': status={response.status}, name in data='{data.get('name')}', raw_data_preview={str(data)[:200]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM for '{city_name}'. Response text: {response_data_text[:500]}")
                            return {"cod": 500, "message": "Invalid JSON response"}
                    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                    elif response.status == 404:
                        logger.warning(f"Attempt {attempt + 1}: City '{city_name}' not found by OWM (404).")
                        return {"cod": 404, "message": "City not found"}
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401).")
                        return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429:
                        logger.error(f"Attempt {attempt + 1}: OWM Client Error {response.status} for '{city_name}'. Response: {response_data_text[:200]}")
                        return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Server/RateLimit Error {response.status} for '{city_name}'. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM Weather for '{city_name}'.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        return {"cod": response.status, "message": f"Unexpected status {response.status}"}

        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM for '{city_name}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching weather for '{city_name}': {e}", exc_info=True)
            return {"cod": 500, "message": "Internal processing error"}

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next weather retry for '{city_name}'...")
            await asyncio.sleep(delay)
        else:
            logger.error(f"All {MAX_RETRIES} attempts failed for weather '{city_name}'. Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": last_exception.status, "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": 504, "message": "Network/Timeout error after retries"}
            elif last_exception:
                 return {"cod": 500, "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": 500, "message": "Failed to get weather data after multiple retries"}
    return None

@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda f, *args, **kwargs: _weather_cache_key_builder("data_coords", latitude=kwargs.get('latitude'), longitude=kwargs.get('longitude')), namespace="weather_service")
async def get_weather_data_by_coords(bot: Bot, latitude: float, longitude: float) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. """
    logger.info(f"Service get_weather_data_by_coords: Called for lat={latitude}, lon={longitude}") # –õ–æ–≥ –≤—Ö–æ–¥–∞
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured for coords.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "lat": latitude,
        "lon": longitude,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_API_URL

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for coords ({latitude:.4f}, {longitude:.4f}) from API")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text()
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"OWM Weather API response for coords ({latitude:.4f}, {longitude:.4f}): status={response.status}, name in data='{data.get('name')}', raw_data_preview={str(data)[:200]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM for coords. Response text: {response_data_text[:500]}")
                            return {"cod": 500, "message": "Invalid JSON response"}
                    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401) for coords.")
                        return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429: # Client errors (–∫—Ä–æ–º–µ rate limit)
                        logger.error(f"Attempt {attempt + 1}: OWM Client Error {response.status} for coords. Response: {response_data_text[:200]}")
                        return {"cod": response.status, "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: # Server errors or Rate limit
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Server/RateLimit Error {response.status} for coords. Retrying...")
                    else: # Unexpected status
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM for coords.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        return {"cod": response.status, "message": f"Unexpected status {response.status}"}
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM for coords: {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching weather by coords: {e}", exc_info=True)
            return {"cod": 500, "message": "Internal processing error"}

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next weather by coords retry...")
            await asyncio.sleep(delay)
        else:
            logger.error(f"All {MAX_RETRIES} attempts failed for coords ({latitude:.4f}, {longitude:.4f}). Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": last_exception.status, "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": 504, "message": "Network/Timeout error after retries"}
            elif last_exception:
                 return {"cod": 500, "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": 500, "message": "Failed to get weather data by coords after multiple retries"}
    return None # Should not be reached

@cached(ttl=config.CACHE_TTL_WEATHER, key_builder=lambda f, *args, **kwargs: _weather_cache_key_builder("forecast", city_name=kwargs.get('city_name')), namespace="weather_service")
async def get_5day_forecast(bot: Bot, city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π. """
    logger.info(f"Service get_5day_forecast: Called for city_name='{city_name}'") # –õ–æ–≥ –≤—Ö–æ–¥–∞
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured for forecast.")
        return {"cod": "500", "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }
    last_exception = None
    api_url = OWM_FORECAST_URL

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch 5-day forecast for '{city_name}' from API")
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text()
                    if response.status == 200:
                        try:
                            data = await response.json()
                            # –í –æ—Ç–≤–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ—Ç –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ 'name', –æ–Ω –µ—Å—Ç—å –≤ data['city']['name']
                            city_name_from_forecast_api = data.get("city", {}).get("name", "N/A")
                            logger.debug(f"OWM Forecast API response for '{city_name}': status={response.status}, city name in data='{city_name_from_forecast_api}', raw_data_preview={str(data)[:200]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM Forecast for '{city_name}'. Response text: {response_data_text[:500]}")
                            return {"cod": "500", "message": "Invalid JSON response"}
                    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                    elif response.status == 404: # –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
                        logger.warning(f"Attempt {attempt + 1}: City '{city_name}' not found by OWM Forecast (404).")
                        return {"cod": "404", "message": "City not found"}
                    elif response.status == 401: # –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401) for Forecast.")
                        return {"cod": "401", "message": "Invalid API key"}
                    elif 400 <= response.status < 500 and response.status != 429: # –î—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                        logger.error(f"Attempt {attempt + 1}: OWM Forecast Client Error {response.status} for '{city_name}'. Response: {response_data_text[:200]}")
                        return {"cod": str(response.status), "message": f"Client error {response.status}"}
                    elif response.status >= 500 or response.status == 429: # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ Rate Limit
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info, response.history,
                            status=response.status, message=f"Server error {response.status} or Rate limit"
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Forecast Server/RateLimit Error {response.status} for '{city_name}'. Retrying...")
                    else: # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM Forecast for '{city_name}'.")
                        last_exception = Exception(f"Unexpected status {response.status}")
                        return {"cod": str(response.status), "message": f"Unexpected status {response.status}"}
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM Forecast for '{city_name}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching 5-day forecast for '{city_name}': {e}", exc_info=True)
            return {"cod": "500", "message": "Internal processing error"}

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next forecast retry for '{city_name}'...")
            await asyncio.sleep(delay)
        else:
            logger.error(f"All {MAX_RETRIES} attempts failed for 5-day forecast '{city_name}'. Last error: {last_exception!r}")
            if isinstance(last_exception, aiohttp.ClientResponseError):
                return {"cod": str(last_exception.status), "message": f"API error after retries: {last_exception.message}"}
            elif isinstance(last_exception, (aiohttp.ClientConnectorError, asyncio.TimeoutError)):
                return {"cod": "504", "message": "Network/Timeout error after retries"}
            elif last_exception:
                 return {"cod": "500", "message": f"Failed after retries: {str(last_exception)}"}
            return {"cod": "500", "message": "Failed to get forecast data after multiple retries"}
    return None # Should not be reached


def format_weather_message(data: Dict[str, Any], city_display_name_for_user: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ. city_display_name_for_user - —ç—Ç–æ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. """
    try:
        cod = data.get("cod")
        # API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å cod –∫–∞–∫ int (200) –∏–ª–∏ str ("200")
        if str(cod) != "200":
            message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API.")
            logger.warning(f"Weather API error for display name '{city_display_name_for_user}'. Code: {cod}, Message: {message}, Raw Data: {str(data)[:200]}")
            return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è <b>{city_display_name_for_user}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {message} (–ö–æ–¥: {cod})</i>"

        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        main = data.get("main", {})
        weather_desc_list = data.get("weather", [{}])
        weather_desc = weather_desc_list[0] if weather_desc_list else {} # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        wind = data.get("wind", {})
        clouds = data.get("clouds", {})
        sys_info = data.get("sys", {})

        temp = main.get("temp")
        feels_like = main.get("feels_like")
        pressure_hpa = main.get("pressure")
        humidity = main.get("humidity")
        description = weather_desc.get("description", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
        icon_code = weather_desc.get("icon")
        wind_speed = wind.get("speed")
        cloudiness = clouds.get("all")
        sunrise_ts = sys_info.get("sunrise")
        sunset_ts = sys_info.get("sunset")

        pressure_mmhg_str = "N/A"
        if pressure_hpa is not None:
            try:
                pressure_mmhg_str = f"{int(pressure_hpa * 0.750062)}"
            except ValueError: # –ï—Å–ª–∏ pressure_hpa –Ω–µ —á–∏—Å–ª–æ
                 logger.warning(f"Could not convert pressure {pressure_hpa} to mmhg.")

        emoji = ICON_CODE_TO_EMOJI.get(icon_code, "")

        sunrise_str, sunset_str = "N/A", "N/A"
        if sunrise_ts:
            try:
                sunrise_str = datetime.fromtimestamp(sunrise_ts, tz=TZ_KYIV).strftime('%H:%M')
            except (TypeError, ValueError): # –ï—Å–ª–∏ timestamp –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                 logger.warning(f"Could not format sunrise timestamp {sunrise_ts}.")
        if sunset_ts:
            try:
                sunset_str = datetime.fromtimestamp(sunset_ts, tz=TZ_KYIV).strftime('%H:%M')
            except (TypeError, ValueError):
                 logger.warning(f"Could not format sunset timestamp {sunset_ts}.")


        dt_unix = data.get("dt")
        time_info = ""
        if dt_unix:
            try:
                current_time_str = datetime.fromtimestamp(dt_unix, tz=TZ_KYIV).strftime('%H:%M, %d.%m.%Y')
                time_info = f"<i>–î–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–∞ {current_time_str} (–ö–∏—ó–≤)</i>"
            except (TypeError, ValueError):
                logger.warning(f"Could not format weather dt timestamp {dt_unix}.")


        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤: {city_display_name_for_user}</b> {emoji}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like}¬∞C)",
            f"üå¨Ô∏è –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
            f"üå´Ô∏è –¢–∏—Å–∫: {pressure_mmhg_str} –º–º —Ä—Ç.—Å—Ç.",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {cloudiness}%",
            f"üìù –û–ø–∏—Å: {description.capitalize()}",
            f"üåÖ –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise_str}",
            f"üåá –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset_str}",
            time_info
        ]
        return "\n".join(filter(None, message_lines))

    except Exception as e:
        logger.exception(f"Error formatting weather message for '{city_display_name_for_user}': {e}. Data: {str(data)[:500]}", exc_info=True)
        return f"üò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏ –¥–ª—è <b>{city_display_name_for_user}</b>."


def format_forecast_message(data: Dict[str, Any], city_display_name_for_user: str) -> str:
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π. """
    try:
        cod = data.get("cod")
        if str(cod) != "200":
            message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API.")
            logger.warning(f"Forecast API error for display name '{city_display_name_for_user}'. Code: {cod}, Message: {message}, Raw Data: {str(data)[:200]}")
            return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{city_display_name_for_user}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {message} (–ö–æ–¥: {cod})</i>"

        # API –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –≥–æ—Ä–æ–¥–∞ –≤ data['city']['name']
        api_city_name_in_forecast = data.get("city", {}).get("name")
        # –ï—Å–ª–∏ city_display_name_for_user —ç—Ç–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –≤–∞—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –º. –ì–æ—Ä–æ–¥", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –æ—Ç API –ø—Ä–æ–≥–Ω–æ–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        header_city_name = city_display_name_for_user
        if "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏" not in city_display_name_for_user.lower() and api_city_name_in_forecast:
            header_city_name = api_city_name_in_forecast.capitalize()


        message_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è: {header_city_name} –Ω–∞ 5 –¥–Ω—ñ–≤:</b>\n"]
        forecast_list = data.get("list", [])
        
        daily_forecasts = {}
        if not forecast_list:
             logger.warning(f"Forecast list is empty for '{header_city_name}'. Data: {str(data)[:200]}")
             return "üò• –ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

        for item in forecast_list:
            dt_txt = item.get("dt_txt")
            if not dt_txt:
                continue
            
            try:
                dt_obj_utc = datetime.strptime(dt_txt, '%Y-%m-%d %H:%M:%S')
                dt_obj_kyiv = dt_obj_utc.replace(tzinfo=pytz.utc).astimezone(TZ_KYIV)
                date_str = dt_obj_kyiv.strftime('%d.%m (%A)') # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∏–ª–∏ 15:00 (–±–ª–∏–∂–µ –∫ –ø–æ–ª—É–¥–Ω—é/–¥–Ω—é)
                target_hours = [12, 15, 9] # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞—Å–æ–≤
                current_hour_diff = 24

                is_target_hour = False
                for th in target_hours:
                    if dt_obj_kyiv.hour == th:
                        is_target_hour = True
                        current_hour_diff = 0 # –¢–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                        break
                    # –ï—Å–ª–∏ –Ω–µ —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ
                    # –≠—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–µ, –Ω–æ –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—ã
                
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 12:00 –∏–ª–∏ 15:00)
                # –ò–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å min/max —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞ –¥–µ–Ω—å
                if date_str not in daily_forecasts or \
                   (daily_forecasts[date_str].get("hour_diff", 24) > abs(dt_obj_kyiv.hour - 12) and dt_obj_kyiv.hour > 6 and dt_obj_kyiv.hour < 18) or \
                   (dt_obj_kyiv.hour == 12): # –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º 12:00

                    temp = item.get("main", {}).get("temp")
                    weather_desc_list = item.get("weather", [{}])
                    weather_desc_item = weather_desc_list[0] if weather_desc_list else {}
                    description = weather_desc_item.get("description", "N/A")
                    icon_code = weather_desc_item.get("icon")
                    emoji = ICON_CODE_TO_EMOJI.get(icon_code, "")
                    
                    if temp is not None: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –µ—Å—Ç—å
                        daily_forecasts[date_str] = {
                            "temp": temp,
                            "description": description,
                            "emoji": emoji,
                            "hour_diff": abs(dt_obj_kyiv.hour - 12), # –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –ø–æ–ª—É–¥–Ω—é
                            "dt_obj_kyiv": dt_obj_kyiv # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                        }
            except Exception as e_item:
                logger.warning(f"Could not parse forecast item {item} for '{header_city_name}': {e_item}")
                continue


        if not daily_forecasts:
            return f"üò• –ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{header_city_name}</b> –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        sorted_dates_keys = sorted(daily_forecasts.keys(), key=lambda d_key: daily_forecasts[d_key]["dt_obj_kyiv"])

        for date_key_str in sorted_dates_keys:
            forecast = daily_forecasts[date_key_str]
            message_lines.append(
                f"<b>{date_key_str}:</b> {forecast['temp']:.1f}¬∞C, {forecast['description'].capitalize()} {forecast['emoji']}"
            )
        
        message_lines.append("\n<tg-spoiler>–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏—Å—è.</tg-spoiler>")
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting forecast message for '{city_display_name_for_user}': {e}. Data: {str(data)[:500]}", exc_info=True)
        return f"üò• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è <b>{city_display_name_for_user}</b>."