# src/modules/weather/service.py

import logging
import aiohttp
import asyncio # <<< –î–æ–±–∞–≤–ª—è–µ–º asyncio –¥–ª—è sleep
from typing import Optional, Dict, Any

from src import config

logger = logging.getLogger(__name__)

OWM_API_URL = "https://api.openweathermap.org/data/2.5/weather"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES = 3
INITIAL_DELAY = 1 # –°–µ–∫—É–Ω–¥–∞

async def get_weather_data(city_name: str) -> Optional[Dict[str, Any]]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å OpenWeatherMap —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏. """
    if not config.WEATHER_API_KEY:
        logger.error("OpenWeatherMap API key (WEATHER_API_KEY) is not configured.")
        return {"cod": 500, "message": "API key not configured"}

    params = {
        "q": city_name,
        "appid": config.WEATHER_API_KEY,
        "units": "metric",
        "lang": "uk",
    }

    last_exception = None # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch weather for {city_name}")
            async with aiohttp.ClientSession() as session:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–µ–∫—É–Ω–¥)
                async with session.get(OWM_API_URL, params=params, timeout=10) as response:
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç 200 OK
                    if response.status == 200:
                        try:
                            data = await response.json()
                            logger.debug(f"OpenWeatherMap response for {city_name}: {data}")
                            return data # <<< –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from OWM. Response: {await response.text()}")
                            # –≠—Ç–æ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                            return {"cod": 500, "message": "Invalid JSON response"}

                    # –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (4xx), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                    elif response.status == 404:
                        logger.warning(f"Attempt {attempt + 1}: City '{city_name}' not found by OWM (404).")
                        return {"cod": 404, "message": "City not found"}
                    elif response.status == 401:
                        logger.error(f"Attempt {attempt + 1}: Invalid OWM API key (401).")
                        return {"cod": 401, "message": "Invalid API key"}
                    elif 400 <= response.status < 500:
                        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (4xx) - —Ç–æ–∂–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        error_text = await response.text()
                        logger.error(f"Attempt {attempt + 1}: OWM Client Error {response.status}. Response: {error_text[:200]}")
                        return {"cod": response.status, "message": f"Client error {response.status}"}

                    # –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (5xx) –∏–ª–∏ 429 (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤) - –ü–û–ü–†–û–ë–£–ï–ú –ü–û–í–¢–û–†–ò–¢–¨
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(
                            response.request_info,
                            response.history,
                            status=response.status,
                            message=f"Server error {response.status}",
                            headers=response.headers,
                        )
                        logger.warning(f"Attempt {attempt + 1}: OWM Server Error {response.status}. Retrying...")
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É except –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏

                    else: # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                         logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from OWM.")
                         last_exception = Exception(f"Unexpected status {response.status}")
                         # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª sleep –∏ retry

        # –õ–æ–≤–∏–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏ —Ç–∞–π–º–∞—É—Ç—ã - –ü–û–ü–†–û–ë–£–ï–ú –ü–û–í–¢–û–†–ò–¢–¨
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to OWM: {e}. Retrying...")
        # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ - –ù–ï –ü–û–í–¢–û–†–Ø–ï–ú
        except Exception as e:
             logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred: {e}", exc_info=True)
             # –°—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–æ–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
             return {"cod": 500, "message": "Internal processing error"}

        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay} seconds before next retry...")
            await asyncio.sleep(delay)
        else:
             logger.error(f"All {MAX_RETRIES} attempts failed for city {city_name}. Last error: {last_exception!r}")
             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞
             if isinstance(last_exception, aiohttp.ClientResponseError):
                 return {"cod": last_exception.status, "message": f"Server error {last_exception.status} after retries"}
             elif isinstance(last_exception, aiohttp.ClientConnectorError):
                 return {"cod": 503, "message": "Network error after retries"}
             elif isinstance(last_exception, asyncio.TimeoutError):
                  return {"cod": 504, "message": "Timeout error after retries"}
             else:
                 return {"cod": 500, "message": "Failed after multiple retries"}

    return {"cod": 500, "message": "Failed after all retries"} # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–Ω–∞—á–µ


# –§—É–Ω–∫—Ü–∏—è format_weather_message –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô (–∏–∑ –æ—Ç–≤–µ—Ç–∞ #81)
# ... (–≤–∞—à –∫–æ–¥ format_weather_message) ...
def format_weather_message(weather_data: Dict[str, Any], city_display_name: str) -> str:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ #81) ...
    try:
        main_data = weather_data.get("main", {})
        weather_info = weather_data.get("weather", [{}])[0]
        wind_data = weather_data.get("wind", {})
        cloud_data = weather_data.get("clouds", {})

        temp = main_data.get("temp")
        feels_like = main_data.get("feels_like")
        humidity = main_data.get("humidity")
        pressure_hpa = main_data.get("pressure")
        pressure_mmhg = round(pressure_hpa * 0.750062) if pressure_hpa is not None else "N/A"

        description = weather_info.get("description", "–Ω–µ–≤—ñ–¥–æ–º–æ").capitalize()
        weather_icons_map = {
             "clear sky": "‚òÄÔ∏è", "few clouds": "üå§Ô∏è", "scattered clouds": "‚òÅÔ∏è",
             "broken clouds": "‚òÅÔ∏è", "overcast clouds": "üå•Ô∏è", "shower rain": "üå¶Ô∏è",
             "rain": "üåßÔ∏è", "light rain": "üåßÔ∏è", "thunderstorm": "‚õàÔ∏è", "snow": "‚ùÑÔ∏è", "mist": "üå´Ô∏è"
        }
        icon_emoji = "‚ùì"
        for key, emoji in weather_icons_map.items():
             if key in description.lower():
                  icon_emoji = emoji
                  break

        wind_speed = wind_data.get("speed")
        wind_deg = wind_data.get("deg")

        def deg_to_compass(num):
            if num is None: return ""
            try:
                val = int((float(num) / 22.5) + 0.5)
                arr = ["–ü–Ω","–ü–Ω-–ü–Ω-–°—Ö","–ü–Ω-–°—Ö","–°—Ö-–ü–Ω-–°—Ö","–°—Ö","–°—Ö-–ü–¥-–°—Ö","–ü–¥-–°—Ö","–ü–¥-–ü–¥-–°—Ö","–ü–¥","–ü–¥-–ü–¥-–ó—Ö","–ü–¥-–ó—Ö","–ó—Ö-–ü–¥-–ó—Ö","–ó—Ö","–ó—Ö-–ü–Ω-–ó—Ö","–ü–Ω-–ó—Ö","–ü–Ω-–ü–Ω-–ó—Ö"]
                return arr[(val % 16)]
            except (ValueError, TypeError):
                return ""
        wind_direction = deg_to_compass(wind_deg)

        clouds_percent = cloud_data.get("all", "N/A")
        display_name_formatted = city_display_name.capitalize()

        message_lines = [
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º. {display_name_formatted}:</b>\n",
            f"{icon_emoji} {description}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like:.1f}¬∞C)" if temp is not None and feels_like is not None else "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: N/A",
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%" if humidity is not None else "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: N/A",
            f"üí® –í—ñ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å {wind_direction}" if wind_speed is not None else "üí® –í—ñ—Ç–µ—Ä: N/A",
            f"üß≠ –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç.—Å—Ç." if pressure_mmhg != "N/A" else "üß≠ –¢–∏—Å–∫: N/A",
            f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds_percent}%" if clouds_percent != "N/A" else "‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: N/A"
        ]
        return "\n".join(message_lines)

    except Exception as e:
        logger.exception(f"Error formatting weather data for {city_display_name}: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º. {city_display_name.capitalize()}."