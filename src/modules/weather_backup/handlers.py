# src/modules/weather_backup/handlers.py

import logging
import re # –î–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤–≤–æ–¥—É
from typing import Union, Optional, Dict, Any

from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession

from src.db.models import User # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è preferred_city
from .service import (
    get_current_weather_weatherapi,
    format_weather_backup_message,
    get_forecast_weatherapi,
    format_forecast_backup_message,
    format_tomorrow_forecast_backup_message # –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫
)
from .keyboard import (
    get_current_weather_backup_keyboard,
    get_forecast_weather_backup_keyboard,
    CALLBACK_WEATHER_BACKUP_REFRESH_CURRENT,
    CALLBACK_WEATHER_BACKUP_SHOW_FORECAST_3D, # –ó–º—ñ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
    CALLBACK_WEATHER_BACKUP_REFRESH_FORECAST,
    CALLBACK_WEATHER_BACKUP_SHOW_CURRENT_W,
    CALLBACK_WEATHER_BACKUP_SHOW_FORECAST_TOMORROW # –ù–æ–≤–∏–π –∫–æ–ª–±–µ–∫
)
# –î–ª—è –∑–∞–ø–∏—Ç—É –º—ñ—Å—Ç–∞ —Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
from src.modules.weather.keyboard import get_weather_enter_city_back_keyboard, WEATHER_PREFIX as MAIN_WEATHER_PREFIX
# –î–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ç—É —Å–∞–º—É, —â–æ –π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–æ–¥—É–ª—ñ)
from src.modules.weather.keyboard import get_save_city_keyboard, CALLBACK_WEATHER_SAVE_CITY_YES, CALLBACK_WEATHER_SAVE_CITY_NO
from src.handlers.utils import show_main_menu_message


logger = logging.getLogger(__name__)
router = Router(name="weather-backup-module")

class WeatherBackupStates(StatesGroup):
    waiting_for_location = State()
    showing_current = State()
    showing_forecast_3d = State() # –û–∫—Ä–µ–º–∏–π —Å—Ç–∞–Ω –¥–ª—è 3-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
    showing_forecast_tomorrow = State() # –û–∫—Ä–µ–º–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    waiting_for_save_decision = State() # –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è


async def _fetch_and_show_backup_weather(
    bot: Bot,
    target: Union[Message, CallbackQuery],
    state: FSMContext,
    session: AsyncSession, # –¢–µ–ø–µ—Ä session –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
    location_input: str,
    show_forecast_days: Optional[int] = None, # None –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó, 3 –¥–ª—è 3-–¥–µ–Ω–Ω–æ–≥–æ, 1 –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–≥–æ (–∞–±–æ —ñ–Ω—à–∏–π –º–∞—Ä–∫–µ—Ä)
    is_coords_request: bool = False
):
    user_id = target.from_user.id
    message_to_edit_or_answer = target.message if isinstance(target, CallbackQuery) else target
    status_message = None
    answered_callback = False

    action_text = "‚è≥ –û—Ç—Ä–∏–º—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ..."
    if show_forecast_days == 1: # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        action_text = "‚è≥ –û—Ç—Ä–∏–º—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞..."
    elif show_forecast_days and show_forecast_days > 1: # 3-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        action_text = f"‚è≥ –û—Ç—Ä–∏–º—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {show_forecast_days} –¥–Ω—ñ..."


    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e:
            logger.warning(f"Could not answer callback immediately in _fetch_and_show_backup_weather for user {user_id}: {e}")
    
    try:
        if isinstance(target, CallbackQuery):
            status_message = await message_to_edit_or_answer.edit_text(action_text)
        else: # Message
            status_message = await target.answer(action_text)
    except Exception as e:
        logger.warning(f"Could not send/edit 'loading' status message for backup weather, user {user_id}: {e}")

    final_target_message = status_message if status_message else message_to_edit_or_answer
    
    api_response_data: Dict[str, Any]
    formatted_message_text: str
    reply_markup: Optional[InlineKeyboardMarkup] = None
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏, —è–∫—â–æ —Ü–µ –ø—Ä–æ–≥–Ω–æ–∑
    api_days_to_request = 3 # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è WeatherAPI, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ (–≤–∫–ª—é—á–∞—î –∑–∞–≤—Ç—Ä–∞)
    if show_forecast_days == 1: # –Ø–∫—â–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –≤—Å–µ –æ–¥–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤
        api_days_to_request = 3 # WeatherAPI –∑–∞–∑–≤–∏—á–∞–π –¥–∞—î —Å—å–æ–≥–æ–¥–Ω—ñ + 2 –¥–Ω—ñ –º—ñ–Ω—ñ–º—É–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É

    if show_forecast_days is not None: # –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ (–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ 3 –¥–Ω—ñ)
        api_response_data = await get_forecast_weatherapi(bot, location=location_input, days=api_days_to_request)
        if show_forecast_days == 1: # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            formatted_message_text = format_tomorrow_forecast_backup_message(api_response_data, requested_location=location_input)
        else: # –§–æ—Ä–º–∞—Ç—É—î–º–æ 3-–¥–µ–Ω–Ω–∏–π (–∞–±–æ N-–¥–µ–Ω–Ω–∏–π) –ø—Ä–æ–≥–Ω–æ–∑
            formatted_message_text = format_forecast_backup_message(api_response_data, requested_location=location_input)
    else: # –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞
        api_response_data = await get_current_weather_weatherapi(bot, location=location_input)
        formatted_message_text = format_weather_backup_message(api_response_data, requested_location=location_input)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥ API (–≤–∫–ª—é—á–∞—é—á–∏ "–ø–æ–∑–∞ –£–∫—Ä–∞—ó–Ω–æ—é")
    is_api_error = "error" in api_response_data and isinstance(api_response_data.get("error"), dict)

    if is_api_error:
        # format_..._message –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        reply_markup = get_weather_enter_city_back_keyboard()
        await state.set_state(WeatherBackupStates.waiting_for_location)
        logger.warning(f"User {user_id}: API error for backup weather/forecast. State set to waiting_for_location. Response: {api_response_data}")
    else:
        # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
        api_city_name = api_response_data.get("location", {}).get("name")
        city_to_save_confirmed_backup = api_city_name if api_city_name else None # –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

        # –û–Ω–æ–≤–ª—é—î–º–æ FSM –¥–∞–Ω—ñ
        await state.update_data(
            current_backup_location=location_input, # –¢–µ, —â–æ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ lat,lon
            current_backup_api_city_name=api_city_name, # –¢–µ, —â–æ –ø–æ–≤–µ—Ä–Ω—É–ª–æ API
            is_backup_coords=is_coords_request,
            city_to_save_confirmed_backup=city_to_save_confirmed_backup # –î–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        )
        logger.debug(f"User {user_id}: Backup weather/forecast FSM data updated. API city: {api_city_name}")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        if show_forecast_days == 1:
            await state.set_state(WeatherBackupStates.showing_forecast_tomorrow)
            reply_markup = get_forecast_weather_backup_keyboard(is_tomorrow_forecast=True)
        elif show_forecast_days and show_forecast_days > 1:
            await state.set_state(WeatherBackupStates.showing_forecast_3d)
            reply_markup = get_forecast_weather_backup_keyboard(is_tomorrow_forecast=False)
        else: # –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞
            await state.set_state(WeatherBackupStates.showing_current)
            reply_markup = get_current_weather_backup_keyboard()

        # –õ–æ–≥—ñ–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ (—è–∫—â–æ —Ü–µ –±—É–≤ –∑–∞–ø–∏—Ç –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥, —ñ –º—ñ—Å—Ç–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ)
        db_user = await session.get(User, user_id)
        preferred_city_from_db = db_user.preferred_city if db_user else None
        ask_to_save = False

        if city_to_save_confirmed_backup and \
           (not preferred_city_from_db or preferred_city_from_db.lower() != city_to_save_confirmed_backup.lower()):
            ask_to_save = True
        
        if ask_to_save:
            prompt_city_name = city_to_save_confirmed_backup.capitalize()
            formatted_message_text += f"\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ <b>{prompt_city_name}</b> —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ?"
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è, –∞–ª–µ –∫–æ–ª–±–µ–∫–∏ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è —Ç—É—Ç
            reply_markup = get_save_city_keyboard() # –¶—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–∞—î –∫–æ–ª–±–µ–∫–∏ CALLBACK_WEATHER_SAVE_CITY_YES/NO
            await state.set_state(WeatherBackupStates.waiting_for_save_decision)
            logger.info(f"User {user_id}: Asking to save '{prompt_city_name}' (from backup module). FSM to waiting_for_save_decision.")


    try:
        if status_message:
            await final_target_message.edit_text(formatted_message_text, reply_markup=reply_markup)
        else:
            await message_to_edit_or_answer.answer(formatted_message_text, reply_markup=reply_markup)
        logger.info(f"User {user_id}: Sent/edited backup weather/forecast for location_input='{location_input}'.")
    except Exception as e:
        logger.error(f"Error sending/editing final message for backup weather: {e}")
        if is_api_error and not status_message :
            try: await message_to_edit_or_answer.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except: pass

    if isinstance(target, CallbackQuery) and not answered_callback:
        try: await target.answer()
        except Exception: logger.warning(f"Final attempt to answer backup weather callback for user {user_id} failed.")


async def weather_backup_entry_point(
    target: Union[Message, CallbackQuery], state: FSMContext, session: AsyncSession, bot: Bot
):
    user_id = target.from_user.id
    logger.info(f"User {user_id} initiated weather_backup_entry_point.")

    current_fsm_state = await state.get_state()
    if current_fsm_state is not None and not current_fsm_state.startswith("WeatherBackupStates"):
        logger.info(f"User {user_id}: In another FSM state ({current_fsm_state}), clearing state before backup weather.")
        await state.clear() 
    elif current_fsm_state is None:
        await state.set_data({})

    location_to_use: Optional[str] = None
    db_user = await session.get(User, user_id)
    if db_user and db_user.preferred_city:
        location_to_use = db_user.preferred_city
        logger.info(f"User {user_id}: Using preferred city '{location_to_use}' for backup weather.")

    answered_callback = False
    if isinstance(target, CallbackQuery):
        try:
            await target.answer()
            answered_callback = True
        except Exception as e: logger.warning(f"Could not answer callback in weather_backup_entry_point: {e}")

    target_message = target.message if isinstance(target, CallbackQuery) else target

    if location_to_use:
        await _fetch_and_show_backup_weather(bot, target, state, session, location_input=location_to_use)
    else:
        logger.info(f"User {user_id}: No preferred city for backup weather. Asking for location input.")
        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é (–∞–±–æ 'lat,lon') –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏, –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é."
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            if isinstance(target, CallbackQuery):
                 await target_message.edit_text(text, reply_markup=reply_markup)
            else:
                 await target_message.answer(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error sending/editing message to ask for backup location: {e}")
            if isinstance(target, CallbackQuery):
                try: await target.message.answer(text, reply_markup=reply_markup)
                except: pass
        await state.set_state(WeatherBackupStates.waiting_for_location)
        logger.info(f"User {user_id}: Set FSM state to WeatherBackupStates.waiting_for_location.")
    
    if isinstance(target, CallbackQuery) and not answered_callback:
        try: await target.answer()
        except: pass


@router.message(WeatherBackupStates.waiting_for_location, F.text)
async def handle_backup_location_text_input(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    location_input = message.text.strip() if message.text else ""
    logger.info(f"User {user_id} entered text location '{location_input}' for backup weather.")
    
    if not location_input:
        try: await message.answer("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as e: logger.error(f"Error sending empty backup location message: {e}")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É –≤–≤–µ–¥–µ–Ω–Ω—è (—è–∫—â–æ —Ü–µ –Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)
    is_coords_input = False
    if ',' in location_input:
        parts = location_input.split(',')
        if len(parts) == 2:
            try: float(parts[0].strip()); float(parts[1].strip()); is_coords_input = True
            except ValueError: pass # –ù–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏

    if not is_coords_input and not re.match(r"^[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë\s\-\']+$", location_input):
        try:
            await message.answer(
                "üòî –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∞–±–æ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (lat,lon).",
                reply_markup=get_weather_enter_city_back_keyboard()
            )
        except Exception as e: logger.error(f"Error sending 'use Ukrainian input for backup' message: {e}")
        return
        
    await _fetch_and_show_backup_weather(bot, message, state, session, location_input=location_input, is_coords_request=is_coords_input)


@router.message(WeatherBackupStates.waiting_for_location, F.location)
async def handle_backup_geolocation_input(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    logger.info(f"User {user_id} sent geolocation for backup weather: lat={lat}, lon={lon}")
    location_input_str = f"{lat},{lon}"
    await _fetch_and_show_backup_weather(bot, message, state, session, location_input=location_input_str, is_coords_request=True)

async def weather_backup_geolocation_entry_point(
    message: Message, state: FSMContext, session: AsyncSession, bot: Bot
):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    logger.info(f"User {user_id} initiated backup weather by geolocation directly: lat={lat}, lon={lon}")
    location_input_str = f"{lat},{lon}"
    await _fetch_and_show_backup_weather(bot, message, state, session, location_input=location_input_str, is_coords_request=True)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥—ñ–π ---

@router.callback_query(F.data == CALLBACK_WEATHER_BACKUP_REFRESH_CURRENT, WeatherBackupStates.showing_current)
async def handle_refresh_current_backup(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    location = user_fsm_data.get("current_backup_location")
    is_coords = user_fsm_data.get("is_backup_coords", False)
    logger.info(f"User {user_id} refreshing current backup weather for location: '{location}', is_coords={is_coords}.")

    if location:
        await _fetch_and_show_backup_weather(bot, callback, state, session, location_input=location, is_coords_request=is_coords)
    else:
        # ... (–∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞) ...
        logger.warning(f"User {user_id}: No location found in state for refreshing current backup weather.")
        answered = False
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            answered = True
        except Exception as e: logger.warning(f"Could not answer callback (refresh error): {e}")
        
        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit message after backup refresh failure: {e_edit}")
            try: await callback.message.answer(text, reply_markup=reply_markup)
            except Exception as e_ans: logger.error(f"Failed to send new message for backup refresh failure: {e_ans}")
        await state.set_state(WeatherBackupStates.waiting_for_location)
        if not answered:
            try: await callback.answer()
            except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_BACKUP_SHOW_FORECAST_3D, WeatherBackupStates.showing_current)
async def handle_show_forecast_3d_backup(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    location = user_fsm_data.get("current_backup_location")
    is_coords = user_fsm_data.get("is_backup_coords", False)
    logger.info(f"User {user_id} requesting backup 3-day forecast for location: '{location}', is_coords={is_coords}.")

    if location:
        await _fetch_and_show_backup_weather(bot, callback, state, session, location_input=location, show_forecast_days=3, is_coords_request=is_coords)
    else:
        # ... (–∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏) ...
        logger.warning(f"User {user_id}: No location found in state for backup 3d forecast.")
        answered = False
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            answered = True
        except Exception as e: logger.warning(f"Could not answer callback (forecast 3d error): {e}")

        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit message after backup 3d forecast failure: {e_edit}")
            try: await callback.message.answer(text, reply_markup=reply_markup)
            except Exception as e_ans: logger.error(f"Failed to send new message for backup 3d forecast failure: {e_ans}")
        await state.set_state(WeatherBackupStates.waiting_for_location)
        if not answered:
            try: await callback.answer()
            except: pass

# –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@router.callback_query(F.data == CALLBACK_WEATHER_BACKUP_SHOW_FORECAST_TOMORROW, WeatherBackupStates.showing_current)
async def handle_show_forecast_tomorrow_backup(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    location = user_fsm_data.get("current_backup_location")
    is_coords = user_fsm_data.get("is_backup_coords", False)
    logger.info(f"User {user_id} requesting backup tomorrow's forecast for location: '{location}', is_coords={is_coords}.")

    if location:
        await _fetch_and_show_backup_weather(bot, callback, state, session, location_input=location, show_forecast_days=1, is_coords_request=is_coords)
    else:
        logger.warning(f"User {user_id}: No location found in state for backup tomorrow's forecast.")
        # ... (–∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏, –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ 3-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É) ...
        answered = False
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            answered = True
        except Exception as e: logger.warning(f"Could not answer callback (forecast tomorrow error): {e}")

        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit message after backup tomorrow forecast failure: {e_edit}")
            try: await callback.message.answer(text, reply_markup=reply_markup)
            except Exception as e_ans: logger.error(f"Failed to send new message for backup tomorrow forecast failure: {e_ans}")
        await state.set_state(WeatherBackupStates.waiting_for_location)
        if not answered:
            try: await callback.answer()
            except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_BACKUP_REFRESH_FORECAST, 
                       (WeatherBackupStates.showing_forecast_3d | WeatherBackupStates.showing_forecast_tomorrow))
async def handle_refresh_forecast_backup(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    current_fsm_state = await state.get_state()
    location = user_fsm_data.get("current_backup_location")
    is_coords = user_fsm_data.get("is_backup_coords", False)
    logger.info(f"User {user_id} refreshing backup forecast (state: {current_fsm_state}) for location: '{location}', is_coords={is_coords}.")

    days_to_refresh = 3 # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è 3-–¥–µ–Ω–Ω–æ–≥–æ
    if current_fsm_state == WeatherBackupStates.showing_forecast_tomorrow.state:
        days_to_refresh = 1 # –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞

    if location:
        await _fetch_and_show_backup_weather(bot, callback, state, session, location_input=location, show_forecast_days=days_to_refresh, is_coords_request=is_coords)
    else:
        # ... (–∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏) ...
        logger.warning(f"User {user_id}: No location found in state for refreshing backup forecast.")
        answered = False
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            answered = True
        except Exception as e: logger.warning(f"Could not answer callback (refresh forecast error): {e}")
        
        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
             logger.error(f"Failed to edit message after backup forecast refresh failure: {e_edit}")
             try: await callback.message.answer(text, reply_markup=reply_markup)
             except Exception as e_ans: logger.error(f"Failed to send new message for backup forecast refresh failure: {e_ans}")
        await state.set_state(WeatherBackupStates.waiting_for_location)
        if not answered:
            try: await callback.answer()
            except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_BACKUP_SHOW_CURRENT_W, 
                       (WeatherBackupStates.showing_forecast_3d | WeatherBackupStates.showing_forecast_tomorrow))
async def handle_show_current_from_forecast_backup(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    location = user_fsm_data.get("current_backup_location")
    is_coords = user_fsm_data.get("is_backup_coords", False)
    logger.info(f"User {user_id} requesting to show current backup weather (from forecast view) for: '{location}', is_coords={is_coords}.")

    if location:
        await _fetch_and_show_backup_weather(bot, callback, state, session, location_input=location, is_coords_request=is_coords)
    else:
        # ... (–∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏) ...
        logger.warning(f"User {user_id}: No location found in state for showing current backup weather from forecast.")
        answered = False
        try:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            answered = True
        except Exception as e: logger.warning(f"Could not answer callback (show current backup error): {e}")

        text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ (–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏:"
        reply_markup = get_weather_enter_city_back_keyboard()
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e_edit:
            logger.error(f"Failed to edit message after show current backup failure: {e_edit}")
            try: await callback.message.answer(text, reply_markup=reply_markup) # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ typo: –ø–æ–≥–æ–≥–∏ -> –ø–æ–≥–æ–¥–∏
            except Exception as e_ans: logger.error(f"Failed to send message after show current backup failure either: {e_ans}")
        await state.set_state(WeatherBackupStates.waiting_for_location)
        if not answered:
            try: await callback.answer()
            except: pass

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ (–Ω–æ–≤–µ –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è) ---
@router.callback_query(F.data == CALLBACK_WEATHER_SAVE_CITY_YES, WeatherBackupStates.waiting_for_save_decision)
async def handle_backup_save_city_yes(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} chose YES to save city (from backup module). FSM data: {user_fsm_data}")

    city_to_save = user_fsm_data.get("city_to_save_confirmed_backup")
    # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `current_backup_api_city_name` –∞–±–æ `city_to_save`
    display_city_name = user_fsm_data.get("current_backup_api_city_name", city_to_save)

    answered_callback = False
    try:
        await callback.answer("–ó–±–µ—Ä—ñ–≥–∞—é –º—ñ—Å—Ç–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ...")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_backup_save_city_yes: {e}")

    final_text = ""
    # –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏
    final_markup = get_current_weather_backup_keyboard() 

    if not city_to_save:
        logger.error(f"User {user_id}: 'city_to_save_confirmed_backup' is missing in FSM. Cannot save.")
        final_text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è."
    else:
        db_user = await session.get(User, user_id)
        if db_user:
            try:
                old_preferred_city = db_user.preferred_city
                db_user.preferred_city = city_to_save # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ
                session.add(db_user)
                # DbSessionMiddleware –∑—Ä–æ–±–∏—Ç—å commit
                logger.info(f"User {user_id}: Preferred city (main) set to '{city_to_save}' (was '{old_preferred_city}') via backup module.")
                final_text = f"‚úÖ –ú—ñ—Å—Ç–æ <b>{display_city_name or city_to_save}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–µ."
                # –û–Ω–æ–≤–ª—é—î–º–æ FSM –¥–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥–∏, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ/–ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
                # –¢—É—Ç –º–∏ –æ–Ω–æ–≤–∏–ª–∏ User.preferred_city, —Ç–æ–º—É –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥–∏ –≤—ñ–Ω —Ü–µ –ø–æ–±–∞—á–∏—Ç—å.
            except Exception as e_db:
                logger.exception(f"User {user_id}: DB error while saving preferred_city '{city_to_save}': {e_db}", exc_info=True)
                await session.rollback()
                final_text = "üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞."
        else:
            logger.error(f"User {user_id} not found in DB during save city (backup module).")
            final_text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ."

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –¥–ª—è —â–æ–π–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ/–Ω–µ–≤–¥–∞–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
    # –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± _fetch_and_show_backup_weather –Ω–µ –∑–º—ñ–Ω—é–≤–∞–≤ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –≤–∂–µ —î
    # –ê–±–æ –º–∏ –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏.
    # –ê–±–æ –ø–µ—Ä–µ-–∑–∞–ø–∏—Ç–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è `city_to_save` (–∞–ª–µ —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ `location_input` –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)
    
    # –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
    # –¢—Ä–µ–±–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ FSM —Å—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–ª—è —Ü–∏—Ö –∫–Ω–æ–ø–æ–∫
    await state.set_state(WeatherBackupStates.showing_current) 
    try:
        # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏–ª–æ –ø–æ–≥–æ–¥—É, –º–∏ –π–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º–æ.
        # –ú–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è,
        # –∞ –ø–æ—Ç—ñ–º –æ–∫—Ä–µ–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
        # –ê–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π.
        original_weather_text_parts = callback.message.text.split("\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏", 1)
        weather_part = original_weather_text_parts[0]
        
        await callback.message.edit_text(f"{weather_part}\n\n{final_text}", reply_markup=final_markup)

    except Exception as e_edit:
        logger.error(f"Failed to edit message after save city (YES) decision in backup: {e_edit}")
        try: await callback.message.answer(final_text, reply_markup=final_markup)
        except Exception as e_ans: logger.error(f"Failed to send new message after save city (YES) decision in backup: {e_ans}")

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == CALLBACK_WEATHER_SAVE_CITY_NO, WeatherBackupStates.waiting_for_save_decision)
async def handle_backup_save_city_no(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    logger.info(f"User {user_id} chose NOT to save city (from backup module). FSM data: {user_fsm_data}")
    
    city_display_name_from_prompt = user_fsm_data.get("current_backup_api_city_name", "–ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ")
    
    original_message_text = callback.message.text
    text_after_no_save = original_message_text.split("\n\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏", 1)[0] # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç
    text_after_no_save += f"\n\n(–ú—ñ—Å—Ç–æ <b>{city_display_name_from_prompt}</b> –Ω–µ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ)"

    answered_callback = False
    try:
        await callback.answer("–ú—ñ—Å—Ç–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        answered_callback = True
    except Exception as e: logger.warning(f"Could not answer callback in handle_backup_save_city_no: {e}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏
    reply_markup = get_current_weather_backup_keyboard() 
    await state.set_state(WeatherBackupStates.showing_current)
    try:
        await callback.message.edit_text(text_after_no_save, reply_markup=reply_markup)
    except Exception as e_edit:
        logger.error(f"Failed to edit message after user chose NOT to save city (backup): {e_edit}")
        try: await callback.message.answer(text_after_no_save, reply_markup=reply_markup)
        except Exception as e_ans: logger.error(f"Failed to send new message after user chose NOT to save city (backup): {e_ans}")

    if not answered_callback:
        try: await callback.answer()
        except: pass


@router.callback_query(F.data == f"{MAIN_WEATHER_PREFIX}:back_main", WeatherBackupStates.waiting_for_location)
async def handle_backup_weather_back_to_main_from_input(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} pressed 'Back to Main' from backup weather location input. Setting state to None.")
    await state.set_state(None)
    await show_main_menu_message(callback)
