# src/modules/weather_backup/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any
from datetime import datetime as dt_datetime, timedelta, timezone # –î–æ–¥–∞–Ω–æ timedelta, dt_datetime, timezone
import pytz # pytz –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è TZ_KYIV
from aiogram import Bot
from aiocache import cached

from src import config
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ DAYS_OF_WEEK_UK –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
from src.modules.weather.service import DAYS_OF_WEEK_UK 

logger = logging.getLogger(__name__)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTPS, —è–∫—â–æ API –π–æ–≥–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î, –¥–ª—è –±—ñ–ª—å—à–æ—ó –±–µ–∑–ø–µ–∫–∏.
# –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏, –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ HTTP, –∞–ª–µ HTTPS —î –∫—Ä–∞—â–∏–º.
# WEATHERAPI_BASE_URL = "http://api.weatherapi.com/v1"
WEATHERAPI_BASE_URL = "https://api.weatherapi.com/v1"


WEATHERAPI_CURRENT_URL = f"{WEATHERAPI_BASE_URL}/current.json"
WEATHERAPI_FORECAST_URL = f"{WEATHERAPI_BASE_URL}/forecast.json"

try:
    TZ_KYIV = pytz.timezone('Europe/Kyiv')
except pytz.exceptions.UnknownTimeZoneError:
    logger.error("Timezone 'Europe/Kyiv' not found for weather_backup. Using UTC as fallback.")
    TZ_KYIV = timezone.utc


MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

WEATHERAPI_CONDITION_CODE_TO_EMOJI = {
    1000: "‚òÄÔ∏è", 1003: "üå§Ô∏è", 1006: "‚òÅÔ∏è", 1009: "üå•Ô∏è", 1030: "üå´Ô∏è", 1063: "üå¶Ô∏è",
    1066: "üå®Ô∏è", 1069: "üå®Ô∏è", 1072: "üå®Ô∏è", 1087: "‚õàÔ∏è", 1114: "‚ùÑÔ∏è", 1117: "‚ùÑÔ∏è",
    1135: "üå´Ô∏è", 1147: "üå´Ô∏è", 1150: "üå¶Ô∏è", 1153: "üå¶Ô∏è", 1168: "üå®Ô∏è", 1171: "üå®Ô∏è",
    1180: "üå¶Ô∏è", 1183: "üåßÔ∏è", 1186: "üåßÔ∏è", 1189: "üåßÔ∏è", 1192: "üåßÔ∏è", 1195: "üåßÔ∏è",
    1198: "üå®Ô∏è", 1201: "üå®Ô∏è", 1204: "üå®Ô∏è", 1207: "üå®Ô∏è", 1210: "üå®Ô∏è", 1213: "‚ùÑÔ∏è",
    1216: "‚ùÑÔ∏è", 1219: "‚ùÑÔ∏è", 1222: "‚ùÑÔ∏è", 1225: "‚ùÑÔ∏è", 1237: "‚ùÑÔ∏è", 1240: "üåßÔ∏è",
    1243: "üåßÔ∏è", 1246: "üåßÔ∏è", 1249: "üå®Ô∏è", 1252: "üå®Ô∏è", 1255: "‚ùÑÔ∏è", 1258: "‚ùÑÔ∏è",
    1261: "‚ùÑÔ∏è", 1264: "‚ùÑÔ∏è", 1273: "‚õàÔ∏è", 1276: "‚õàÔ∏è", 1279: "‚õàÔ∏è‚ùÑÔ∏è", 1282: "‚õàÔ∏è‚ùÑÔ∏è",
}

WIND_DIRECTIONS_UK = {
    "N": "–ü–Ω", "NNE": "–ü–Ω-–ü–Ω-–°—Ö", "NE": "–ü–Ω-–°—Ö", "ENE": "–°—Ö-–ü–Ω-–°—Ö",
    "E": "–°—Ö", "ESE": "–°—Ö-–ü–¥-–°—Ö", "SE": "–ü–¥-–°—Ö", "SSE": "–ü–¥-–ü–¥-–°—Ö",
    "S": "–ü–¥", "SSW": "–ü–¥-–ü–¥-–ó—Ö", "SW": "–ü–¥-–ó—Ö", "WSW": "–ó—Ö-–ü–¥-–ó—Ö",
    "W": "–ó—Ö", "WNW": "–ó—Ö-–ü–Ω-–ó—Ö", "NW": "–ü–Ω-–ó—Ö", "NNW": "–ü–Ω-–ü–Ω-–ó—Ö",
    "NORTH": "–ü–Ω", "EAST": "–°—Ö", "SOUTH": "–ü–¥", "WEST": "–ó—Ö",
}

def _generate_weatherapi_error_response(code: int, message: str, error_details: Optional[Dict] = None) -> Dict[str, Any]:
    actual_code = error_details.get("code", code) if error_details else code
    actual_message = error_details.get("message", message) if error_details else message
    logger.error(f"WeatherAPI.com Error: Code {actual_code}, Message: {actual_message}")
    return {"error": {"code": actual_code, "message": actual_message, "source_api": "WeatherAPI.com"}}

def _weatherapi_generic_key_builder(func_ref: Any, *args: Any, **kwargs: Any) -> str:
    location_str = kwargs.get("location")
    if location_str is None and len(args) > 1 and isinstance(args[1], str):
        location_str = args[1]
    endpoint_name = kwargs.get("endpoint_name", "unknown_endpoint")
    days_arg = kwargs.get("days")
    safe_location = str(location_str).strip().lower() if location_str else "unknown_location"
    key_parts = ["weatherapi", endpoint_name, "location", safe_location]
    if days_arg is not None:
        key_parts.extend(["days", str(days_arg)])
    final_key = ":".join(key_parts)
    return final_key

@cached(ttl=config.CACHE_TTL_WEATHER_BACKUP,
        key_builder=lambda f, *a, **kw: _weatherapi_generic_key_builder(f, *a, **kw, endpoint_name="current"),
        namespace="weather_backup_service")
async def get_current_weather_weatherapi(bot: Bot, *, location: str) -> Dict[str, Any]:
    logger.info(f"Service get_current_weather_weatherapi: Called with location='{location}'")
    if not config.WEATHERAPI_COM_KEY:
        return _generate_weatherapi_error_response(500, "–ö–ª—é—á WeatherAPI.com (WEATHERAPI_COM_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
    if not location or not str(location).strip():
        logger.warning("Service get_current_weather_weatherapi: Received empty location.")
        return _generate_weatherapi_error_response(400, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")

    params = {"key": config.WEATHERAPI_COM_KEY, "q": str(location).strip(), "lang": "uk"}
    last_exception = None

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch current weather for '{location}' from WeatherAPI.com")
            async with aiohttp.ClientSession() as session:
                async with session.get(WEATHERAPI_CURRENT_URL, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text()
                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            if "error" in data:
                                error_content = data["error"]
                                logger.error(f"WeatherAPI.com returned an error in JSON for current weather '{location}': {error_content}")
                                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—ó–Ω–∏, —è–∫—â–æ API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –∑ –¥–∞–Ω–∏–º–∏ –ª–æ–∫–∞—Ü—ñ—ó
                                country_name = data.get("location", {}).get("country")
                                if country_name and country_name.lower() not in ["ukraine", "—É–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞—ó–Ω–∞"]:
                                     api_name = data.get("location", {}).get("name", location)
                                     return _generate_weatherapi_error_response(404, f"–ú—ñ—Å—Ç–æ '{api_name}' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏.", error_details=error_content)
                                return _generate_weatherapi_error_response(error_content.get("code", 500), error_content.get("message", "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ WeatherAPI"), error_details=error_content)
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—ó–Ω–∏ –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            country_name = data.get("location", {}).get("country")
                            if country_name and country_name.lower() not in ["ukraine", "—É–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞—ó–Ω–∞"]:
                                api_name = data.get("location", {}).get("name", location)
                                logger.warning(f"City '{location}' (API name: {api_name}) found in country {country_name}, not Ukraine (WeatherAPI).")
                                return _generate_weatherapi_error_response(404, f"–ú—ñ—Å—Ç–æ '{api_name}' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏.")

                            logger.debug(f"WeatherAPI.com current weather response for '{location}': status={response.status}, data preview={str(data)[:300]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from WeatherAPI.com for '{location}'. Response: {response_data_text[:500]}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ WeatherAPI.com")
                            return _generate_weatherapi_error_response(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.")
                    # ... (—Ä–µ—à—Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ HTTP) ...
                    elif response.status == 400:
                         logger.error(f"WeatherAPI.com returned 400 Bad Request for '{location}'. Response: {response_data_text[:500]}")
                         try: data = await response.json(content_type=None); api_error = data.get("error")
                         except: api_error = None
                         return _generate_weatherapi_error_response(400, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.", error_details=api_error)
                    elif response.status == 401:
                        logger.error("WeatherAPI.com returned 401 Unauthorized (Invalid API key).")
                        return _generate_weatherapi_error_response(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø–æ–≥–æ–¥–∏.")
                    elif response.status == 403:
                        logger.error("WeatherAPI.com returned 403 Forbidden (Key disabled or over quota).")
                        return _generate_weatherapi_error_response(403, "–î–æ—Å—Ç—É–ø –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø–æ–≥–æ–¥–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç).")
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} or Rate limit")
                        logger.warning(f"Attempt {attempt + 1}: WeatherAPI.com Server/RateLimit Error {response.status} for '{location}'. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from WeatherAPI.com for '{location}'. Response: {response_data_text[:200]}")
                        last_exception = Exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {response.status}")
                        return _generate_weatherapi_error_response(response.status, f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to WeatherAPI.com for '{location}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching current weather from WeatherAPI.com for '{location}': {e}", exc_info=True)
            return _generate_weatherapi_error_response(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏.")

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay}s before next WeatherAPI.com current weather retry for '{location}'...")
            await asyncio.sleep(delay)
        else:
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '{location}' –ø—ñ—Å–ª—è {MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            final_error_code = 503
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504
            return _generate_weatherapi_error_response(final_error_code, error_message)
    return _generate_weatherapi_error_response(500, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '{location}' (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")

@cached(ttl=config.CACHE_TTL_WEATHER_BACKUP,
        key_builder=lambda f, *a, **kw: _weatherapi_generic_key_builder(f, *a, **kw, endpoint_name="forecast"),
        namespace="weather_backup_service")
async def get_forecast_weatherapi(bot: Bot, *, location: str, days: int = 3) -> Dict[str, Any]:
    logger.info(f"Service get_forecast_weatherapi: Called for location='{location}', days={days}")
    if not config.WEATHERAPI_COM_KEY:
        return _generate_weatherapi_error_response(500, "–ö–ª—é—á WeatherAPI.com (WEATHERAPI_COM_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.")
    if not location or not str(location).strip():
        logger.warning("Service get_forecast_weatherapi: Received empty location.")
        return _generate_weatherapi_error_response(400, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")
    if not 1 <= days <= 10: # WeatherAPI –∑–∞–∑–≤–∏—á–∞–π –¥–æ–∑–≤–æ–ª—è—î –¥–æ 3 –¥–Ω—ñ–≤ –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—ñ, –¥–æ 10-14 –Ω–∞ –ø–ª–∞—Ç–Ω–∏—Ö
        logger.warning(f"Service get_forecast_weatherapi: Invalid number of days requested: {days}. API might default or error.")
        # –ù–µ –∑–º—ñ–Ω—é—î–º–æ 'days' —Ç—É—Ç, –¥–æ–∑–≤–æ–ª—è—î–º–æ API –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ.

    params = {"key": config.WEATHERAPI_COM_KEY, "q": str(location).strip(), "days": days, "lang": "uk", "alerts": "no", "aqi": "no"}
    last_exception = None

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch {days}-day forecast for '{location}' from WeatherAPI.com")
            async with aiohttp.ClientSession() as session:
                async with session.get(WEATHERAPI_FORECAST_URL, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text()
                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            if "error" in data:
                                error_content = data["error"]
                                logger.error(f"WeatherAPI.com returned an error in JSON for forecast '{location}', {days}d: {error_content}")
                                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—ó–Ω–∏
                                country_name = data.get("location", {}).get("country")
                                if country_name and country_name.lower() not in ["ukraine", "—É–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞—ó–Ω–∞"]:
                                     api_name = data.get("location", {}).get("name", location)
                                     return _generate_weatherapi_error_response(404, f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º—ñ—Å—Ç–∞ '{api_name}' –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –≤–æ–Ω–æ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏.", error_details=error_content)
                                return _generate_weatherapi_error_response(error_content.get("code", 500), error_content.get("message", "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ WeatherAPI –ø—Ä–æ–≥–Ω–æ–∑—É"), error_details=error_content)
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—ó–Ω–∏ –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            country_name = data.get("location", {}).get("country")
                            if country_name and country_name.lower() not in ["ukraine", "—É–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞—ó–Ω–∞"]:
                                api_name = data.get("location", {}).get("name", location)
                                logger.warning(f"Forecast for city '{location}' (API name: {api_name}) is for country {country_name}, not Ukraine (WeatherAPI).")
                                return _generate_weatherapi_error_response(404, f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º—ñ—Å—Ç–∞ '{api_name}' –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –≤–æ–Ω–æ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏.")

                            logger.debug(f"WeatherAPI.com forecast response for '{location}', {days}d: status={response.status}, data preview={str(data)[:300]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON forecast from WeatherAPI.com for '{location}'. Response: {response_data_text[:500]}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ WeatherAPI.com (–ø—Ä–æ–≥–Ω–æ–∑)")
                            return _generate_weatherapi_error_response(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.")
                    # ... (—Ä–µ—à—Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ HTTP —è–∫ —É get_current_weather_weatherapi) ...
                    elif response.status == 400:
                         logger.error(f"WeatherAPI.com returned 400 Bad Request for forecast '{location}'. Response: {response_data_text[:500]}")
                         try: data = await response.json(content_type=None); api_error = data.get("error")
                         except: api_error = None
                         return _generate_weatherapi_error_response(400, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.", error_details=api_error)
                    elif response.status == 401:
                        logger.error("WeatherAPI.com returned 401 Unauthorized for forecast (Invalid API key).")
                        return _generate_weatherapi_error_response(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.")
                    elif response.status == 403:
                        logger.error("WeatherAPI.com returned 403 Forbidden for forecast (Key disabled or over quota).")
                        return _generate_weatherapi_error_response(403, "–î–æ—Å—Ç—É–ø –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} or Rate limit")
                        logger.warning(f"Attempt {attempt + 1}: WeatherAPI.com Server/RateLimit Error {response.status} for forecast '{location}'. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from WeatherAPI.com for forecast '{location}'. Response: {response_data_text[:200]}")
                        last_exception = Exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É: {response.status}")
                        return _generate_weatherapi_error_response(response.status, f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É: {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to WeatherAPI.com for forecast '{location}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching forecast from WeatherAPI.com for '{location}': {e}", exc_info=True)
            return _generate_weatherapi_error_response(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É.")

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay}s before next WeatherAPI.com forecast retry for '{location}'...")
            await asyncio.sleep(delay)
        else:
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{location}' ({days}–¥) –ø—ñ—Å–ª—è {MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            final_error_code = 503
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504
            return _generate_weatherapi_error_response(final_error_code, error_message)
    return _generate_weatherapi_error_response(500, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{location}' ({days}–¥) (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")

def format_weather_backup_message(data: Dict[str, Any], requested_location: str) -> str:
    if "error" in data and isinstance(data["error"], dict) and "source_api" in data["error"]:
        error_info = data["error"]
        error_code = error_info.get('code', 'N/A')
        error_message = error_info.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API')
        # –î–æ–¥–∞—î–º–æ requested_location –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"
    
    # –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, —è–∫—É –ø–æ–≤–µ—Ä–Ω—É–ª–æ —Å–∞–º–µ API WeatherAPI (–±–µ–∑ –Ω–∞—à–æ—ó –æ–±–≥–æ—Ä—Ç–∫–∏ "source_api")
    if "error" in data and isinstance(data["error"], dict) and "message" in data["error"]:
         error_info = data["error"]
         error_code = error_info.get('code', 'API')
         error_message = error_info.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏')
         logger.warning(f"Formatting direct API error for backup weather: {error_info} for location {requested_location}")
         return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

    location = data.get("location", {})
    current = data.get("current", {})
    condition = current.get("condition", {})

    city_name_api = location.get("name")
    region_api = location.get("region")
    
    display_location = city_name_api if city_name_api else requested_location
    if city_name_api and region_api and region_api.lower() != city_name_api.lower():
        display_location = f"{city_name_api}, {region_api}"
    elif not city_name_api and region_api:
        display_location = f"{requested_location} ({region_api})"

    temp_c = current.get("temp_c")
    feelslike_c = current.get("feelslike_c")
    condition_text = condition.get("text", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
    condition_code = condition.get("code")
    wind_kph = current.get("wind_kph")
    wind_dir_en = current.get("wind_dir", "").upper()
    pressure_mb = current.get("pressure_mb")
    humidity = current.get("humidity")
    cloud = current.get("cloud")
    is_day = current.get("is_day", 1)
    
    localtime_epoch = location.get("localtime_epoch")
    time_info_str = ""
    if localtime_epoch:
        try:
            dt_local = dt_datetime.fromtimestamp(localtime_epoch)
            current_time_str = dt_local.strftime('%H:%M, %d.%m.%Y')
            time_info_str = f"<i>–î–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–∞ {current_time_str} (–º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å)</i>"
        except Exception as e:
            logger.warning(f"Could not format localtime_epoch {localtime_epoch} from WeatherAPI: {e}")

    emoji = WEATHERAPI_CONDITION_CODE_TO_EMOJI.get(condition_code, "üõ∞Ô∏è")
    if condition_code == 1000 and not is_day: emoji = "üåô"

    pressure_mmhg_str = "N/A"
    if pressure_mb is not None:
        try: pressure_mmhg_str = f"{int(pressure_mb * 0.750062)}"
        except (ValueError, TypeError) as e: logger.warning(f"Could not convert pressure {pressure_mb} (mb) to mmhg: {e}")

    wind_mps_str = "N/A"
    if wind_kph is not None:
        try:
            wind_mps = float(wind_kph) * 1000 / 3600
            wind_mps_str = f"{wind_mps:.1f}"
        except (ValueError, TypeError) as e: logger.warning(f"Could not convert wind speed {wind_kph} (kph) to m/s: {e}")

    wind_dir_uk = WIND_DIRECTIONS_UK.get(wind_dir_en, wind_dir_en if wind_dir_en else "N/A")

    message_lines = [f"<b>–†–µ–∑–µ—Ä–≤–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤: {display_location}</b> {emoji}"]
    if temp_c is not None and feelslike_c is not None: message_lines.append(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c:.1f}¬∞C</b> (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feelslike_c:.1f}¬∞C)")
    elif temp_c is not None: message_lines.append(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c:.1f}¬∞C</b>")
    message_lines.append(f"üå¨Ô∏è –í—ñ—Ç–µ—Ä: {wind_mps_str} –º/—Å ({wind_dir_uk})")
    if humidity is not None: message_lines.append(f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%")
    message_lines.append(f"üå´Ô∏è –¢–∏—Å–∫: {pressure_mmhg_str} –º–º —Ä—Ç.—Å—Ç.")
    if cloud is not None: message_lines.append(f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {cloud}%")
    message_lines.append(f"üìù –û–ø–∏—Å: {condition_text.capitalize()}")
    if time_info_str: message_lines.append(time_info_str)
    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>")
    return "\n".join(filter(None, message_lines))

def format_forecast_backup_message(data: Dict[str, Any], requested_location: str) -> str:
    if "error" in data and isinstance(data["error"], dict) and "source_api" in data["error"]:
        error_info = data["error"]
        error_code = error_info.get('code', 'N/A')
        error_message = error_info.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É')
        return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"
    if "error" in data and isinstance(data["error"], dict) and "message" in data["error"]:
         error_info = data["error"]
         error_code = error_info.get('code', 'API')
         error_message = error_info.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ–≥–Ω–æ–∑—É')
         logger.warning(f"Formatting direct API error for backup forecast: {error_info} for location {requested_location}")
         return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

    location_data = data.get("location", {})
    forecast_data = data.get("forecast", {})
    forecast_days_list = forecast_data.get("forecastday", [])
    
    city_name_api = location_data.get("name")
    display_city_name = city_name_api if city_name_api else requested_location
    
    message_lines = [f"<b>–†–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {display_city_name}</b>\n"]

    if not forecast_days_list:
        message_lines.append("üò• –ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ).")
    else:
        days_shown = 0
        for day_data in forecast_days_list:
            if days_shown >= 3: # WeatherAPI –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –∑–∞–∑–≤–∏—á–∞–π –¥–∞—î 3 –¥–Ω—ñ
                break
            if not isinstance(day_data, dict): continue

            date_epoch = day_data.get("date_epoch")
            day_info = day_data.get("day", {})
            condition = day_info.get("condition", {})

            date_str_formatted = day_data.get("date", "N/A")
            if date_epoch:
                try:
                    dt_obj_local = dt_datetime.fromtimestamp(date_epoch)
                    day_name_en = dt_obj_local.strftime('%A')
                    day_name_uk = DAYS_OF_WEEK_UK.get(day_name_en, day_name_en)
                    date_str_formatted = dt_obj_local.strftime(f'%d.%m ({day_name_uk})')
                except Exception as e:
                    logger.warning(f"Could not format backup forecast date_epoch {date_epoch}: {e}")
            
            avg_temp_c = day_info.get("avgtemp_c")
            max_temp_c = day_info.get("maxtemp_c")
            min_temp_c = day_info.get("mintemp_c")
            condition_text = condition.get("text", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
            condition_code = condition.get("code")
            
            emoji = WEATHERAPI_CONDITION_CODE_TO_EMOJI.get(condition_code, "üõ∞Ô∏è")
            
            temp_display_parts = []
            if avg_temp_c is not None: temp_display_parts.append(f"—Å–µ—Ä. {avg_temp_c:.0f}¬∞C")
            if min_temp_c is not None and max_temp_c is not None :
                 temp_display_parts.append(f"(–≤—ñ–¥ {min_temp_c:.0f}¬∞ –¥–æ {max_temp_c:.0f}¬∞)")
            temp_display_str = ", ".join(temp_display_parts) if temp_display_parts else "N/A"

            message_lines.append(
                f"<b>{date_str_formatted}:</b> {temp_display_str}, {condition_text.capitalize()} {emoji}"
            )
            days_shown +=1
            
    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>")
    return "\n".join(filter(None, message_lines))

# --- –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ä–µ–∑–µ—Ä–≤) ---
def format_tomorrow_forecast_backup_message(
    forecast_api_response: Dict[str, Any], # –¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ get_forecast_weatherapi
    requested_location: str
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ–π –¥–µ–Ω—å –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥ get_forecast_weatherapi.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É API —É –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if "error" in forecast_api_response and isinstance(forecast_api_response["error"], dict) and \
           ("source_api" in forecast_api_response["error"] or "message" in forecast_api_response["error"]):
            error_info = forecast_api_response["error"]
            error_code = error_info.get('code', 'N/A')
            error_message = error_info.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.')
            logger.warning(f"Tomorrow's backup forecast: API error for '{requested_location}'. Code: {error_code}, Msg: {error_message}")
            return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

        location_data = forecast_api_response.get("location", {})
        forecast_data = forecast_api_response.get("forecast", {})
        forecast_days_list = forecast_data.get("forecastday", [])
        
        city_name_api = location_data.get("name")
        display_city_name = city_name_api if city_name_api else requested_location

        if not forecast_days_list:
            logger.warning(f"Tomorrow's backup forecast: Forecast list is empty for '{display_city_name}'.")
            return f"üò• –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è <b>{display_city_name}</b> –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö)."

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤—Ç—Ä–∞—à–Ω—é –¥–∞—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å —Å–µ—Ä–≤–µ—Ä–∞, –æ—Å–∫—ñ–ª—å–∫–∏ date_epoch –≤—ñ–¥ API –≤–∂–µ –ª–æ–∫–∞–ª—å–Ω–∏–π)
        # –ê–±–æ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ TZ_KYIV –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ, —è–∫—â–æ localtime_epoch –Ω–µ –∑–∞–≤–∂–¥–∏ –Ω–∞–¥—ñ–π–Ω–∏–π
        now_for_date = dt_datetime.now(TZ_KYIV) if TZ_KYIV else dt_datetime.now()
        tomorrow_date_target = (now_for_date + timedelta(days=1)).strftime('%Y-%m-%d')
        
        logger.debug(f"Tomorrow's backup forecast: Looking for date {tomorrow_date_target} for '{display_city_name}'")

        tomorrow_day_data = None
        for day_data_item in forecast_days_list:
            if isinstance(day_data_item, dict) and day_data_item.get("date") == tomorrow_date_target:
                tomorrow_day_data = day_data_item
                break
        
        if not tomorrow_day_data:
            logger.warning(f"Tomorrow's backup forecast: No forecast data found for date {tomorrow_date_target} for '{display_city_name}'. API returned {len(forecast_days_list)} days.")
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î —Ö–æ—á–∞ –± –ø–µ—Ä—à–∏–π –¥–µ–Ω—å, —è–∫—â–æ –∑–∞–ø–∏—Ç –±—É–≤ –Ω–∞ 1 –¥–µ–Ω—å (–∑–∞–≤—Ç—Ä–∞)
            if len(forecast_days_list) > 0 and forecast_days_list[0].get("date") == tomorrow_date_target :
                 tomorrow_day_data = forecast_days_list[0]
            elif len(forecast_days_list) > 1 and forecast_days_list[1].get("date") == tomorrow_date_target : # WeatherAPI –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ + 2 –¥–Ω—ñ, —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–∞ 3 –¥–Ω—ñ
                 tomorrow_day_data = forecast_days_list[1]
            else:
                return f"üò• –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è <b>{display_city_name}</b> –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –Ω–∞ {tomorrow_date_target})."


        day_info = tomorrow_day_data.get("day", {})
        condition = day_info.get("condition", {})
        astro_info = tomorrow_day_data.get("astro", {}) # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ö—ñ–¥/–∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è

        date_str_formatted = tomorrow_date_target # –ú–æ–∂–Ω–∞ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤—ñ—à–µ
        try:
            dt_obj_local = dt_datetime.strptime(tomorrow_date_target, '%Y-%m-%d')
            day_name_en = dt_obj_local.strftime('%A')
            day_name_uk = DAYS_OF_WEEK_UK.get(day_name_en, day_name_en)
            date_str_formatted = dt_obj_local.strftime(f'%d.%m.%Y ({day_name_uk})')
        except Exception as e_date:
            logger.warning(f"Could not re-format tomorrow's date string '{tomorrow_date_target}': {e_date}")


        maxtemp_c = day_info.get("maxtemp_c")
        mintemp_c = day_info.get("mintemp_c")
        avgtemp_c = day_info.get("avgtemp_c")
        condition_text = condition.get("text", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
        condition_code = condition.get("code")
        maxwind_kph = day_info.get("maxwind_kph")
        totalprecip_mm = day_info.get("totalprecip_mm")
        avghumidity = day_info.get("avghumidity")
        
        emoji = WEATHERAPI_CONDITION_CODE_TO_EMOJI.get(condition_code, "üõ∞Ô∏è")

        message_lines = [f"‚òÄÔ∏è <b>–†–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, {date_str_formatted}, –¥–ª—è: {display_city_name}</b> {emoji}\n"]
        
        if avgtemp_c is not None:
            message_lines.append(f"üå°Ô∏è –°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avgtemp_c:.0f}¬∞C")
        if mintemp_c is not None and maxtemp_c is not None:
            message_lines.append(f"üìà –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –≤—ñ–¥ {mintemp_c:.0f}¬∞C –¥–æ {maxtemp_c:.0f}¬∞C")
        
        message_lines.append(f"üìù –û–ø–∏—Å: {condition_text.capitalize()}")
        
        if maxwind_kph is not None:
            wind_mps = maxwind_kph * 1000 / 3600
            message_lines.append(f"üå¨Ô∏è –í—ñ—Ç–µ—Ä: –¥–æ {wind_mps:.1f} –º/—Å")
        
        if totalprecip_mm is not None and totalprecip_mm > 0:
            message_lines.append(f"üíß –û–ø–∞–¥–∏: {totalprecip_mm:.1f} –º–º")
        elif totalprecip_mm is not None: # totalprecip_mm == 0
             message_lines.append(f"üíß –û–ø–∞–¥–∏: –±–µ–∑ —ñ—Å—Ç–æ—Ç–Ω–∏—Ö –æ–ø–∞–¥—ñ–≤")


        if avghumidity is not None:
            message_lines.append(f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: ~{avghumidity:.0f}%")

        if astro_info.get("sunrise") and astro_info.get("sunset"):
            message_lines.append(f"üåÖ –°—Ö—ñ–¥: {astro_info['sunrise']} üåá –ó–∞—Ö—ñ–¥: {astro_info['sunset']}")
            
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–Ω–∞–ª—ñ–∑—É—é—á–∏ `tomorrow_day_data.get("hour", [])`
        # –ê–ª–µ –¥–ª—è "–ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞" –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ.

        message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤). –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏—Å—è.</tg-spoiler>")
        return "\n".join(filter(None, message_lines))

    except Exception as e:
        logger.exception(f"Error formatting tomorrow's backup forecast for '{requested_location}': {e}", exc_info=True)
        return f"üò• –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è <b>{requested_location}</b>."

# --- –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ä–µ–∑–µ—Ä–≤) ---