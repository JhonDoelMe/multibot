# src/modules/weather_backup/service.py

import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any, List # List –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É, –∞–ª–µ –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è
from datetime import datetime # timedelta –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
import pytz
from aiogram import Bot
from aiocache import cached

from src import config
# SHARED_ICON_EMOJI —Ç–∞ DAYS_OF_WEEK_UK –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—É—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ,
# –∞–ª–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ, —è–∫—â–æ –ª–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–µ —Å–∫–ª–∞–¥–Ω—ñ—à–æ—é
# from src.modules.weather.service import ICON_CODE_TO_EMOJI as SHARED_ICON_EMOJI
from src.modules.weather.service import DAYS_OF_WEEK_UK # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ format_forecast_backup_message

logger = logging.getLogger(__name__)

WEATHERAPI_BASE_URL = "http://api.weatherapi.com/v1" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ https –¥–ª—è –±–µ–∑–ø–µ–∫–∏, —è–∫—â–æ API –ø—ñ–¥—Ç—Ä–∏–º—É—î
# –ó–∞–∑–≤–∏—á–∞–π API –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å HTTPS, –≤–∞—Ä—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é WeatherAPI.com.
# –Ø–∫—â–æ HTTPS –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ HTTP. –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –∑–∞–ª–∏—à—É HTTP, —è–∫ –±—É–ª–æ.
# WEATHERAPI_BASE_URL = "https://api.weatherapi.com/v1"


WEATHERAPI_CURRENT_URL = f"{WEATHERAPI_BASE_URL}/current.json"
WEATHERAPI_FORECAST_URL = f"{WEATHERAPI_BASE_URL}/forecast.json"

TZ_KYIV = pytz.timezone('Europe/Kyiv') # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å
MAX_RETRIES = config.MAX_RETRIES
INITIAL_DELAY = config.INITIAL_DELAY

WEATHERAPI_CONDITION_CODE_TO_EMOJI = {
    1000: "‚òÄÔ∏è", 1003: "üå§Ô∏è", 1006: "‚òÅÔ∏è", 1009: "üå•Ô∏è", 1030: "üå´Ô∏è", 1063: "üå¶Ô∏è",
    1066: "üå®Ô∏è", 1069: "üå®Ô∏è", 1072: "üå®Ô∏è", 1087: "‚õàÔ∏è", 1114: "‚ùÑÔ∏è", 1117: "‚ùÑÔ∏è",
    1135: "üå´Ô∏è", 1147: "üå´Ô∏è", 1150: "üå¶Ô∏è", 1153: "üå¶Ô∏è", 1168: "üå®Ô∏è", 1171: "üå®Ô∏è",
    1180: "üå¶Ô∏è", 1183: "üåßÔ∏è", 1186: "üåßÔ∏è", 1189: "üåßÔ∏è", 1192: "üåßÔ∏è", 1195: "üåßÔ∏è",
    1198: "üå®Ô∏è", 1201: "üå®Ô∏è", 1204: "üå®Ô∏è", 1207: "üå®Ô∏è", 1210: "üå®Ô∏è", 1213: "‚ùÑÔ∏è",
    1216: "‚ùÑÔ∏è", 1219: "‚ùÑÔ∏è", 1222: "‚ùÑÔ∏è", 1225: "‚ùÑÔ∏è", 1237: "‚ùÑÔ∏è", 1240: "üåßÔ∏è",
    1243: "üåßÔ∏è", 1246: "üåßÔ∏è", 1249: "üå®Ô∏è", 1252: "üå®Ô∏è", 1255: "‚ùÑÔ∏è", 1258: "‚ùÑÔ∏è",
    1261: "‚ùÑÔ∏è", 1264: "‚ùÑÔ∏è", 1273: "‚õàÔ∏è", 1276: "‚õàÔ∏è", 1279: "‚õàÔ∏è‚ùÑÔ∏è", 1282: "‚õàÔ∏è‚ùÑÔ∏è",
}

WIND_DIRECTIONS_UK = {
    "N": "–ü–Ω", "NNE": "–ü–Ω-–ü–Ω-–°—Ö", "NE": "–ü–Ω-–°—Ö", "ENE": "–°—Ö-–ü–Ω-–°—Ö",
    "E": "–°—Ö", "ESE": "–°—Ö-–ü–¥-–°—Ö", "SE": "–ü–¥-–°—Ö", "SSE": "–ü–¥-–ü–¥-–°—Ö",
    "S": "–ü–¥", "SSW": "–ü–¥-–ü–¥-–ó—Ö", "SW": "–ü–¥-–ó—Ö", "WSW": "–ó—Ö-–ü–¥-–ó—Ö",
    "W": "–ó—Ö", "WNW": "–ó—Ö-–ü–Ω-–ó—Ö", "NW": "–ü–Ω-–ó—Ö", "NNW": "–ü–Ω-–ü–Ω-–ó—Ö",
    "NORTH": "–ü–Ω", "EAST": "–°—Ö", "SOUTH": "–ü–¥", "WEST": "–ó—Ö", # –î–æ–¥–∞–Ω–æ –ø–æ–≤–Ω—ñ –Ω–∞–∑–≤–∏ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
}

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
def _generate_weatherapi_error_response(code: int, message: str, error_details: Optional[Dict] = None) -> Dict[str, Any]:
    # WeatherAPI —á–∞—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ {"error": {"code": ..., "message": ...}}
    # –ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–µ –¥–ª—è –±—ñ–ª—å—à–æ—ó –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó.
    actual_code = error_details.get("code", code) if error_details else code
    actual_message = error_details.get("message", message) if error_details else message

    logger.error(f"WeatherAPI.com Error: Code {actual_code}, Message: {actual_message}")
    return {"error": {"code": actual_code, "message": actual_message, "source_api": "WeatherAPI.com"}}


def _weatherapi_generic_key_builder(func_ref: Any, *args: Any, **kwargs: Any) -> str:
    # args[0] –∑–∞–∑–≤–∏—á–∞–π bot, args[1] - location –∞–±–æ kwargs['location']
    # kwargs['location'] –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ —ñ–º–µ–Ω–æ–≤–∞–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
    location_str = kwargs.get("location")
    if location_str is None and len(args) > 1 and isinstance(args[1], str):
        location_str = args[1] # –Ø–∫—â–æ location –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ –ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç

    endpoint_name = kwargs.get("endpoint_name", "unknown_endpoint")
    days_arg = kwargs.get("days") # –ú–æ–∂–µ –±—É—Ç–∏ None

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è location_str
    safe_location = str(location_str).strip().lower() if location_str else "unknown_location"

    key_parts = ["weatherapi", endpoint_name, "location", safe_location]
    if days_arg is not None:
        key_parts.extend(["days", str(days_arg)])
    
    final_key = ":".join(key_parts)
    # logger.debug(f"Generated cache key for WeatherAPI: {final_key} (func: {func_ref.__name__}, location: '{location_str}', days: {days_arg})")
    return final_key

@cached(ttl=config.CACHE_TTL_WEATHER_BACKUP,
        key_builder=lambda f, *a, **kw: _weatherapi_generic_key_builder(f, *a, **kw, endpoint_name="current"),
        namespace="weather_backup_service")
async def get_current_weather_weatherapi(bot: Bot, *, location: str) -> Dict[str, Any]:
    logger.info(f"Service get_current_weather_weatherapi: Called with location='{location}'")
    if not config.WEATHERAPI_COM_KEY:
        return _generate_weatherapi_error_response(500, "–ö–ª—é—á WeatherAPI.com (WEATHERAPI_COM_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
    if not location or not str(location).strip():
        logger.warning("Service get_current_weather_weatherapi: Received empty location.")
        return _generate_weatherapi_error_response(400, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")

    params = {"key": config.WEATHERAPI_COM_KEY, "q": str(location).strip(), "lang": "uk"}
    last_exception = None

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch current weather for '{location}' from WeatherAPI.com")
            async with aiohttp.ClientSession() as session:
                async with session.get(WEATHERAPI_CURRENT_URL, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text() # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
                    
                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            # WeatherAPI –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É –≤ —Ç—ñ–ª—ñ JSON, –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ HTTP 200, —è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫ –∑ –∫–ª—é—á–µ–º —á–∏ –∑–∞–ø–∏—Ç–æ–º
                            if "error" in data:
                                logger.error(f"WeatherAPI.com returned an error in JSON for current weather '{location}': {data['error']}")
                                return _generate_weatherapi_error_response(data["error"].get("code", 500), data["error"].get("message", "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ WeatherAPI"), error_details=data["error"])
                            logger.debug(f"WeatherAPI.com current weather response for '{location}': status={response.status}, data preview={str(data)[:300]}")
                            return data # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON from WeatherAPI.com for '{location}'. Response: {response_data_text[:500]}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ WeatherAPI.com")
                            return _generate_weatherapi_error_response(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.")
                    # –û–±—Ä–æ–±–∫–∞ HTTP –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ WeatherAPI
                    elif response.status == 400: # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç
                         logger.error(f"WeatherAPI.com returned 400 Bad Request for '{location}'. Response: {response_data_text[:500]}")
                         try: data = await response.json(content_type=None); api_error = data.get("error")
                         except: api_error = None
                         return _generate_weatherapi_error_response(400, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API.", error_details=api_error)
                    elif response.status == 401: # –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á
                        logger.error("WeatherAPI.com returned 401 Unauthorized (Invalid API key).")
                        return _generate_weatherapi_error_response(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø–æ–≥–æ–¥–∏.")
                    elif response.status == 403: # –ö–ª—é—á –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
                        logger.error("WeatherAPI.com returned 403 Forbidden (Key disabled or over quota).")
                        return _generate_weatherapi_error_response(403, "–î–æ—Å—Ç—É–ø –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø–æ–≥–æ–¥–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç).")
                    elif response.status >= 500 or response.status == 429: # –°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–±–æ Rate Limit
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} or Rate limit")
                        logger.warning(f"Attempt {attempt + 1}: WeatherAPI.com Server/RateLimit Error {response.status} for '{location}'. Retrying...")
                    else: # –Ü–Ω—à—ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from WeatherAPI.com for '{location}'. Response: {response_data_text[:200]}")
                        last_exception = Exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {response.status}")
                        return _generate_weatherapi_error_response(response.status, f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to WeatherAPI.com for '{location}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching current weather from WeatherAPI.com for '{location}': {e}", exc_info=True)
            return _generate_weatherapi_error_response(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –ø–æ–≥–æ–¥–∏.")

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay}s before next WeatherAPI.com current weather retry for '{location}'...")
            await asyncio.sleep(delay)
        else: # –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '{location}' –ø—ñ—Å–ª—è {MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            
            final_error_code = 503 # Service Unavailable
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504 # Gateway Timeout
            
            return _generate_weatherapi_error_response(final_error_code, error_message)
    return _generate_weatherapi_error_response(500, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ –ø–æ–≥–æ–¥–∏ –¥–ª—è '{location}' (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")


@cached(ttl=config.CACHE_TTL_WEATHER_BACKUP,
        key_builder=lambda f, *a, **kw: _weatherapi_generic_key_builder(f, *a, **kw, endpoint_name="forecast"),
        namespace="weather_backup_service")
async def get_forecast_weatherapi(bot: Bot, *, location: str, days: int = 3) -> Dict[str, Any]:
    logger.info(f"Service get_forecast_weatherapi: Called for location='{location}', days={days}")
    if not config.WEATHERAPI_COM_KEY:
        return _generate_weatherapi_error_response(500, "–ö–ª—é—á WeatherAPI.com (WEATHERAPI_COM_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.")
    if not location or not str(location).strip():
        logger.warning("Service get_forecast_weatherapi: Received empty location.")
        return _generate_weatherapi_error_response(400, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏.")
    
    # WeatherAPI –æ–±–º–µ–∂—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É (–∑–∞–∑–≤–∏—á–∞–π 3)
    # –ü–ª–∞—Ç–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ –º–æ–∂—É—Ç—å –¥–æ–∑–≤–æ–ª—è—Ç–∏ –±—ñ–ª—å—à–µ (–¥–æ 10 –∞–±–æ 14).
    # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–º–µ–∂—É—î–º–æ –¥–æ 10, —è–∫ —É –≤–∏—Ö—ñ–¥–Ω–æ–º—É –∫–æ–¥—ñ, –∞–ª–µ –≤–∞—Ä—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ª—ñ–º—ñ—Ç–∏ API.
    if not 1 <= days <= 10: # WeatherAPI –¥–æ–∑–≤–æ–ª—è—î –¥–æ 10 –¥–Ω—ñ–≤ (–∞–±–æ 14 –¥–ª—è –¥–µ—è–∫–∏—Ö –ø–ª–∞–Ω—ñ–≤)
        logger.warning(f"Service get_forecast_weatherapi: Invalid number of days requested: {days}. Clamping to 3-10 range or using API default if not specified.")
        # –Ø–∫—â–æ –¥–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª—ñ, API –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É. –Ø–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ - —Ç–µ–∂.
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 3, –∞–±–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ API –≤–∏—Ä—ñ—à–∏—Ç–∏, —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä days –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –∑–∞–ª–∏—à–∏–º–æ —è–∫ –±—É–ª–æ, –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º. API –∑–∞–∑–≤–∏—á–∞–π –æ–±—Ä—ñ–∑–∞—î –¥–æ –º–∞–∫—Å. –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ.
        # days = 3 # –ê–±–æ –º–æ–∂–Ω–∞ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä days, —è–∫—â–æ —Ö–æ—á–µ–º–æ –¥–µ—Ñ–æ–ª—Ç –≤—ñ–¥ API (–∑–∞–∑–≤–∏—á–∞–π 3)

    params = {"key": config.WEATHERAPI_COM_KEY, "q": str(location).strip(), "days": days, "lang": "uk", "alerts": "no", "aqi": "no"}
    last_exception = None

    for attempt in range(MAX_RETRIES):
        try:
            logger.debug(f"Attempt {attempt + 1}/{MAX_RETRIES} to fetch {days}-day forecast for '{location}' from WeatherAPI.com")
            async with aiohttp.ClientSession() as session:
                async with session.get(WEATHERAPI_FORECAST_URL, params=params, timeout=config.API_REQUEST_TIMEOUT) as response:
                    response_data_text = await response.text()
                    if response.status == 200:
                        try:
                            data = await response.json(content_type=None)
                            if "error" in data:
                                logger.error(f"WeatherAPI.com returned an error in JSON for forecast '{location}', {days}d: {data['error']}")
                                return _generate_weatherapi_error_response(data["error"].get("code", 500), data["error"].get("message", "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ WeatherAPI –ø—Ä–æ–≥–Ω–æ–∑—É"), error_details=data["error"])
                            logger.debug(f"WeatherAPI.com forecast response for '{location}', {days}d: status={response.status}, data preview={str(data)[:300]}")
                            return data
                        except aiohttp.ContentTypeError:
                            logger.error(f"Attempt {attempt + 1}: Failed to decode JSON forecast from WeatherAPI.com for '{location}'. Response: {response_data_text[:500]}")
                            last_exception = Exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ WeatherAPI.com (–ø—Ä–æ–≥–Ω–æ–∑)")
                            return _generate_weatherapi_error_response(500, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.")
                    elif response.status == 400:
                         logger.error(f"WeatherAPI.com returned 400 Bad Request for forecast '{location}'. Response: {response_data_text[:500]}")
                         try: data = await response.json(content_type=None); api_error = data.get("error")
                         except: api_error = None
                         return _generate_weatherapi_error_response(400, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.", error_details=api_error)
                    elif response.status == 401:
                        logger.error("WeatherAPI.com returned 401 Unauthorized for forecast (Invalid API key).")
                        return _generate_weatherapi_error_response(401, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É.")
                    elif response.status == 403:
                        logger.error("WeatherAPI.com returned 403 Forbidden for forecast (Key disabled or over quota).")
                        return _generate_weatherapi_error_response(403, "–î–æ—Å—Ç—É–ø –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
                    elif response.status >= 500 or response.status == 429:
                        last_exception = aiohttp.ClientResponseError(response.request_info, response.history, status=response.status, message=f"Server error {response.status} or Rate limit")
                        logger.warning(f"Attempt {attempt + 1}: WeatherAPI.com Server/RateLimit Error {response.status} for forecast '{location}'. Retrying...")
                    else:
                        logger.error(f"Attempt {attempt + 1}: Unexpected status {response.status} from WeatherAPI.com for forecast '{location}'. Response: {response_data_text[:200]}")
                        last_exception = Exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É: {response.status}")
                        return _generate_weatherapi_error_response(response.status, f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É: {response.status}")
        except (aiohttp.ClientConnectorError, asyncio.TimeoutError) as e:
            last_exception = e
            logger.warning(f"Attempt {attempt + 1}: Network error connecting to WeatherAPI.com for forecast '{location}': {e}. Retrying...")
        except Exception as e:
            logger.exception(f"Attempt {attempt + 1}: An unexpected error occurred fetching forecast from WeatherAPI.com for '{location}': {e}", exc_info=True)
            return _generate_weatherapi_error_response(500, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É.")

        if attempt < MAX_RETRIES - 1:
            delay = INITIAL_DELAY * (2 ** attempt)
            logger.info(f"Waiting {delay}s before next WeatherAPI.com forecast retry for '{location}'...")
            await asyncio.sleep(delay)
        else:
            error_message = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{location}' ({days}–¥) –ø—ñ—Å–ª—è {MAX_RETRIES} —Å–ø—Ä–æ–±."
            if last_exception: error_message += f" –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_exception)}"
            logger.error(error_message)
            
            final_error_code = 503
            if isinstance(last_exception, aiohttp.ClientResponseError): final_error_code = last_exception.status
            elif isinstance(last_exception, asyncio.TimeoutError): final_error_code = 504

            return _generate_weatherapi_error_response(final_error_code, error_message)
    return _generate_weatherapi_error_response(500, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{location}' ({days}–¥) (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥).")


def format_weather_backup_message(data: Dict[str, Any], requested_location: str) -> str:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –º—ñ—Å—Ç—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    if "error" in data and isinstance(data["error"], dict) and "source_api" in data["error"]:
        error_info = data["error"]
        error_code = error_info.get('code', 'N/A')
        error_message = error_info.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API')
        return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

    # –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, —è–∫—É –ø–æ–≤–µ—Ä–Ω—É–ª–æ —Å–∞–º–µ API WeatherAPI —ñ –≤–æ–Ω–∞ –Ω–µ –±—É–ª–∞ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ –≤–∏—â–µ
    # (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ get_current_weather_weatherapi –ø–æ–≤–µ—Ä–Ω—É–ª–æ data –∑ –∫–ª—é—á–µ–º "error" –Ω–∞–ø—Ä—è–º—É)
    if "error" in data and isinstance(data["error"], dict) and "message" in data["error"]:
         error_info = data["error"]
         error_code = error_info.get('code', 'API')
         error_message = error_info.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏')
         logger.warning(f"Formatting direct API error for backup weather: {error_info} for location {requested_location}")
         return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"


    location = data.get("location", {})
    current = data.get("current", {})
    condition = current.get("condition", {})

    city_name_api = location.get("name")
    region_api = location.get("region")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    # –Ø–∫—â–æ API –ø–æ–≤–µ—Ä–Ω—É–ª–æ —ñ–º'—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ. –Ü–Ω–∞–∫—à–µ - —Ç–µ, —â–æ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
    display_location = city_name_api if city_name_api else requested_location
    if city_name_api and region_api and region_api.lower() != city_name_api.lower():
        display_location = f"{city_name_api}, {region_api}"
    elif not city_name_api and region_api: # –Ø–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ —Ä–µ–≥—ñ–æ–Ω –≤—ñ–¥ API
        display_location = f"{requested_location} ({region_api})"


    temp_c = current.get("temp_c")
    feelslike_c = current.get("feelslike_c")
    condition_text = condition.get("text", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
    condition_code = condition.get("code")
    wind_kph = current.get("wind_kph")
    wind_dir_en = current.get("wind_dir", "").upper() # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤ —Å–ª–æ–≤–Ω–∏–∫—É
    pressure_mb = current.get("pressure_mb")
    humidity = current.get("humidity")
    cloud = current.get("cloud") # –¶–µ –≤—ñ–¥—Å–æ—Ç–æ–∫
    is_day = current.get("is_day", 1) # 1 = Yes, 0 = No
    
    localtime_epoch = location.get("localtime_epoch")
    time_info_str = ""
    if localtime_epoch:
        try:
            # WeatherAPI –ø–æ–≤–µ—Ä—Ç–∞—î localtime_epoch, —è–∫–∏–π –≤–∂–µ –≤—Ä–∞—Ö–æ–≤—É—î —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ª–æ–∫–∞—Ü—ñ—ó
            dt_local = datetime.fromtimestamp(localtime_epoch) # –ù–µ–º–∞—î –ø–æ—Ç—Ä–µ–±–∏ –≤ TZ_KYIV —Ç—É—Ç
            current_time_str = dt_local.strftime('%H:%M, %d.%m.%Y')
            time_info_str = f"<i>–î–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–∞ {current_time_str} (–º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å)</i>"
        except Exception as e:
            logger.warning(f"Could not format localtime_epoch {localtime_epoch} from WeatherAPI: {e}")

    emoji = WEATHERAPI_CONDITION_CODE_TO_EMOJI.get(condition_code, "üõ∞Ô∏è")
    if not emoji and condition_code == 1000 and not is_day: # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ –¥–ª—è —è—Å–Ω–æ—ó –Ω–æ—á—ñ
        emoji = "üåô"

    pressure_mmhg_str = "N/A"
    if pressure_mb is not None:
        try: pressure_mmhg_str = f"{int(pressure_mb * 0.750062)}"
        except (ValueError, TypeError) as e: logger.warning(f"Could not convert pressure {pressure_mb} (mb) to mmhg: {e}")

    wind_mps_str = "N/A"
    if wind_kph is not None:
        try:
            wind_mps = float(wind_kph) * 1000 / 3600
            wind_mps_str = f"{wind_mps:.1f}"
        except (ValueError, TypeError) as e: logger.warning(f"Could not convert wind speed {wind_kph} (kph) to m/s: {e}")

    wind_dir_uk = WIND_DIRECTIONS_UK.get(wind_dir_en, wind_dir_en if wind_dir_en else "N/A")

    message_lines = [
        f"<b>–†–µ–∑–µ—Ä–≤–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤: {display_location}</b> {emoji}"
    ]
    if temp_c is not None and feelslike_c is not None:
        message_lines.append(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c:.1f}¬∞C</b> (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feelslike_c:.1f}¬∞C)")
    elif temp_c is not None:
         message_lines.append(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c:.1f}¬∞C</b>")
    
    message_lines.append(f"üå¨Ô∏è –í—ñ—Ç–µ—Ä: {wind_mps_str} –º/—Å ({wind_dir_uk})")
    if humidity is not None:
        message_lines.append(f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%")
    message_lines.append(f"üå´Ô∏è –¢–∏—Å–∫: {pressure_mmhg_str} –º–º —Ä—Ç.—Å—Ç.")
    if cloud is not None:
        message_lines.append(f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {cloud}%")
    
    message_lines.append(f"üìù –û–ø–∏—Å: {condition_text.capitalize()}")
    if time_info_str:
        message_lines.append(time_info_str)
    
    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>")
    return "\n".join(filter(None, message_lines))


def format_forecast_backup_message(data: Dict[str, Any], requested_location: str) -> str:
    if "error" in data and isinstance(data["error"], dict) and "source_api" in data["error"]: # –ù–∞—à–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞
        error_info = data["error"]
        error_code = error_info.get('code', 'N/A')
        error_message = error_info.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –ø—Ä–æ–≥–Ω–æ–∑—É')
        return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

    if "error" in data and isinstance(data["error"], dict) and "message" in data["error"]: # –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–∞–º–æ–≥–æ WeatherAPI
         error_info = data["error"]
         error_code = error_info.get('code', 'API')
         error_message = error_info.get('message', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ–≥–Ω–æ–∑—É')
         logger.warning(f"Formatting direct API error for backup forecast: {error_info} for location {requested_location}")
         return f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{requested_location}</b>.\n<i>–ü—Ä–∏—á–∏–Ω–∞: {error_message} (–ö–æ–¥: {error_code})</i>\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>"

    location_data = data.get("location", {})
    forecast_data = data.get("forecast", {})
    forecast_days_list = forecast_data.get("forecastday", []) # –¶–µ —Å–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤
    
    city_name_api = location_data.get("name")
    display_city_name = city_name_api if city_name_api else requested_location
    
    message_lines = [f"<b>–†–µ–∑–µ—Ä–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {display_city_name}</b>\n"]

    if not forecast_days_list:
        message_lines.append("üò• –ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ).")
    else:
        for day_data in forecast_days_list:
            if not isinstance(day_data, dict): continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–Ω—è

            date_epoch = day_data.get("date_epoch")
            day_info = day_data.get("day", {})
            condition = day_info.get("condition", {})

            date_str_formatted = day_data.get("date", "N/A") # –†–µ–∑–µ—Ä–≤–Ω–∞ –¥–∞—Ç–∞, —è–∫—â–æ –µ–ø–æ—Ö–∞ –≤—ñ–¥—Å—É—Ç–Ω—è
            if date_epoch:
                try:
                    # date_epoch - —Ü–µ Unix timestamp –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥–Ω—è –∑–∞ –º—ñ—Å—Ü–µ–≤–∏–º —á–∞—Å–æ–º –ª–æ–∫–∞—Ü—ñ—ó
                    dt_obj_local = datetime.fromtimestamp(date_epoch)
                    day_name_en = dt_obj_local.strftime('%A') # –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –Ω–∞–∑–≤–∞ –¥–Ω—è —Ç–∏–∂–Ω—è
                    day_name_uk = DAYS_OF_WEEK_UK.get(day_name_en, day_name_en) # –ü–µ—Ä–µ–∫–ª–∞–¥
                    date_str_formatted = dt_obj_local.strftime(f'%d.%m ({day_name_uk})')
                except Exception as e:
                    logger.warning(f"Could not format forecast date_epoch {date_epoch} from WeatherAPI: {e}")
            
            avg_temp_c = day_info.get("avgtemp_c")
            max_temp_c = day_info.get("maxtemp_c") # –ú–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º
            min_temp_c = day_info.get("mintemp_c") # –ú–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º
            condition_text = condition.get("text", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
            condition_code = condition.get("code")
            
            emoji = WEATHERAPI_CONDITION_CODE_TO_EMOJI.get(condition_code, "üõ∞Ô∏è")
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–µ—Ä–µ–¥–Ω—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –¥—ñ–∞–ø–∞–∑–æ–Ω –º—ñ–Ω/–º–∞–∫—Å
            temp_display_parts = []
            if avg_temp_c is not None: temp_display_parts.append(f"{avg_temp_c:.0f}¬∞C")
            if min_temp_c is not None and max_temp_c is not None and avg_temp_c is None : # –ü–æ–∫–∞–∑—É—î–º–æ –º—ñ–Ω/–º–∞–∫—Å, —è–∫—â–æ –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥–Ω—å–æ—ó
                 temp_display_parts.append(f"(–≤—ñ–¥ {min_temp_c:.0f}¬∞ –¥–æ {max_temp_c:.0f}¬∞)")
            elif min_temp_c is not None and avg_temp_c is None:
                 temp_display_parts.append(f"(–º—ñ–Ω {min_temp_c:.0f}¬∞)")
            elif max_temp_c is not None and avg_temp_c is None:
                 temp_display_parts.append(f"(–º–∞–∫—Å {max_temp_c:.0f}¬∞)")

            temp_display_str = " ".join(temp_display_parts) if temp_display_parts else "N/A"


            message_lines.append(
                f"<b>{date_str_formatted}:</b> {temp_display_str}, {condition_text.capitalize()} {emoji}"
            )
            
    message_lines.append("\n<tg-spoiler>–î–∂–µ—Ä–µ–ª–æ: weatherapi.com (—Ä–µ–∑–µ—Ä–≤)</tg-spoiler>")
    return "\n".join(filter(None, message_lines))