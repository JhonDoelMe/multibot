# src/scheduler/weather_reminders.py
import asyncio
import logging
from datetime import datetime, time as dt_time

from sqlalchemy import select, extract
from sqlalchemy.ext.asyncio import AsyncSession

# –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
# –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–æ, —è–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–∫—Ä–µ–º–æ.
# –ú–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω–æ—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É, –∞–ª–µ –∑ –æ–∫—Ä–µ–º–æ—é —Ç–æ—á–∫–æ—é –≤—Ö–æ–¥—É.

# --- –í–∞—Ä—ñ–∞–Ω—Ç 1: –ó–∞–ø—É—Å–∫ —è–∫ –æ–∫—Ä–µ–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è async context) ---
# –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ config, logging, db_session_factory, bot_instance

# --- –í–∞—Ä—ñ–∞–Ω—Ç 2: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —è–∫ –∫–æ–º–∞–Ω–¥–∏ –≤ manage.py –∞–±–æ –≤ __main__.py (—è–∫—â–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –æ–∫—Ä–µ–º–æ—é –∫–æ–º–∞–Ω–¥–æ—é) ---
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, python -m src --task process_reminders

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ session_factory —Ç–∞ bot_instance
# –¶–µ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è! –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏.

# from src.db.database import get_db_session_context # –Ø–∫—â–æ —É –≤–∞—Å —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
from src.db.models import User
from src.modules.weather.service import get_weather_data, format_weather_message # –ê–±–æ get_5day_forecast
from src.modules.weather_backup.service import get_current_weather_weatherapi, format_weather_backup_message # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω fallback
from src_bot_instance_placeholder import bot # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
from src_db_session_factory_placeholder import async_session_factory # –ó–∞–≥–ª—É—à–∫–∞

logger = logging.getLogger(__name__)

async def send_weather_reminders(session_factory, current_bot_instance):
    now_utc = datetime.utcnow()
    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ, —â–æ cron –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω.
    # –®—É–∫–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —á–∞—Å —è–∫–∏—Ö –ø—Ä–∏–ø–∞–¥–∞—î –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –≥–æ–¥–∏–Ω—É —Ç–∞ —Ö–≤–∏–ª–∏–Ω—É,
    # –∞–±–æ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ö–≤–∏–ª–∏–Ω–∏, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ—Ç–æ—á–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É.
    # –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ - –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥–æ–¥–∏–Ω—É —Ç–∞ —Ö–≤–∏–ª–∏–Ω—É.
    # –Ø–∫—â–æ cron –∫–æ–∂–Ω—ñ 5 —Ö–≤, —Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É –º–æ–∂–µ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏.

    current_time_obj = now_utc.time().replace(second=0, microsecond=0) 
    # –ê–±–æ, —è–∫—â–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —ñ –ë–î –≤ –æ–¥–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ, –º–æ–∂–Ω–∞ datetime.now().time()
    # –ê–ª–µ –∫—Ä–∞—â–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ UTC —ñ –ø–æ—Ç—ñ–º –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —á–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ UTC –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è,
    # –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —á–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ UTC.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ weather_reminder_time –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ UTC –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ —Å–µ—Ä–≤–µ—Ä–∞.
    # –Ø–∫—â–æ —á–∞—Å –≤ –ë–î –ª–æ–∫–∞–ª—å–Ω–∏–π, –∞ —Å–µ—Ä–≤–µ—Ä –≤ UTC, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è.
    # –ü–æ–∫–∏ —â–æ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —á–∞—Å –≤ –ë–î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —á–∞—Å—É, –∑–∞ —è–∫–∏–º –ø—Ä–∞—Ü—é—î now_utc.time()

    # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –±—É–¥–µ–º–æ –≤–≤–∞–∂–∞—Ç–∏, —â–æ weather_reminder_time - —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
    # –∞ –Ω–∞—à –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø—Ä–∞—Ü—é—î –∑–∞ UTC. –¶–µ —É—Å–∫–ª–∞–¥–Ω—é—î.
    # –ü–†–û–°–¢–Ü–®–ò–ô –í–ê–†–Ü–ê–ù–¢: –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —á–∞—Å –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º,
    # —ñ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ç–∞–∫–æ–∂ –æ—Ä—ñ—î–Ω—Ç—É—î—Ç—å—Å—è –Ω–∞ –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å.

    from src.config import TZ_KYIV # –ü–æ—Ç—Ä—ñ–±–Ω–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–¥–∞—Ç–∏
    now_kyiv = datetime.now(TZ_KYIV)
    current_time_kyiv_obj = now_kyiv.time().replace(second=0, microsecond=0)
    # –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–∏—Ö 5 —Ö–≤–∏–ª–∏–Ω, —è–∫—â–æ cron –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤
    # current_minute_rounded = (now_kyiv.minute // 5) * 5
    # current_time_kyiv_obj = dt_time(now_kyiv.hour, current_minute_rounded)


    logger.info(f"Scheduler: Checking weather reminders for time ~ {current_time_kyiv_obj.strftime('%H:%M')}")

    async with session_factory() as session: # type: AsyncSession
        stmt = (
            select(User)
            .where(User.weather_reminder_enabled == True)
            .where(User.weather_reminder_time != None)
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω—É —Ç–∞ —Ö–≤–∏–ª–∏–Ω—É
            .where(extract('hour', User.weather_reminder_time) == current_time_kyiv_obj.hour)
            .where(extract('minute', User.weather_reminder_time) == current_time_kyiv_obj.minute)
        )
        users_to_remind = (await session.execute(stmt)).scalars().all()

        if not users_to_remind:
            logger.info("Scheduler: No users found for weather reminder at this time.")
            return

        logger.info(f"Scheduler: Found {len(users_to_remind)} users for weather reminder.")

        for user in users_to_remind:
            if not user.preferred_city:
                logger.warning(f"Scheduler: User {user.user_id} has reminder enabled but no preferred city.")
                continue

            logger.info(f"Scheduler: Processing reminder for user {user.user_id}, city: {user.preferred_city}")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Å–µ—Ä–≤—ñ—Å –ø–æ–≥–æ–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
            weather_data_response = None
            formatted_weather = ""

            if user.preferred_weather_service == config.ServiceChoice.OPENWEATHERMAP:
                # –î–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                weather_data_response = await get_weather_data(current_bot_instance, city_name=user.preferred_city)
                formatted_weather = format_weather_message(weather_data_response, user.preferred_city)
            elif user.preferred_weather_service == config.ServiceChoice.WEATHERAPI:
                weather_data_response = await get_current_weather_weatherapi(current_bot_instance, location=user.preferred_city)
                formatted_weather = format_weather_backup_message(weather_data_response, user.preferred_city)
            else: # –ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ—Ä–≤—ñ—Å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                logger.warning(f"Scheduler: Unknown weather service '{user.preferred_weather_service}' for user {user.user_id}")
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –±—É–ª–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏
            # –§—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞
            is_error = ("error" in weather_data_response and isinstance(weather_data_response["error"], dict)) or \
                       (str(weather_data_response.get("cod")) != "200" and "error_source" in weather_data_response)


            if is_error:
                logger.warning(f"Scheduler: Failed to get weather for user {user.user_id}, city {user.preferred_city}. API Response: {weather_data_response}")
                # –ú–æ–∂–Ω–∞ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
                # await current_bot_instance.send_message(user.user_id, f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ –º—ñ—Å—Ç—É {user.preferred_city}.")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

            try:
                reminder_header = f"üîî <b>–©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É ({user.weather_reminder_time.strftime('%H:%M')})</b>\n\n"
                await current_bot_instance.send_message(user.user_id, reminder_header + formatted_weather)
                logger.info(f"Scheduler: Sent weather reminder to user {user.user_id} for city {user.preferred_city}")
                await asyncio.sleep(0.2) # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É
            except Exception as e: # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ —Ç–æ—â–æ)
                logger.error(f"Scheduler: Failed to send reminder to user {user.user_id}: {e}")
                if "bot was blocked by the user" in str(e).lower() or \
                   "user is deactivated" in str(e).lower() or \
                   "chat not found" in str(e).lower():
                    logger.warning(f"Scheduler: Disabling reminders for user {user.user_id} due to send error.")
                    user.weather_reminder_enabled = False
                    session.add(user)
                    # –ü–æ—Ç—Ä—ñ–±–µ–Ω commit –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ user.weather_reminder_enabled
                    # –Ø–∫—â–æ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ, –≤—ñ–Ω –º–∞—î —Å–∞–º —Ä–æ–±–∏—Ç–∏ commit
                    # await session.commit() 

        # –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç —Ä–æ–±–∏—Ç—å commit —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ (–ø–æ–∑–∞ DbSessionMiddleware)
        try:
            await session.commit()
            logger.info("Scheduler: Committed changes for disabled reminders (if any).")
        except Exception as e_commit:
            logger.error(f"Scheduler: Error committing session: {e_commit}")
            await session.rollback()


# –¶–µ –ø—Ä–∏–∫–ª–∞–¥, —è–∫ –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–∞–ø—É—Å—Ç–∏—Ç–∏, —è–∫–±–∏ —Ü–µ –±—É–≤ –æ–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç
# async def run_scheduler_standalone():
#     # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏:
#     # 1. logging
#     # 2. config (from src import config as app_config)
#     # 3. db_initialized, session_factory = await initialize_database()
#     # 4. bot = Bot(token=app_config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

#     # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
#     # if not db_initialized or not session_factory or not bot:
#     #     logger.critical("Scheduler: Failed to initialize dependencies. Exiting.")
#     #     return

#     # await send_weather_reminders(session_factory, bot)

#     # –ó–∞–∫—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é –±–æ—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç—É—Ç
#     # await bot.session.close()
#     # logger.info("Scheduler: Bot session closed.")

# if __name__ == "__main__":
#     # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
#     # logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
#     # asyncio.run(run_scheduler_standalone())