# src/handlers/common.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.filters import CommandStart, StateFilter # StateFilter –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
from aiogram.fsm.context import FSMContext
from aiogram.types import Message # <<< –î–û–î–ê–ù–û –Ü–ú–ü–û–†–¢
from sqlalchemy.ext.asyncio import AsyncSession

from src.db.models import User, ServiceChoice # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ServiceChoice
from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_LOCATION, BTN_SETTINGS # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º entry_points –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from src.modules.weather.handlers import weather_entry_point as main_weather_ep
from src.modules.weather.handlers import process_main_geolocation_button # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

from src.modules.weather_backup.handlers import weather_backup_entry_point as backup_weather_ep
from src.modules.weather_backup.handlers import weather_backup_geolocation_entry_point # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

from src.modules.alert.handlers import alert_entry_point as main_alert_ep
from src.modules.alert_backup.handlers import alert_backup_entry_point as backup_alert_ep

from src.modules.currency.handlers import currency_entry_point
from src.modules.settings.handlers import settings_entry_point # <<< –ù–û–í–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö

from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")
# location_router –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –±—ã–ª,
# —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –±—É–¥–µ—Ç –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∏ –µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º –∂–µ —Ä–æ—É—Ç–µ—Ä–µ.


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ utils, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–Ω–æ–≥–æ –≥–¥–µ)
async def _get_user_or_default_settings(session: AsyncSession, user_id: int) -> User:
    user = await session.get(User, user_id)
    if not user: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—â–µ –Ω–µ –Ω–∞–∂–∏–º–∞–ª /start –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π)
        logger.warning(f"User {user_id} not found in DB. Using default service settings.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –≠—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î –∑–¥–µ—Å—å, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
        # /start –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        return User(
            user_id=user_id, # –ù—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤, –Ω–æ –≤ –ë–î –µ–≥–æ –Ω–µ—Ç
            first_name = "Temp User", # –ó–∞–≥–ª—É—à–∫–∞
            preferred_weather_service=ServiceChoice.OPENWEATHERMAP,
            preferred_alert_service=ServiceChoice.UKRAINEALARM
        )
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—è –±—ã–ª–∏ NULL
    if user.preferred_weather_service is None:
        user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
    if user.preferred_alert_service is None:
        user.preferred_alert_service = ServiceChoice.UKRAINEALARM
    return user


@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start —ç—Ç–æ –æ–±—ã—á–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
    user_tg = message.from_user
    if not user_tg:
        logger.warning("Received /start from a user with no user info.")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    user_id = user_tg.id
    first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    last_name = user_tg.last_name
    username = user_tg.username

    db_user = await session.get(User, user_id)
    if db_user:
        needs_update = False
        if db_user.first_name != first_name: db_user.first_name = first_name; needs_update = True
        if db_user.last_name != last_name: db_user.last_name = last_name; needs_update = True
        if db_user.username != username: db_user.username = username; needs_update = True
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —é–∑–µ—Ä–æ–≤)
        if db_user.preferred_weather_service is None:
            db_user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
            needs_update = True
        if db_user.preferred_alert_service is None:
            db_user.preferred_alert_service = ServiceChoice.UKRAINEALARM
            needs_update = True
        if needs_update:
            logger.info(f"User {user_id} ('{username}') found. Updating info/default settings...")
            session.add(db_user)
        else:
            logger.info(f"User {user_id} ('{username}') found. No info update needed.")
    else:
        logger.info(f"User {user_id} ('{username}') not found. Creating with default service settings...")
        new_user = User(
            user_id=user_id, first_name=first_name, last_name=last_name, username=username,
            preferred_weather_service=ServiceChoice.OPENWEATHERMAP, # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            preferred_alert_service=ServiceChoice.UKRAINEALARM
        )
        session.add(new_user)
    # –ö–æ–º–º–∏—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω DbSessionMiddleware

    text = f"–ü—Ä–∏–≤—ñ—Ç, {first_name}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"
    reply_markup = get_main_reply_keyboard()
    await message.answer(text=text, reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

@router.message(F.text == BTN_WEATHER)
async def handle_weather_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_settings = await _get_user_or_default_settings(session, message.from_user.id)
    logger.info(f"User {message.from_user.id} pressed Weather button. Preferred service: {user_settings.preferred_weather_service}")
    if user_settings.preferred_weather_service == ServiceChoice.WEATHERAPI:
        await backup_weather_ep(message, state, session, bot)
    else: # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω OWM
        await main_weather_ep(message, state, session, bot)

@router.message(F.text == BTN_ALERTS)
async def handle_alerts_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot): # –î–æ–±–∞–≤–∏–ª state, session –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    user_settings = await _get_user_or_default_settings(session, message.from_user.id)
    logger.info(f"User {message.from_user.id} pressed Alerts button. Preferred service: {user_settings.preferred_alert_service}")
    if user_settings.preferred_alert_service == ServiceChoice.ALERTSINUA:
        await backup_alert_ep(message, bot) # backup_alert_ep –º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å state, session
    else: # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω UkraineAlarm
        await main_alert_ep(message, bot)   # main_alert_ep –º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å state, session

# –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@router.message(F.text == BTN_LOCATION) # –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç.–∫. –∫–Ω–æ–ø–∫–∞ —Å request_location
async def handle_location_text_button(message: Message): # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
     logger.warning(f"Received text message '{BTN_LOCATION}' instead of location. User: {message.from_user.id}")
     await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.")

@router.message(F.location) # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–π –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def handle_any_geolocation(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    user_settings = await _get_user_or_default_settings(session, user_id)
    logger.info(f"User {user_id} sent geolocation. Preferred weather service: {user_settings.preferred_weather_service}")

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM gracefully, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ
    current_fsm_state = await state.get_state()
    if current_fsm_state is not None:
        logger.info(f"Exiting FSM state '{current_fsm_state}' before processing geolocation.")
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º set_state(None) –≤–º–µ—Å—Ç–æ clear()
        await state.set_state(None)
        logger.debug(f"User {user_id}: Set FSM state to None (from {current_fsm_state}) after receiving geolocation.")

    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é –ø–æ–≥–æ–¥—ã
    if user_settings.preferred_weather_service == ServiceChoice.WEATHERAPI:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        await weather_backup_geolocation_entry_point(message, state, session, bot)
    else: # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω OWM
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        await process_main_geolocation_button(message, state, session, bot)


@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, bot: Bot):
     await currency_entry_point(message, bot)

@router.message(F.text == BTN_SETTINGS)
async def handle_settings_button(message: Message, session: AsyncSession, bot: Bot): # state –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
    await settings_entry_point(message, session, bot)