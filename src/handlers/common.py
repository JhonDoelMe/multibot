# src/handlers/common.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_ALERTS_BACKUP
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –º–æ–¥—É–ª–µ–π
from src.modules.weather.handlers import weather_entry_point
from src.modules.currency.handlers import currency_entry_point
from src.modules.alert.handlers import alert_entry_point
from src.modules.alert_backup.handlers import alert_backup_entry_point
from src.db.models import User
from src.handlers.utils import show_main_menu_message # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")

@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_tg = message.from_user
    if not user_tg: # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ user –Ω–µ None
        logger.warning("Received /start from a user with no user info (message.from_user is None).")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    user_id = user_tg.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    last_name = user_tg.last_name # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    username = user_tg.username # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

    db_user = None
    try:
        db_user = await session.get(User, user_id)
        if db_user:
             # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
             needs_update = False
             if db_user.first_name != first_name:
                 db_user.first_name = first_name
                 needs_update = True
             if db_user.last_name != last_name: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–∞ None
                 db_user.last_name = last_name
                 needs_update = True
             if db_user.username != username: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–∞ None
                 db_user.username = username
                 needs_update = True
             
             if needs_update:
                  logger.info(f"User {user_id} ('{username}') found. Updating info...")
                  session.add(db_user) # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
             else:
                  logger.info(f"User {user_id} ('{username}') found. No info update needed.")
        else:
             logger.info(f"User {user_id} ('{username}') not found. Creating...")
             new_user = User(
                 user_id=user_id,
                 first_name=first_name,
                 last_name=last_name,
                 username=username
             )
             session.add(new_user)
        # –ö–æ–º–º–∏—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ middleware DbSessionMiddleware
    except Exception as e:
        logger.exception(f"DB error during /start for user {user_id}: {e}", exc_info=True)
        # –í–∞–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ middleware –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ middleware
        await session.rollback()
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ë–î

    user_name_display = first_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name
    text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name_display}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"
    reply_markup = get_main_reply_keyboard()
    await message.answer(text=text, reply_markup=reply_markup)

@router.message(F.text == BTN_WEATHER)
async def handle_weather_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_entry_point(message, state, session, bot)

@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, bot: Bot): # session –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ currency_entry_point
     await currency_entry_point(message, bot)

@router.message(F.text == BTN_ALERTS)
async def handle_alert_text_request(message: Message, bot: Bot): # session –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
     await alert_entry_point(message, bot)

@router.message(F.text == BTN_ALERTS_BACKUP)
async def handle_alert_backup_text_request(message: Message, bot: Bot): # session –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
     await alert_backup_entry_point(message, bot)

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# @router.message(F.text)
# async def handle_unknown_text(message: Message):
#     await message.answer("–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")