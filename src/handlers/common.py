# src/handlers/common.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter # –î–æ–±–∞–≤–ª—è–µ–º StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_ALERTS_BACKUP, BTN_WEATHER_BACKUP,
    BTN_LOCATION_MAIN, BTN_LOCATION_BACKUP
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤–µ—Å—å –º–æ–¥—É–ª—å handlers, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
from src.modules.weather.handlers import weather_entry_point, process_main_geolocation_button, WeatherStates as MainWeatherStates
from src.modules.currency.handlers import currency_entry_point
from src.modules.alert.handlers import alert_entry_point
from src.modules.alert_backup.handlers import alert_backup_entry_point
from src.modules.weather_backup.handlers import weather_backup_entry_point, weather_backup_geolocation_entry_point, WeatherBackupStates
from src.db.models import User
from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")
location_router = Router(name="location-handlers") # –≠—Ç–æ—Ç —Ä–æ—É—Ç–µ—Ä –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –æ—Ç –∫–Ω–æ–ø–æ–∫


@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await state.clear()
    user_tg = message.from_user; # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ start –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not user_tg: logger.warning("Received /start from a user with no user info (message.from_user is None)."); await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."); return
    user_id = user_tg.id; first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"; last_name = user_tg.last_name; username = user_tg.username
    db_user = None
    try:
        db_user = await session.get(User, user_id)
        if db_user:
             needs_update = False
             if db_user.first_name != first_name: db_user.first_name = first_name; needs_update = True
             if db_user.last_name != last_name: db_user.last_name = last_name; needs_update = True
             if db_user.username != username: db_user.username = username; needs_update = True
             if needs_update: logger.info(f"User {user_id} ('{username}') found. Updating info..."); session.add(db_user)
             else: logger.info(f"User {user_id} ('{username}') found. No info update needed.")
        else: logger.info(f"User {user_id} ('{username}') not found. Creating..."); new_user = User(user_id=user_id, first_name=first_name, last_name=last_name, username=username); session.add(new_user)
    except Exception as e: logger.exception(f"DB error during /start for user {user_id}: {e}", exc_info=True); await session.rollback(); await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."); return
    user_name_display = first_name; text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name_display}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"; reply_markup = get_main_reply_keyboard(); await message.answer(text=text, reply_markup=reply_markup)


@router.message(F.text == BTN_WEATHER)
async def handle_weather_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_entry_point(message, state, session, bot)

@router.message(F.text == BTN_WEATHER_BACKUP)
async def handle_weather_backup_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_backup_entry_point(message, state, session, bot)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, bot: Bot): await currency_entry_point(message, bot)
@router.message(F.text == BTN_ALERTS)
async def handle_alert_text_request(message: Message, bot: Bot): await alert_entry_point(message, bot)
@router.message(F.text == BTN_ALERTS_BACKUP)
async def handle_alert_backup_text_request(message: Message, bot: Bot): await alert_backup_entry_point(message, bot)


# --- –û–ë–†–ê–ë–û–¢–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò –ß–ï–†–ï–ó LOCATION_ROUTER ---

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ò –º—ã –ù–ï –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
# –ò —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É BTN_LOCATION_MAIN
@location_router.message(F.location, F.reply_to_message.text.contains(BTN_LOCATION_MAIN), StateFilter(None, MainWeatherStates.showing_current, MainWeatherStates.showing_forecast, WeatherBackupStates.showing_current, WeatherBackupStates.showing_forecast) )
async def handle_main_location_button_press(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} used MAIN location button (detected by reply).")
    await process_main_geolocation_button(message, state, session, bot)

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ò –º—ã –ù–ï –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
# –ò —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É BTN_LOCATION_BACKUP
@location_router.message(F.location, F.reply_to_message.text.contains(BTN_LOCATION_BACKUP), StateFilter(None, MainWeatherStates.showing_current, MainWeatherStates.showing_forecast, WeatherBackupStates.showing_current, WeatherBackupStates.showing_forecast) )
async def handle_backup_location_button_press(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} used BACKUP location button (detected by reply).")
    await weather_backup_geolocation_entry_point(message, state, session, bot)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è (waiting_for_location)
# –∏ –ù–ï –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–Ω–æ–ø–∫—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å.
# StateFilter(None) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ FSM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (None)
# –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –ù–ï –æ–∂–∏–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –º—ã —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É (showing_current / showing_forecast –≤ –ª—é–±–æ–º –∏–∑ –º–æ–¥—É–ª–µ–π).
@location_router.message(F.location, StateFilter(None, MainWeatherStates.showing_current, MainWeatherStates.showing_forecast, WeatherBackupStates.showing_current, WeatherBackupStates.showing_forecast))
async def handle_any_other_location(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"User {user_id} sent location directly (not in waiting state, not specific reply). Defaulting to main weather.")
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å BTN_LOCATION_MAIN/BACKUP,
    # —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ.
    # –î–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å message.reply_to_message –∑–¥–µ—Å—å —Å–Ω–æ–≤–∞,
    # –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
    await process_main_geolocation_button(message, state, session, bot)