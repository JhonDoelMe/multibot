# src/handlers/common.py

import logging
from typing import Union, Optional
from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ settings_entry_point
from aiogram.types import Message, User as AiogramUser
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import CommandStart

from src.db.models import User, ServiceChoice # –ù–∞—à–∞ –º–æ–¥–µ–ª—å User
from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_LOCATION, BTN_SETTINGS
)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ entry_points –¥–ª—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
from src.modules.weather.handlers import weather_entry_point as main_weather_ep
from src.modules.weather.handlers import process_main_geolocation_button

from src.modules.weather_backup.handlers import weather_backup_entry_point as backup_weather_ep
from src.modules.weather_backup.handlers import weather_backup_geolocation_entry_point

from src.modules.alert.handlers import alert_entry_point as main_alert_ep
from src.modules.alert_backup.handlers import alert_backup_entry_point as backup_alert_ep

from src.modules.currency.handlers import currency_entry_point
from src.modules.settings.handlers import settings_entry_point # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î state

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")


async def _get_user_or_default_settings(session: AsyncSession, user_id: int, user_tg_obj: Optional[AiogramUser] = None) -> User:
    db_user = await session.get(User, user_id)
    if db_user:
        if db_user.preferred_weather_service is None:
            db_user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
        if db_user.preferred_alert_service is None:
            db_user.preferred_alert_service = ServiceChoice.UKRAINEALARM
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if not hasattr(db_user, 'weather_reminder_enabled') or db_user.weather_reminder_enabled is None:
            db_user.weather_reminder_enabled = False
        # weather_reminder_time –º–æ–∂–µ –±—É—Ç–∏ None –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return db_user
    else:
        logger.warning(f"User {user_id} not found in DB by _get_user_or_default_settings. Returning User object with defaults for logic.")
        first_name_default = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        if user_tg_obj and user_tg_obj.first_name:
            first_name_default = user_tg_obj.first_name
        
        return User(
            user_id=user_id,
            first_name=first_name_default,
            preferred_weather_service=ServiceChoice.OPENWEATHERMAP,
            preferred_alert_service=ServiceChoice.UKRAINEALARM,
            weather_reminder_enabled=False, # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            weather_reminder_time=None      # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        )


@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear() 
    user_tg = message.from_user
    if not user_tg:
        logger.warning("Received /start from a user with no user info (message.from_user is None).")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    user_id = user_tg.id
    first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    last_name = user_tg.last_name
    username = user_tg.username

    db_user = await session.get(User, user_id)
    needs_commit = False

    if db_user:
        logger.info(f"User {user_id} ('{username or 'N/A'}') found in DB.")
        if db_user.first_name != first_name:
            db_user.first_name = first_name
            needs_commit = True
        if db_user.last_name != last_name: 
            db_user.last_name = last_name
            needs_commit = True
        if db_user.username != username:
            db_user.username = username
            needs_commit = True
        
        if db_user.preferred_weather_service is None:
            db_user.preferred_weather_service = ServiceChoice.OPENWEATHERMAP
            needs_commit = True
            logger.info(f"User {user_id}: Setting default preferred_weather_service to OWM.")
        if db_user.preferred_alert_service is None:
            db_user.preferred_alert_service = ServiceChoice.UKRAINEALARM
            needs_commit = True
            logger.info(f"User {user_id}: Setting default preferred_alert_service to UkraineAlarm.")
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if not hasattr(db_user, 'weather_reminder_enabled') or db_user.weather_reminder_enabled is None:
            db_user.weather_reminder_enabled = False
            needs_commit = True
            logger.info(f"User {user_id}: Initializing weather_reminder_enabled to False.")
        # weather_reminder_time –º–æ–∂–µ –±—É—Ç–∏ None, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ
        
        if needs_commit:
            logger.info(f"User {user_id}: Updating user info/default settings in DB.")
            session.add(db_user)
    else:
        logger.info(f"User {user_id} ('{username or 'N/A'}') not found. Creating new user with default service settings...")
        new_user = User(
            user_id=user_id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            preferred_weather_service=ServiceChoice.OPENWEATHERMAP,
            preferred_alert_service=ServiceChoice.UKRAINEALARM,
            weather_reminder_enabled=False, # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            weather_reminder_time=None      # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        )
        session.add(new_user)
    
    text = f"–ü—Ä–∏–≤—ñ—Ç, {first_name}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"
    reply_markup = get_main_reply_keyboard()
    try:
        await message.answer(text=text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Failed to send start message to user {user_id}: {e}")


@router.message(F.text == BTN_WEATHER)
async def handle_weather_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_settings = await _get_user_or_default_settings(session, message.from_user.id, message.from_user)
    logger.info(f"User {message.from_user.id} pressed Weather button. Preferred service: {user_settings.preferred_weather_service}")
    if user_settings.preferred_weather_service == ServiceChoice.WEATHERAPI:
        await backup_weather_ep(message, state, session, bot)
    else:
        await main_weather_ep(message, state, session, bot)

@router.message(F.text == BTN_ALERTS)
async def handle_alerts_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot): # –î–æ–¥–∞–Ω–æ state, session –¥–ª—è –º–æ–∂–ª–∏–≤–æ—ó –ø–µ—Ä–µ–¥–∞—á—ñ
    user_settings = await _get_user_or_default_settings(session, message.from_user.id, message.from_user)
    logger.info(f"User {message.from_user.id} pressed Alerts button. Preferred service: {user_settings.preferred_alert_service}")
    if user_settings.preferred_alert_service == ServiceChoice.ALERTSINUA:
        # backup_alert_ep –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ state, session, —è–∫—â–æ –π–æ–≥–æ –ª–æ–≥—ñ–∫–∞ –∑–º—ñ–Ω–∏—Ç—å—Å—è
        await backup_alert_ep(message, bot) # –ü–æ–∫–∏ —â–æ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ message, bot
    else: 
        await main_alert_ep(message, bot) # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ

@router.message(F.location)
async def handle_any_geolocation(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    if not message.location:
        logger.warning(f"User {user_id} triggered F.location handler but message.location is None.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    lat = message.location.latitude
    lon = message.location.longitude
    user_settings = await _get_user_or_default_settings(session, user_id, message.from_user)
    logger.info(f"User {user_id} sent geolocation ({lat}, {lon}). Preferred weather service: {user_settings.preferred_weather_service}")

    current_fsm_state = await state.get_state()
    if current_fsm_state is not None:
        logger.info(f"User {user_id}: In FSM state '{current_fsm_state}' before processing geolocation. Setting state to None.")
        await state.set_state(None) 
        logger.debug(f"User {user_id}: FSM state set to None after receiving geolocation.")

    if user_settings.preferred_weather_service == ServiceChoice.WEATHERAPI:
        await weather_backup_geolocation_entry_point(message, state, session, bot)
    else:
        await process_main_geolocation_button(message, state, session, bot)


@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot): # –î–æ–¥–∞–Ω–æ state, session
     # currency_entry_point –º–æ–∂–µ –Ω–µ –≤–∏–º–∞–≥–∞—Ç–∏ state, session, –∞–ª–µ –¥–ª—è —É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏
     await currency_entry_point(message, bot) # –ü–æ–∫–∏ —â–æ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ message, bot

# –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ state: FSMContext –¥–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ —É –≤–∏–∫–ª–∏–∫
@router.message(F.text == BTN_SETTINGS)
async def handle_settings_button(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    await settings_entry_point(message, session, bot, state)
    # state –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ settings_entry_point