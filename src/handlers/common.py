# src/handlers/common.py

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ callback data
from src.keyboards.inline_main import (
    get_main_menu_keyboard,
    CALLBACK_WEATHER,
    CALLBACK_CURRENCY,
    CALLBACK_ALERT
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å User
from src.db.models import User

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router(name="common-handlers")

@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
    """
    user = message.from_user
    user_id = user.id
    first_name = user.first_name
    last_name = user.last_name
    username = user.username

    db_user = await session.get(User, user_id)

    try: # –î–æ–±–∞–≤–∏–º try..except –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –∫–æ–º–º–∏—Ç–∞
        if db_user:
            logger.info(f"User {user_id} ('{username}') found in DB. Updating info.")
            db_user.first_name = first_name
            db_user.last_name = last_name
            db_user.username = username
            # session.add(db_user) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            # !!! –¢–µ—Å—Ç–æ–≤—ã–π —è–≤–Ω—ã–π –∫–æ–º–º–∏—Ç !!!
            await session.commit()
            logger.info(f"Explicit commit after updating user {user_id}.")
        else:
            logger.info(f"User {user_id} ('{username}') not found. Creating new user.")
            new_user = User(
                user_id=user_id,
                first_name=first_name,
                last_name=last_name,
                username=username
            )
            session.add(new_user)
            # !!! –¢–µ—Å—Ç–æ–≤—ã–π —è–≤–Ω—ã–π –∫–æ–º–º–∏—Ç !!!
            await session.commit()
            logger.info(f"Explicit commit after adding new user {user_id}.")

    except Exception as e:
        logger.exception(f"Database error during /start for user {user_id}: {e}")
        # –ú–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é, –Ω–æ middleware –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–∞–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        # await session.rollback()
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")
        return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    user_name_display = first_name
    text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name_display}! üëã\n\n–Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:"
    reply_markup = get_main_menu_keyboard()
    await message.answer(text=text, reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

@router.callback_query(F.data == CALLBACK_CURRENCY)
async def handle_currency_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–¥—ñ–ª '–ö—É—Ä—Å –≤–∞–ª—é—Ç'. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    await callback.answer()

@router.callback_query(F.data == CALLBACK_ALERT)
async def handle_alert_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞'. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    await callback.answer()

@router.callback_query(F.data.startswith("main:"))
async def handle_unknown_main_callback(callback: CallbackQuery):
    await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è!", show_alert=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: Message | CallbackQuery, text: str = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"):
    reply_markup = get_main_menu_keyboard()
    target_message = message.message if isinstance(message, CallbackQuery) else message
    try:
        await target_message.edit_text(text, reply_markup=reply_markup)
    except Exception:
         await target_message.answer(text, reply_markup=reply_markup)
    if isinstance(message, CallbackQuery):
        await message.answer()