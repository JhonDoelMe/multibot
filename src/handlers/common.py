# src/handlers/common.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_ALERTS_BACKUP, BTN_WEATHER_BACKUP,
    BTN_LOCATION_MAIN, BTN_LOCATION_BACKUP
)
from src.modules.weather.handlers import weather_entry_point, handle_location as handle_main_weather_location
from src.modules.currency.handlers import currency_entry_point
from src.modules.alert.handlers import alert_entry_point
from src.modules.alert_backup.handlers import alert_backup_entry_point
from src.modules.weather_backup.handlers import weather_backup_entry_point, weather_backup_geolocation_entry_point
from src.db.models import User
from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")
location_router = Router(name="location-handlers")


@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await state.clear()
    user_tg = message.from_user
    if not user_tg:
        logger.warning("Received /start from a user with no user info (message.from_user is None).")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    user_id = user_tg.id
    first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    last_name = user_tg.last_name
    username = user_tg.username

    db_user = None
    try:
        db_user = await session.get(User, user_id)
        if db_user:
             needs_update = False
             if db_user.first_name != first_name: db_user.first_name = first_name; needs_update = True
             if db_user.last_name != last_name: db_user.last_name = last_name; needs_update = True
             if db_user.username != username: db_user.username = username; needs_update = True
             if needs_update: logger.info(f"User {user_id} ('{username}') found. Updating info..."); session.add(db_user)
             else: logger.info(f"User {user_id} ('{username}') found. No info update needed.")
        else:
             logger.info(f"User {user_id} ('{username}') not found. Creating..."); new_user = User(user_id=user_id, first_name=first_name, last_name=last_name, username=username); session.add(new_user)
    except Exception as e:
        logger.exception(f"DB error during /start for user {user_id}: {e}", exc_info=True); await session.rollback()
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."); return

    user_name_display = first_name
    text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name_display}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"
    reply_markup = get_main_reply_keyboard()
    await message.answer(text=text, reply_markup=reply_markup)

@router.message(F.text == BTN_WEATHER)
async def handle_weather_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_entry_point(message, state, session, bot)

@router.message(F.text == BTN_WEATHER_BACKUP)
async def handle_weather_backup_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_backup_entry_point(message, state, session, bot)

@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, bot: Bot):
     await currency_entry_point(message, bot)

@router.message(F.text == BTN_ALERTS)
async def handle_alert_text_request(message: Message, bot: Bot):
     await alert_entry_point(message, bot)

@router.message(F.text == BTN_ALERTS_BACKUP)
async def handle_alert_backup_text_request(message: Message, bot: Bot):
     await alert_backup_entry_point(message, bot)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@location_router.message(F.location) # –°–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ reply_to_message –≤–Ω—É—Ç—Ä–∏
async def route_geolocation(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"User {user_id} sent location. Checking for reply_to_message context...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    # –ó–∞—Ä–∞–Ω–µ–µ —É–±–∏—Ä–∞–µ–º request_location=True –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏, —Ç.–∫. –µ–≥–æ –Ω–µ—Ç –≤ reply_to_message
    # –∏ —ç–º–æ–¥–∑–∏ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å. –õ—É—á—à–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞.
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ "(–æ—Å–Ω.)"/"(—Ä–µ–∑–µ—Ä–≤)" –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    # BTN_LOCATION_MAIN = "üìç –ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó (–æ—Å–Ω.)"
    # BTN_LOCATION_BACKUP = "üìç –ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó (—Ä–µ–∑–µ—Ä–≤)"
    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å "–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó"
    
    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –µ—Å–ª–∏ –±—ã –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    # –ù–æ –¥–ª—è reply –∫–Ω–æ–ø–æ–∫ —Å request_location=True, —ç—Ç–æ —Å–ª–æ–∂–Ω–æ.

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º (reply) –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        replied_text = message.reply_to_message.text
        logger.info(f"User {user_id} replied with location to bot message: '{replied_text}'")
        if BTN_LOCATION_MAIN in replied_text: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            logger.info(f"User {user_id} used MAIN location button (based on replied text).")
            await handle_main_weather_location(message, state, session, bot)
            return
        elif BTN_LOCATION_BACKUP in replied_text: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            logger.info(f"User {user_id} used BACKUP location button (based on replied text).")
            await weather_backup_geolocation_entry_point(message, state, session, bot)
            return
        else:
            logger.info(f"User {user_id} replied with location, but replied text ('{replied_text}') didn't match known location buttons.")
    else:
        logger.info(f"User {user_id} sent location not as a reply to a specific bot message, or reply_to_message is None.")

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ reply_to_message, –∏–ª–∏ —ç—Ç–æ –Ω–µ reply,
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã.
    logger.info(f"User {user_id}: Defaulting location to main weather service.")
    await handle_main_weather_location(message, state, session, bot)