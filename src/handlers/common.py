# src/handlers/common.py

import logging
from typing import Union
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter # StateFilter —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.keyboards.reply_main import (
    get_main_reply_keyboard, BTN_WEATHER, BTN_CURRENCY, BTN_ALERTS,
    BTN_ALERTS_BACKUP, BTN_WEATHER_BACKUP,
    BTN_LOCATION_MAIN, BTN_LOCATION_BACKUP
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º–∏ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ StateFilter
from src.modules.weather.handlers import weather_entry_point, process_main_geolocation_button, WeatherStates as MainWeatherStates
from src.modules.currency.handlers import currency_entry_point
from src.modules.alert.handlers import alert_entry_point
from src.modules.alert_backup.handlers import alert_backup_entry_point
from src.modules.weather_backup.handlers import weather_backup_entry_point, weather_backup_geolocation_entry_point, WeatherBackupStates
from src.db.models import User
from src.handlers.utils import show_main_menu_message

logger = logging.getLogger(__name__)
router = Router(name="common-handlers")
location_router = Router(name="location-handlers")


@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await state.clear()
    user_tg = message.from_user;
    if not user_tg: logger.warning("Received /start from a user with no user info (message.from_user is None)."); await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."); return
    user_id = user_tg.id; first_name = user_tg.first_name if user_tg.first_name else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"; last_name = user_tg.last_name; username = user_tg.username
    db_user = None
    try:
        db_user = await session.get(User, user_id)
        if db_user:
             needs_update = False
             if db_user.first_name != first_name: db_user.first_name = first_name; needs_update = True
             if db_user.last_name != last_name: db_user.last_name = last_name; needs_update = True
             if db_user.username != username: db_user.username = username; needs_update = True
             if needs_update: logger.info(f"User {user_id} ('{username}') found. Updating info..."); session.add(db_user)
             else: logger.info(f"User {user_id} ('{username}') found. No info update needed.")
        else: logger.info(f"User {user_id} ('{username}') not found. Creating..."); new_user = User(user_id=user_id, first_name=first_name, last_name=last_name, username=username); session.add(new_user)
    except Exception as e: logger.exception(f"DB error during /start for user {user_id}: {e}", exc_info=True); await session.rollback(); await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."); return
    user_name_display = first_name; text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name_display}! üëã\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ:"; reply_markup = get_main_reply_keyboard(); await message.answer(text=text, reply_markup=reply_markup)

@router.message(F.text == BTN_WEATHER)
async def handle_weather_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_entry_point(message, state, session, bot)

@router.message(F.text == BTN_WEATHER_BACKUP)
async def handle_weather_backup_text_request(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
     await weather_backup_entry_point(message, state, session, bot)

@router.message(F.text == BTN_CURRENCY)
async def handle_currency_text_request(message: Message, bot: Bot): await currency_entry_point(message, bot)
@router.message(F.text == BTN_ALERTS)
async def handle_alert_text_request(message: Message, bot: Bot): await alert_entry_point(message, bot)
@router.message(F.text == BTN_ALERTS_BACKUP)
async def handle_alert_backup_text_request(message: Message, bot: Bot): await alert_backup_entry_point(message, bot)


# --- –û–ë–†–ê–ë–û–¢–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò –ß–ï–†–ï–ó LOCATION_ROUTER ---

# –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –æ–∑–Ω–∞—á–∞–µ—Ç: –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ MainWeatherStates.waiting_for_city –ò –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WeatherBackupStates.waiting_for_location
# StateFilter(None) - –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# MainWeatherStates.waiting_for_save_decision - –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∂–¥–µ—Ç —Ä–µ—à–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
# WeatherBackupStates.showing_current - –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é
# WeatherBackupStates.showing_forecast - –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑
# –í–∞–∂–Ω–æ! MainWeatherStates –Ω–µ –∏–º–µ–µ—Ç showing_current/forecast, –ø–æ—ç—Ç–æ–º—É –∏—Ö —É–±–∏—Ä–∞–µ–º –æ—Ç—Ç—É–¥–∞.
allowed_states_for_direct_geo_buttons = StateFilter(
    None, # –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    MainWeatherStates.waiting_for_save_decision, # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ä–µ—à–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏
    WeatherBackupStates.showing_current,         # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é
    WeatherBackupStates.showing_forecast         # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑
)

@location_router.message(F.location, F.reply_to_message.text.contains(BTN_LOCATION_MAIN), allowed_states_for_direct_geo_buttons)
async def handle_main_location_button_press(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} used MAIN location button (detected by reply). Current state: {await state.get_state()}")
    await process_main_geolocation_button(message, state, session, bot)

@location_router.message(F.location, F.reply_to_message.text.contains(BTN_LOCATION_BACKUP), allowed_states_for_direct_geo_buttons)
async def handle_backup_location_button_press(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} used BACKUP location button (detected by reply). Current state: {await state.get_state()}")
    await weather_backup_geolocation_entry_point(message, state, session, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è (waiting_for_location –≤ –ª—é–±–æ–º –∏–∑ –º–æ–¥—É–ª–µ–π)
# –∏ –ù–ï –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–Ω–æ–ø–∫—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å.
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –º—ã –Ω–µ –≤ waiting_for_city –∏ –Ω–µ –≤ waiting_for_location –ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–µ—Ä—Ö–Ω–∏–µ –ø–æ reply_to_message.
@location_router.message(F.location, allowed_states_for_direct_geo_buttons)
async def handle_any_other_location(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    current_state_for_any_other = await state.get_state()
    logger.info(f"User {user_id} sent location directly. Current state: {current_state_for_any_other}. Reply_to: {message.reply_to_message}. Defaulting to main weather.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏,
    # –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ contains –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–¥–µ–∞–ª—å–Ω–æ)
    is_reply_context_handled = False
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        replied_text = message.reply_to_message.text
        if BTN_LOCATION_MAIN in replied_text or BTN_LOCATION_BACKUP in replied_text:
            is_reply_context_handled = True # –£–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            logger.warning(f"User {user_id}: handle_any_other_location caught a reply that should have been handled by button-specific handlers. Replied text: '{replied_text}'")
            # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –∏–ª–∏ –≤—Å–µ –∂–µ –¥–µ—Ñ–æ–ª—Ç–∏—Ç—å. –ü–æ–∫–∞ –¥–µ—Ñ–æ–ª—Ç–∏–º.

    if not is_reply_context_handled:
        await process_main_geolocation_button(message, state, session, bot)
    # –ï—Å–ª–∏ is_reply_context_handled is True, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.
    # –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–µ contains, —Ç–æ –∑–¥–µ—Å—å –º—ã, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å,
    # –∏–ª–∏ —ç—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å replied_text. –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ is_reply_context_handled, —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è.