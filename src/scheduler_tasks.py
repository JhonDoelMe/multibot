# src/scheduler_tasks.py

import asyncio
import logging
from datetime import datetime, time as dt_time, timedelta, timezone

from sqlalchemy import select, extract
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from aiogram import Bot
from aiogram.exceptions import (
    TelegramAPIError, TelegramRetryAfter, TelegramForbiddenError,
    TelegramBadRequest, TelegramNotFound, TelegramConflictError
)


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
from src.db.models import User, ServiceChoice # ServiceChoice –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
from src.modules.weather.service import get_weather_data, format_weather_message
from src.modules.weather_backup.service import get_current_weather_weatherapi, format_weather_backup_message
from src import config # –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ TZ_KYIV —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å

logger = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ TZ_KYIV, –Ω–∞–º–∞–≥–∞—é—á–∏—Å—å —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ pytz, —è–∫—â–æ –≤—ñ–Ω —î, —ñ–Ω–∞–∫—à–µ UTC
# –¶–µ —Ä–æ–±–∏—Ç—å—Å—è —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –æ–∫—Ä–µ–º–æ.
try:
    import pytz
    TZ_KYIV = pytz.timezone('Europe/Kyiv')
    logger.info("Scheduler: Kyiv timezone (Europe/Kyiv) loaded using pytz.")
except ImportError:
    logger.warning("Scheduler: pytz not installed. Using system's understanding of 'Europe/Kyiv' or UTC as fallback for Kyiv time.")
    # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –±–µ–∑ pytz (–º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∞–±–æ –¥–∞–≤–∞—Ç–∏ UTC)
    try:
        # from zoneinfo import ZoneInfo # Python 3.9+
        # TZ_KYIV = ZoneInfo("Europe/Kyiv")
        # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ zoneinfo –Ω–µ–º–∞—î, –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ UTC –∞–±–æ –ø–æ–∫–ª–∞–¥–∞—Ç–∏—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏–π localtime
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, —è–∫—â–æ pytz –Ω–µ–º–∞—î, –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ UTC —ñ –ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.
        # –ê–±–æ –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏ pytz –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—é.
        # –ù–∞—Ä–∞–∑—ñ, —è–∫—â–æ config.TZ_KYIV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ pytz –Ω–µ–º–∞—î, —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø–æ–º–∏–ª–æ–∫.
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î TZ_KYIV –≤ config.py (–≤–∏ –π–æ–≥–æ —Ç—É–¥–∏ –¥–æ–¥–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ)
        if hasattr(config, 'TZ_KYIV') and config.TZ_KYIV:
            TZ_KYIV = config.TZ_KYIV
            logger.info(f"Scheduler: Kyiv timezone loaded from config: {config.TZ_KYIV_NAME if hasattr(config, 'TZ_KYIV_NAME') else 'Europe/Kyiv'}")
        else: # Fallback, —è–∫—â–æ –Ω—ñ–¥–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ
            logger.warning("Scheduler: TZ_KYIV not found in config and pytz not available. Using UTC as fallback.")
            TZ_KYIV = timezone.utc
    except Exception as e_tz:
        logger.error(f"Scheduler: Error setting up Kyiv timezone: {e_tz}. Using UTC as fallback.")
        TZ_KYIV = timezone.utc


async def send_weather_reminders_task(
    session_factory: async_sessionmaker[AsyncSession],
    bot_instance: Bot
):
    """
    –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, cron'–æ–º –∫–æ–∂–Ω—ñ 1-5 —Ö–≤–∏–ª–∏–Ω).
    """
    if not TZ_KYIV:
        logger.critical("Scheduler: Kyiv timezone (TZ_KYIV) is not properly configured. Weather reminders cannot be processed accurately. Exiting task.")
        return

    now_localized = datetime.now(TZ_KYIV)
    
    # –Ø–∫—â–æ cron –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω, –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è,
    # —á–∞—Å —è–∫–∏—Ö –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ –ø–æ—Ç–æ—á–Ω–∏–π 5-—Ö–≤–∏–ª–∏–Ω–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª.
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –∑–∞—Ä–∞–∑ 07:03, –∞ cron –∑–∞–ø—É—Å–∫–∞–≤—Å—è –æ 07:00, –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å 07:00, 07:01, 07:02, 07:03, 07:04.
    # –ê–±–æ –ø—Ä–æ—Å—Ç—ñ—à–µ: —è–∫—â–æ cron –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É, —Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω—É —Ö–≤–∏–ª–∏–Ω—É.
    # –Ø–∫—â–æ cron –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω, —Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞ –∫—Ä–∞—Ç–Ω–∞ 5 (0, 5, 10, ...).
    # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –±–æ —è–∫—â–æ cron —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –æ 07:01, –∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ 07:00, –≤–æ–Ω–æ –±—É–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.
    
    # –ë—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è cron, —â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ N —Ö–≤–∏–ª–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —á–∞—Å —è–∫–∏—Ö –Ω–∞—Å—Ç–∞–≤ *–ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö N —Ö–≤–∏–ª–∏–Ω*.
    # –¶–µ –≤–∏–º–∞–≥–∞—î –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø–æ–∫–∏ —â–æ –±—É–¥–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ç–æ—á–Ω—É –ø–æ—Ç–æ—á–Ω—É –≥–æ–¥–∏–Ω—É —Ç–∞ —Ö–≤–∏–ª–∏–Ω—É.
    # –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ cron –º–∞—î –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –©–û–•–í–ò–õ–ò–ù–ò –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ.
    
    current_time_for_check = now_localized.time().replace(second=0, microsecond=0)
    logger.info(f"Scheduler: Checking weather reminders for current time {current_time_for_check.strftime('%H:%M')} ({TZ_KYIV}).")

    async with session_factory() as session:  # type: AsyncSession
        stmt = (
            select(User)
            .where(User.weather_reminder_enabled == True)
            .where(User.weather_reminder_time != None)
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (—è–∫–∏–π –≤–≤–∞–∂–∞—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–∏–º –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
            # —ñ –º–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î TZ_KYIV) –∑ –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º –≤ TZ_KYIV.
            .where(extract('hour', User.weather_reminder_time) == current_time_for_check.hour)
            .where(extract('minute', User.weather_reminder_time) == current_time_for_check.minute)
        )
        
        result = await session.execute(stmt)
        users_to_remind = result.scalars().all()

        if not users_to_remind:
            logger.info(f"Scheduler: No users found for weather reminder at {current_time_for_check.strftime('%H:%M')}.")
            return

        logger.info(f"Scheduler: Found {len(users_to_remind)} users for weather reminder at {current_time_for_check.strftime('%H:%M')}.")

        successful_sends = 0
        failed_sends = 0
        users_to_disable_reminders = []

        for user in users_to_remind:
            if not user.preferred_city:
                logger.warning(f"Scheduler: User {user.user_id} has reminder enabled but no preferred_city set. Skipping.")
                continue
            
            logger.info(f"Scheduler: Processing reminder for user {user.user_id} (chat_id), city: {user.preferred_city}, reminder time: {user.weather_reminder_time.strftime('%H:%M') if user.weather_reminder_time else 'N/A'}")
            
            weather_data_response: Optional[dict] = None
            formatted_weather: str = f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º. {user.preferred_city} –¥–ª—è –≤–∞—à–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."
            is_error_getting_weather = True

            try:
                service_name_log = ""
                if user.preferred_weather_service == ServiceChoice.OPENWEATHERMAP:
                    service_name_log = "OWM"
                    weather_data_response = await get_weather_data(bot_instance, city_name=user.preferred_city)
                    if weather_data_response and weather_data_response.get("status") != "error" and str(weather_data_response.get("cod")) == "200":
                        # –ü–µ—Ä–µ–¥–∞—î–º–æ –º—ñ—Å—Ç–æ, —è–∫–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä—ñ–≥, –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        formatted_weather = format_weather_message(weather_data_response, user.preferred_city)
                        is_error_getting_weather = False
                    else:
                        error_msg = weather_data_response.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞") if weather_data_response else "–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è"
                        logger.warning(f"Scheduler: Failed to get {service_name_log} weather for user {user.user_id}, city {user.preferred_city}. Error: {error_msg}")
                        formatted_weather = f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ –º. {user.preferred_city} ({service_name_log}): {error_msg}"
                
                elif user.preferred_weather_service == ServiceChoice.WEATHERAPI:
                    service_name_log = "WeatherAPI"
                    weather_data_response = await get_current_weather_weatherapi(bot_instance, location=user.preferred_city)
                    if weather_data_response and not ("error" in weather_data_response and isinstance(weather_data_response.get("error"), dict)):
                        formatted_weather = format_weather_backup_message(weather_data_response, user.preferred_city)
                        is_error_getting_weather = False
                    else:
                        error_details = weather_data_response.get("error", {}) if weather_data_response else {}
                        error_msg = error_details.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                        logger.warning(f"Scheduler: Failed to get {service_name_log} weather for user {user.user_id}, city {user.preferred_city}. Error: {error_msg}")
                        formatted_weather = f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ –º. {user.preferred_city} ({service_name_log}): {error_msg}"
                else:
                    logger.warning(f"Scheduler: Unknown preferred_weather_service '{user.preferred_weather_service}' for user {user.user_id}")
                    continue
            except Exception as e_weather_fetch:
                logger.exception(f"Scheduler: Exception while fetching weather for user {user.user_id}, city {user.preferred_city}.", exc_info=e_weather_fetch)
                # formatted_weather –≤–∂–µ –º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

            message_to_send = formatted_weather
            if not is_error_getting_weather:
                reminder_time_str = user.weather_reminder_time.strftime('%H:%M') if user.weather_reminder_time else "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å"
                reminder_header = f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É ({reminder_time_str})</b>\n\n"
                message_to_send = reminder_header + formatted_weather
            
            try:
                await bot_instance.send_message(user.user_id, message_to_send)
                logger.info(f"Scheduler: Sent weather reminder to user {user.user_id} for city {user.preferred_city}.")
                successful_sends += 1
            except TelegramRetryAfter as e_retry:
                logger.warning(f"Scheduler: Flood control for user {user.user_id}. Retry after {e_retry.retry_after}s. Skipping this reminder cycle for user.")
                failed_sends += 1
                await asyncio.sleep(e_retry.retry_after) # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
            except (TelegramForbiddenError, TelegramBadRequest, TelegramNotFound, TelegramConflictError) as e_tg_user_issue:
                logger.error(f"Scheduler: Failed to send reminder to user {user.user_id} due to user-related API error: {e_tg_user_issue}. Disabling reminders.")
                users_to_disable_reminders.append(user)
                failed_sends += 1
            except TelegramAPIError as e_tg_api:
                logger.error(f"Scheduler: Failed to send reminder to user {user.user_id} due to other Telegram API error: {e_tg_api}.")
                failed_sends += 1
            except Exception as e_send_unknown:
                logger.exception(f"Scheduler: Unknown error sending reminder to user {user.user_id}.", exc_info=e_send_unknown)
                failed_sends += 1
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –ª—ñ–º—ñ—Ç–∏ Telegram
            if len(users_to_remind) > 1: # –Ø–∫—â–æ —î —â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ —á–µ—Ä–∑—ñ
                await asyncio.sleep(0.1) # 100 –º—Å, –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏

        if users_to_disable_reminders:
            logger.info(f"Scheduler: Disabling reminders for {len(users_to_disable_reminders)} users.")
            for user_to_disable in users_to_disable_reminders:
                user_to_disable.weather_reminder_enabled = False
                session.add(user_to_disable)
        
        if users_to_disable_reminders or successful_sends > 0 or failed_sends > 0: # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ —è–∫—ñ—Å—å –¥—ñ—ó
            try:
                await session.commit()
                logger.info(f"Scheduler: Committed DB changes. Successful sends: {successful_sends}, Failed sends: {failed_sends}, Disabled reminders for: {len(users_to_disable_reminders)} users.")
            except Exception as e_commit:
                logger.error(f"Scheduler: Error committing session after processing reminders: {e_commit}")
                await session.rollback()
        else:
            logger.info("Scheduler: No DB changes to commit regarding reminders.")
            # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑–∞–∫—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é —Ç—É—Ç, –∞–ª–µ –≤–æ–Ω–∞ –∑–∞–∫—Ä–∏—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ